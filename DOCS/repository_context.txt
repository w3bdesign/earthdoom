This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-29T22:18:33.791Z

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

## Additional Info

# Directory Structure
```
.github/
  workflows/
    repomix.yml
blog/
  public/
    browserconfig.xml
    favicon.svg
    safari-pinned-tab.svg
    site.webmanifest
  src/
    components/
      common/
        Button.astro
      Footer/
        Footer.astro
      Header/
        BaseHead.astro
        Header.astro
        HeaderLink.astro
      Index/
        CallToAction.astro
        Hero.astro
        Intro.astro
      Manual/
        ManualContent.astro
        ManualSections.js
        Stats.astro
      FormattedDate.astro
    content/
      blog/
        first-post.md
        markdown-style-guide.md
        using-mdx.txt
      config.ts
    layouts/
      BlogPost.astro
    pages/
      blog/
        [...slug].astro
        index.astro
      about.astro
      index.astro
      manual.astro
      rss.xml.js
    styles/
      global.css
    consts.ts
    env.d.ts
  .gitignore
  astro.config.mjs
  package.json
  renovate.json
  tailwind.config.cjs
  tsconfig.json
game/
  prisma/
    migrations/
      20240619044633_init/
        migration.sql
      migration_lock.toml
    schema.prisma
  scripts/
    fix-constructs.ts
  src/
    __tests__/
      components/
        common/
          Button.test.tsx
      pages/
        index.test.tsx
      server/
        api/
          routers/
            paUsers.test.ts
    components/
      common/
        Header/
          constants/
            LINKS.ts
          Information.tsx
          Navbar - Copy.tsx
          Navbar.tsx
          OverviewTable.tsx
        Layout/
          Footer.tsx
          index.ts
          Layout.tsx
        Loader/
          LoadingSpinner.tsx
        Button.tsx
      features/
        Alliance/
          Alliance.tsx
          index.ts
        Construct/
          constants/
            BUILDINGS.tsx
          types/
            types.tsx
        ContNews/
          ContNewsTable.tsx
          index.ts
        Energy/
          constants/
            ENERGY.tsx
        Mail/
          index.ts
          MailTable.tsx
          NewMail.tsx
        Military/
          index.ts
          Military.tsx
        News/
          CombatReport.tsx
          index.ts
          NewsTable.tsx
        Production/
          constants/
            PRODUCTION.tsx
          types/
            types.tsx
          index.ts
          Production.tsx
        Research/
          constants/
            RESEARCH.tsx
        Resources/
          constants/
            RESOURCE.tsx
          BarGraph.tsx
          index.ts
        Spying/
          constants/
            SPYING.tsx
          index.ts
          SpyingTable.tsx
      ui/
        notifications/
          RenderIncoming.tsx
          ToastComponent.tsx
        tables/
          AdvancedDataTable/
            ActionButton.tsx
            AdvancedDataTable.tsx
            index.ts
            InputNumber.tsx
          BDUTable.tsx
          DataTable.tsx
          FleetTable.tsx
          LandTable.tsx
          RankingActions.tsx
          UnitsTable.tsx
        index.ts
    pages/
      addUser/
        [[...index]].tsx
      api/
        trpc/
          [trpc].ts
      login/
        [[...index]].tsx
      register/
        [[...index]].tsx
      _app.tsx
      _document.tsx
      alliance.tsx
      construct.tsx
      contnews.tsx
      country.tsx
      energy.tsx
      error.tsx
      index.tsx
      logout.tsx
      mail.tsx
      military.tsx
      news.tsx
      politics.tsx
      production.tsx
      ranking.tsx
      research.tsx
      resources.tsx
      senate.tsx
      spying.tsx
    server/
      api/
        routers/
          paConstruct.ts
          paMail.ts
          paMilitary.ts
          paNews.ts
          paSpying.ts
          paTag.ts
          paUsers.ts
        root.ts
        trpc.ts
      helpers/
        ssgHelper.ts
      db.ts
    styles/
      globals.css
    utils/
      __mocks__/
        api.ts
      api.ts
      functions.tsx
      hooks.ts
    env.mjs
    middleware.ts
    next-env.d.ts
  .eslintrc.cjs
  .gitignore
  global.d.ts
  index.d.ts
  jest.config.js
  jest.setup.ts
  next-env.d.ts
  next.config.mjs
  package.json
  postcss.config.cjs
  prettier.config.cjs
  renovate.json
  tailwind.config.cjs
  tsconfig.json
tools/
  Battle calculator/
    battle_calc.py
    README.md
  Database tools/
    delete.py
    README.md
  Docs/
    prisma_commands.md
  .gitignore
  README.md
.gitignore
LICENSE
README.md
renovate.json
```

# Files

## File: .github/workflows/repomix.yml
````yaml
name: Repository Documentation
on:
  push:
    branches:
      - main
  workflow_dispatch: # allows manual triggering
permissions:
  contents: write
  pull-requests: write
jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for better context
      - name: Wait for other checks
        run: |
          echo "Waiting for 5 minutes to allow other checks to complete..."
          sleep 300
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install Repomix
        run: npm install -g repomix
      - name: Generate Repository Documentation
        run: |
          echo "Creating DOCS directory..."
          mkdir -p DOCS
          echo "Running Repomix..."
          if ! repomix --output DOCS/repository_context.txt --style markdown --remove-empty-lines --verbose; then
            echo "Error: Repomix command failed"
            # Print directory contents for debugging
            echo "DOCS directory contents:"
            ls -la DOCS/
            exit 1
          fi
          echo "Verifying output file..."
          if [ ! -f "DOCS/repository_context.txt" ]; then
            echo "Error: repository_context.txt was not created"
            # Print directory contents for debugging
            echo "DOCS directory contents:"
            ls -la DOCS/
            exit 1
          fi
          if [ ! -s "DOCS/repository_context.txt" ]; then
            echo "Error: repository_context.txt is empty"
            exit 1
          fi
          echo "Repository context file generated successfully"
          echo "File size: $(stat --format=%s "DOCS/repository_context.txt") bytes"
          echo "First few lines of the file:"
          head -n 5 "DOCS/repository_context.txt"
      # Update Documentation
      - name: Commit and Push Changes
        run: |
          echo "Configuring git..."
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "Checking for changes..."
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Changes detected, committing..."
            # Stage only repository_context.txt to avoid unintended changes
            if ! git add DOCS/repository_context.txt; then
              echo "Error: Failed to stage repository_context.txt"
              exit 1
            fi
            if ! git commit -m "docs: update repository context via Repomix [skip ci]"; then
              echo "Error: Failed to create commit"
              exit 1
            fi
            echo "Pushing to main branch..."
            if ! git push; then
              echo "Error: Failed to push changes"
              exit 1
            fi
            echo "Successfully updated repository context"
          else
            echo "No changes detected in repository_context.txt"
          fi
````

## File: blog/public/browserconfig.xml
````xml
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square150x150logo src="/mstile-150x150.png"/>
            <TileColor>#da532c</TileColor>
        </tile>
    </msapplication>
</browserconfig>
````

## File: blog/public/favicon.svg
````
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 36 36">
  <path fill="#000" d="M22.25 4h-8.5a1 1 0 0 0-.96.73l-5.54 19.4a.5.5 0 0 0 .62.62l5.05-1.44a2 2 0 0 0 1.38-1.4l3.22-11.66a.5.5 0 0 1 .96 0l3.22 11.67a2 2 0 0 0 1.38 1.39l5.05 1.44a.5.5 0 0 0 .62-.62l-5.54-19.4a1 1 0 0 0-.96-.73Z"/>
  <path fill="url(#gradient)" d="M18 28a7.63 7.63 0 0 1-5-2c-1.4 2.1-.35 4.35.6 5.55.14.17.41.07.47-.15.44-1.8 2.93-1.22 2.93.6 0 2.28.87 3.4 1.72 3.81.34.16.59-.2.49-.56-.31-1.05-.29-2.46 1.29-3.25 3-1.5 3.17-4.83 2.5-6-.67.67-2.6 2-5 2Z"/>
  <defs>
    <linearGradient id="gradient" x1="16" x2="16" y1="32" y2="24" gradientUnits="userSpaceOnUse">
      <stop stop-color="#000"/>
      <stop offset="1" stop-color="#000" stop-opacity="0"/>
    </linearGradient>
  </defs>
	<style>
    @media (prefers-color-scheme:dark){:root{filter:invert(100%)}}
  </style>
</svg>
````

## File: blog/public/safari-pinned-tab.svg
````
<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="811.000000pt" height="811.000000pt" viewBox="0 0 811.000000 811.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.14, written by Peter Selinger 2001-2017
</metadata>
<g transform="translate(0.000000,811.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M3805 7730 c-236 -23 -312 -34 -470 -65 -360 -72 -655 -177 -1003
-357 -330 -172 -575 -351 -838 -613 -400 -400 -689 -861 -877 -1400 -77 -223
-157 -557 -118 -496 7 11 27 14 74 12 38 -1 68 2 72 8 3 6 17 11 30 11 13 0
27 5 30 10 3 6 17 10 31 10 14 0 27 7 31 15 8 21 79 55 91 43 5 -5 14 15 22
49 57 258 246 678 436 970 296 455 683 832 1139 1108 115 70 378 200 455 225
14 5 57 21 95 35 72 28 97 36 251 79 99 28 255 62 331 71 26 4 76 11 109 16
34 5 147 13 251 19 640 33 1170 -76 1726 -356 311 -156 598 -364 858 -624 156
-156 273 -298 392 -478 95 -143 201 -332 184 -329 -6 1 -36 45 -67 97 -31 52
-63 106 -71 120 -98 166 -247 357 -419 533 -196 203 -381 353 -611 498 -148
93 -206 122 -206 103 0 -8 6 -13 13 -10 8 3 16 0 20 -6 4 -6 3 -9 -2 -6 -5 3
-18 2 -29 -2 -13 -4 -44 5 -95 30 -112 56 -203 94 -320 134 -58 21 -115 41
-126 46 -36 15 -213 58 -324 79 -244 46 -290 53 -380 57 -52 2 -135 7 -185 10
-49 4 -146 8 -215 9 l-125 3 -86 -49 c-48 -28 -97 -51 -110 -53 -13 -1 -31 -6
-39 -9 -117 -52 -252 -69 -272 -34 -11 20 -30 13 -21 -8 4 -11 -4 -17 -26 -21
-17 -4 -34 -11 -37 -15 -3 -5 -27 -9 -54 -9 -47 0 -225 -51 -245 -71 -14 -14
-43 -11 -53 7 -13 24 -43 14 -148 -50 -52 -32 -88 -60 -86 -68 2 -7 0 -10 -3
-6 -4 4 -22 -3 -39 -16 -17 -12 -56 -35 -86 -50 -71 -36 -148 -84 -183 -116
-35 -31 -59 -40 -73 -29 -17 13 -116 -56 -219 -152 -113 -104 -100 -94 -225
-187 -71 -53 -104 -84 -102 -95 2 -9 -2 -17 -7 -17 -25 0 -155 -152 -301 -350
-105 -143 -137 -196 -146 -245 -3 -16 -19 -44 -35 -61 l-29 -30 20 -19 c14
-12 18 -25 14 -39 -3 -12 5 -4 20 17 14 21 35 47 46 59 15 16 20 36 20 76 0
49 3 57 38 91 38 37 78 89 153 196 24 33 55 73 71 89 15 17 28 33 28 38 0 11
37 10 44 -1 3 -5 -9 -22 -27 -38 -18 -15 -33 -39 -34 -51 -1 -12 -13 -36 -27
-53 -14 -17 -26 -34 -27 -37 -3 -32 -11 -48 -34 -72 -27 -28 -55 -112 -55
-166 0 -24 -9 -38 -39 -62 -22 -18 -44 -32 -49 -32 -5 0 -35 -23 -67 -50 -31
-28 -71 -54 -87 -57 -34 -7 -48 -34 -48 -91 0 -21 -7 -47 -15 -59 -14 -21 -14
-24 6 -44 13 -13 29 -19 44 -17 22 5 23 4 8 -18 -10 -16 -13 -35 -9 -59 5 -27
3 -38 -13 -51 -16 -14 -17 -22 -9 -45 5 -16 14 -29 19 -29 5 0 9 -7 9 -15 0
-8 7 -15 15 -15 8 0 15 -5 15 -11 0 -8 4 -8 13 -2 6 5 18 8 25 7 6 -1 17 -2
22 -3 7 -1 7 -8 -1 -22 -7 -15 -8 -19 0 -15 7 5 9 1 5 -8 -4 -11 0 -16 11 -16
10 0 14 -5 9 -12 -4 -7 1 -6 12 3 10 9 24 14 31 12 6 -2 14 6 18 18 8 24 69
89 84 89 5 0 11 8 13 18 3 14 7 12 22 -10 18 -28 18 -28 -10 -62 -16 -19 -34
-35 -41 -35 -6 -1 -15 -11 -18 -23 -4 -13 -17 -34 -30 -48 -12 -14 -28 -43
-35 -65 -16 -49 -22 -153 -9 -161 5 -3 9 -14 9 -25 0 -11 5 -17 10 -14 6 3 10
0 10 -7 0 -7 9 -19 20 -25 16 -11 21 -10 29 5 5 9 12 14 15 11 8 -8 -24 -50
-34 -44 -7 4 -2 -26 16 -83 11 -36 66 -95 76 -80 5 9 8 5 9 -12 1 -14 1 -28 0
-32 0 -5 5 -7 12 -5 6 1 11 -5 9 -13 -3 -12 -1 -13 9 -2 20 19 26 15 34 -25 4
-20 20 -56 37 -79 18 -25 28 -49 25 -58 -4 -9 -2 -16 3 -16 6 0 10 -7 10 -16
0 -44 101 -84 214 -84 109 0 68 -20 -64 -31 -90 -8 -122 -15 -159 -35 -109
-61 -180 -111 -202 -144 -13 -19 -26 -37 -29 -40 -16 -16 -34 -71 -46 -140 -8
-45 -15 -60 -25 -55 -5 4 -9 -5 -9 -19 0 -27 -17 -72 -36 -96 -23 -28 -67
-223 -69 -302 -1 -43 1 -78 4 -78 7 0 13 -35 15 -82 1 -14 5 -24 10 -21 5 3 5
-12 2 -33 -11 -58 -11 -94 -2 -144 7 -44 7 -44 -9 -22 -9 12 -21 19 -27 16 -6
-4 -8 -2 -5 3 6 10 -12 78 -18 71 -1 -2 1 -27 5 -56 3 -29 3 -55 -2 -58 -4 -3
-8 -10 -8 -15 0 -6 4 -8 10 -4 5 3 19 -15 30 -40 15 -33 26 -45 36 -41 9 4 18
-3 24 -18 11 -29 60 -77 72 -70 4 3 8 0 8 -6 0 -6 5 -8 12 -4 7 5 8 3 4 -5 -5
-8 0 -14 13 -18 26 -7 26 -7 -3 -36 -17 -17 -29 -21 -39 -15 -20 11 -31 -6
-23 -35 7 -27 45 -71 69 -80 11 -4 14 -12 10 -23 -5 -13 -3 -15 8 -9 12 8 12
6 0 -8 -20 -25 -44 -21 -66 13 -24 36 -60 42 -49 8 17 -54 35 -88 59 -106 14
-11 25 -25 25 -31 0 -5 9 -15 20 -21 11 -6 19 -16 17 -23 -1 -7 4 -11 10 -10
7 2 12 -1 10 -6 -1 -5 20 -28 46 -51 26 -23 55 -56 64 -73 19 -37 38 -58 46
-50 3 3 9 -6 13 -21 3 -14 9 -26 14 -26 4 0 12 -10 18 -22 6 -13 11 -17 11
-10 1 6 6 12 12 12 7 0 9 -10 5 -25 -5 -21 0 -29 33 -52 22 -16 40 -34 41 -40
0 -7 6 -14 13 -14 6 -1 18 -2 25 -3 7 0 16 -5 20 -11 10 -14 80 -67 126 -95
29 -18 41 -21 44 -11 3 8 20 -3 48 -30 24 -24 56 -45 71 -47 33 -4 129 -67
149 -97 8 -13 26 -26 40 -29 16 -4 22 -11 18 -19 -5 -9 -4 -9 6 0 8 7 22 8 40
3 16 -5 31 -6 34 -3 3 3 13 0 22 -8 16 -13 16 -12 3 9 -8 12 -19 22 -24 22
-17 0 -95 53 -95 65 0 6 28 10 67 10 60 0 68 -2 72 -20 4 -22 21 -36 34 -28 4
3 6 12 3 20 -3 8 -1 11 4 8 6 -3 10 -14 10 -24 0 -10 9 -21 20 -24 14 -4 18
-10 14 -22 -6 -15 -4 -15 14 -4 26 16 40 5 22 -16 -7 -9 -10 -18 -6 -22 3 -3
6 -1 6 5 0 7 7 12 15 12 8 0 15 -5 15 -11 0 -5 -4 -8 -9 -4 -5 3 -13 0 -17 -6
-5 -9 -11 -7 -21 6 -12 18 -13 18 -13 -3 0 -13 6 -22 15 -22 8 0 15 -4 15 -10
0 -14 26 -12 39 3 6 8 21 13 33 11 13 -1 27 -3 33 -3 5 -1 -1 -8 -13 -17 -25
-17 -30 -54 -8 -54 8 0 18 5 21 10 4 6 10 8 14 6 4 -3 15 6 25 19 10 13 24 21
32 18 8 -3 14 0 14 7 0 10 3 10 15 0 9 -8 29 -10 49 -7 29 5 44 -1 90 -33 56
-40 106 -49 135 -27 10 9 18 5 33 -16 22 -30 72 -60 82 -50 3 4 6 0 6 -9 0
-18 81 -39 104 -26 12 7 16 5 16 -7 0 -9 4 -13 10 -10 5 3 10 2 10 -4 0 -6 6
-8 14 -5 8 3 22 -3 32 -14 11 -10 38 -29 62 -42 23 -13 42 -27 42 -32 0 -4 9
-8 19 -8 11 0 22 -4 25 -9 4 -5 -4 -7 -16 -4 -19 4 -20 3 -8 -6 22 -16 50 -13
50 4 0 8 -5 15 -12 15 -7 0 -8 3 -3 9 14 12 86 1 78 -12 -3 -6 -1 -7 5 -3 20
12 14 21 -25 39 -25 11 -41 13 -49 6 -8 -6 -29 -2 -65 15 -44 20 -48 24 -24
22 17 -2 38 -7 48 -11 23 -9 36 3 17 15 -8 6 -11 10 -7 10 5 0 22 -10 39 -21
24 -17 32 -19 41 -9 9 10 9 11 -2 5 -10 -5 -12 -4 -7 4 4 6 20 10 36 9 16 -1
26 -6 24 -10 -6 -9 8 -11 53 -9 17 1 35 -4 39 -10 5 -8 3 -9 -6 -4 -8 5 -11 4
-6 -3 4 -6 12 -9 19 -6 7 2 22 -5 32 -16 18 -20 18 -21 0 -14 -12 5 -16 4 -12
-3 4 -6 1 -13 -5 -16 -8 -3 -3 -9 12 -15 14 -6 19 -11 11 -11 -10 -1 -11 -4
-2 -15 17 -21 -11 -27 -44 -10 -15 8 -34 14 -42 14 -8 0 -11 5 -7 11 4 8 -1 9
-17 5 -13 -3 -18 -3 -11 0 17 8 15 24 -3 24 -8 0 -15 -4 -15 -10 0 -5 -8 -10
-17 -10 -10 -1 1 -8 25 -16 23 -8 58 -24 78 -36 32 -19 34 -22 20 -36 -13 -13
-21 -13 -69 0 -51 15 -54 15 -65 -3 -10 -16 -9 -19 7 -19 11 0 23 5 26 10 3 6
11 10 18 10 8 0 8 -3 -1 -12 -7 -7 -12 -15 -12 -19 0 -11 57 -22 106 -21 31 1
49 -5 68 -23 32 -30 33 -40 4 -24 -21 11 -22 11 -10 -4 8 -9 11 -20 8 -26 -3
-5 12 -12 34 -16 22 -4 40 -10 40 -13 0 -4 15 -7 33 -8 17 0 52 -4 77 -9 57
-11 336 -12 414 -2 59 7 90 22 80 38 -2 5 8 11 23 15 15 4 50 20 76 36 67 40
102 46 118 20 15 -24 42 -17 34 9 -6 18 -2 20 70 35 11 2 2 -4 -20 -14 -37
-17 -38 -20 -18 -26 23 -7 61 7 78 31 12 16 148 84 154 77 8 -8 -33 -33 -71
-44 -36 -10 -55 -26 -45 -37 3 -3 49 5 101 18 53 13 91 26 84 30 -7 5 -1 10
18 14 43 10 102 36 116 52 6 8 20 19 31 25 17 9 19 8 13 -7 -5 -15 -1 -16 36
-10 31 4 39 3 28 -4 -13 -9 -13 -11 2 -11 9 0 19 4 22 9 3 5 18 11 33 13 16 3
37 9 48 13 17 8 18 7 7 -7 -9 -11 -10 -18 -2 -23 5 -3 10 -1 10 4 0 6 5 11 11
11 6 0 9 -6 6 -13 -6 -16 54 12 84 39 11 9 19 14 19 10 0 -4 12 2 26 13 15 12
30 21 35 21 9 0 197 109 279 162 30 20 107 80 170 135 63 54 151 128 195 163
189 153 233 193 289 259 32 39 62 68 67 65 5 -3 9 -1 9 4 0 15 28 23 36 10 5
-7 2 -8 -6 -3 -9 6 -11 4 -6 -4 5 -8 -9 -33 -35 -64 -24 -29 -33 -43 -21 -33
41 36 209 269 296 411 93 152 116 185 116 168 0 -7 -4 -14 -9 -17 -5 -3 -27
-41 -48 -83 -22 -43 -74 -132 -117 -198 -322 -492 -792 -900 -1332 -1156 -458
-216 -822 -300 -1379 -315 -417 -12 -771 38 -1150 164 -329 109 -753 345
-1045 582 -137 112 -363 336 -479 475 -276 331 -488 731 -632 1187 -28 90 -36
107 -51 102 -9 -3 -38 6 -64 20 -27 14 -49 24 -50 23 -8 -8 81 -323 119 -422
58 -151 76 -195 133 -316 112 -242 252 -471 417 -684 374 -482 826 -819 1432
-1067 63 -25 116 -51 90 -42 -11 3 -40 12 -65 19 -157 43 -490 207 -689 339
-344 229 -672 556 -923 921 -260 379 -435 778 -566 1292 -30 118 -41 148 -48
133 -9 -19 -11 -18 -53 15 -32 25 -55 35 -82 36 -48 2 -51 2 -68 13 -11 7 -12
-1 -7 -45 55 -436 261 -1019 499 -1409 288 -471 703 -887 1157 -1161 491 -296
1090 -493 1605 -529 176 -13 526 -12 660 0 735 69 1464 370 2028 838 198 164
473 462 628 682 208 294 409 710 503 1040 87 305 133 614 143 944 l6 228 -21
-6 c-12 -3 -31 -9 -43 -12 -33 -9 -139 6 -139 21 0 7 11 14 25 15 61 5 113 4
144 -4 l34 -8 -7 163 c-19 443 -131 918 -317 1337 -356 805 -999 1432 -1839
1795 -353 152 -706 243 -1100 283 -181 18 -496 26 -615 14z m-141 -655 c-4 -8
-11 -12 -16 -9 -6 4 -5 10 3 15 19 12 19 11 13 -6z m-770 -193 l-29 -24 38 22
c23 13 37 17 37 10 0 -8 10 -10 33 -6 17 4 39 8 47 9 9 2 22 7 30 12 13 8 13
7 1 -8 -8 -10 -19 -16 -25 -14 -5 2 -23 -9 -39 -25 -17 -15 -36 -28 -44 -28
-8 0 -12 -4 -9 -9 3 -5 -13 -11 -35 -15 -22 -4 -50 -12 -62 -20 -12 -7 -32
-12 -44 -11 -13 1 -23 -2 -23 -8 0 -6 -3 -8 -6 -4 -3 3 -31 -5 -61 -19 -31
-13 -74 -24 -96 -24 -25 0 -56 -10 -83 -25 -36 -21 -47 -23 -71 -14 -15 6 -41
8 -58 5 -16 -3 -37 -1 -45 4 -12 7 -7 12 23 25 20 8 37 20 37 25 0 21 53 42
130 49 61 7 87 14 104 30 12 11 34 21 49 21 15 0 27 5 27 11 0 6 9 9 20 6 11
-3 20 -2 20 2 0 13 78 44 91 36 8 -5 10 -4 5 4 -10 16 35 32 53 18 11 -9 8
-16 -15 -35z m303 -246 c-9 -22 5 -27 20 -8 13 15 13 15 3 -5 -14 -30 -24 -35
-55 -23 -29 11 -25 26 9 40 29 12 29 12 23 -4z m-511 -10 c12 -32 -38 -82 -70
-70 -22 9 -20 34 6 61 24 26 56 30 64 9z m399 -10 c12 -12 11 -15 -8 -20 -12
-3 -25 0 -29 7 -6 9 -8 9 -8 0 0 -7 -6 -10 -14 -7 -17 6 -99 -64 -90 -77 3 -5
-1 -9 -9 -9 -8 0 -20 -7 -27 -16 -8 -8 -25 -14 -40 -12 -15 1 -34 -3 -42 -9
-9 -8 -19 -9 -28 -3 -23 15 -74 12 -96 -5 -21 -16 -54 -20 -54 -6 0 5 17 22
38 38 51 41 63 47 60 32 -2 -7 5 -15 15 -17 9 -2 17 1 17 7 0 6 -6 8 -13 5
-17 -6 -16 22 1 54 13 23 55 31 67 12 7 -12 58 -2 110 21 48 22 131 25 150 5z
m-598 -112 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2 13 -5z m-42 -23
c-4 -15 0 -20 17 -23 31 -4 36 -41 8 -61 -11 -8 -20 -19 -18 -23 2 -5 -7 -20
-18 -32 -16 -17 -24 -20 -29 -11 -6 9 -11 9 -19 -3 -12 -16 -46 -33 -75 -37
-6 0 -18 -14 -28 -31 -9 -16 -24 -30 -33 -30 -10 0 -11 -3 -4 -8 16 -11 26
-79 15 -101 -9 -16 -51 -37 -51 -24 0 3 9 16 20 31 13 16 17 28 10 32 -6 4 -8
14 -4 23 4 12 1 17 -12 17 -18 -1 -74 -75 -74 -99 0 -6 -7 -11 -16 -11 -12 0
-15 -6 -11 -21 7 -28 -29 -65 -48 -49 -8 7 -15 7 -19 1 -4 -5 -2 -12 3 -16 16
-9 1 -34 -22 -37 -22 -3 -22 -24 0 -22 8 1 9 -5 3 -22 -12 -30 -5 -30 35 0 18
14 44 28 58 31 14 4 28 14 31 22 4 8 13 13 20 10 8 -3 16 0 19 7 6 14 77 38
77 26 0 -5 -11 -17 -25 -28 -22 -17 -23 -21 -8 -26 14 -6 10 -12 -22 -39 -24
-19 -48 -30 -61 -29 -13 2 -36 -6 -52 -18 -26 -19 -30 -20 -57 -6 -22 12 -32
12 -43 4 -10 -9 -15 -9 -21 1 -7 10 -13 10 -30 -1 -25 -15 -40 -60 -23 -66 22
-7 12 -38 -29 -96 -22 -31 -43 -72 -46 -92 -6 -36 -26 -55 -71 -69 -22 -6 -23
-4 -19 24 3 17 2 31 -1 31 -4 0 -17 3 -29 6 -16 5 -23 2 -23 -8 0 -13 -12 -21
-62 -46 -5 -2 -8 7 -7 20 1 13 -2 34 -5 47 -3 14 -1 30 5 37 5 7 12 25 15 40
3 15 17 39 32 53 15 15 43 47 62 70 19 24 47 58 61 75 46 56 59 80 59 109 0
21 -4 28 -14 24 -10 -4 -13 -1 -9 9 4 10 14 13 37 9 29 -5 40 3 146 100 175
162 180 166 189 161 5 -3 14 1 21 9 7 8 20 15 29 15 10 0 28 11 41 25 13 14
29 24 36 21 7 -3 15 -2 19 2 4 4 12 7 18 7 5 0 12 6 15 13 2 7 -2 10 -11 6
-30 -11 -26 15 7 50 37 40 50 45 41 17z m-12 -211 c18 0 19 -2 7 -10 -12 -7
-8 -10 14 -10 23 0 26 -3 17 -14 -8 -10 -9 -16 -1 -21 15 -9 4 -22 -27 -30
-15 -3 -39 -15 -54 -26 -15 -10 -33 -17 -41 -15 -7 2 -26 7 -43 11 l-30 7 46
41 c25 23 49 50 52 61 5 11 13 16 23 12 9 -3 25 -6 37 -6z m25 -197 c-12 -12
-28 -23 -36 -23 -12 0 -10 6 6 23 12 13 29 24 37 24 12 0 10 -6 -7 -24z m3454
-269 c-41 -33 -85 -98 -240 -354 l-123 -205 -1297 -5 -1297 -5 -3 -412 -2
-413 1317 1 c725 0 1339 4 1365 8 l47 8 -47 -52 c-27 -29 -96 -139 -160 -253
-62 -110 -119 -205 -126 -211 -9 -8 -370 -12 -1197 -13 l-1184 -3 -3 -487 -2
-488 342 0 c529 0 1048 12 1041 23 -4 6 3 7 18 3 47 -15 341 -24 786 -25 l452
-1 39 -57 c21 -32 78 -123 127 -203 49 -80 110 -177 137 -217 26 -40 48 -74
48 -77 0 -3 -287 -6 -637 -6 -387 0 -683 -5 -753 -12 -141 -13 -184 -13 -430
0 -107 6 -530 11 -940 12 l-745 0 0 1728 c0 950 1 1730 3 1735 1 4 788 7 1750
7 l1747 0 -33 -26z m-4285 -101 c-9 -9 -20 -13 -24 -9 -4 4 -1 11 7 16 25 16
35 11 17 -7z m-133 -178 c-4 -8 -11 -15 -16 -15 -6 0 -5 6 2 15 7 8 14 15 16
15 2 0 1 -7 -2 -15z m-14 -38 c0 -16 -44 -82 -67 -100 -15 -12 -23 -15 -17 -7
6 8 23 36 38 63 15 26 31 47 36 47 6 0 10 -1 10 -3z m289 -125 c-27 -19 -37
-7 -14 18 14 15 21 17 26 8 5 -7 0 -18 -12 -26z m-245 -253 c-8 -13 -24 -1
-24 18 0 13 3 13 15 3 8 -7 12 -16 9 -21z m4823 -277 c22 -7 36 -58 23 -82 -7
-13 -8 -20 -2 -16 6 3 13 2 16 -2 3 -5 33 -10 67 -11 71 -2 127 -27 153 -65 9
-14 12 -26 8 -26 -5 0 -12 -22 -15 -49 -15 -124 -59 -160 -175 -142 -36 6 -68
8 -71 5 -3 -2 15 -23 39 -45 l44 -42 -39 -32 c-21 -18 -45 -31 -52 -28 -15 6
-18 23 -4 23 5 0 8 8 7 18 -3 17 -8 19 -54 21 -20 1 -21 4 -12 22 14 26 6 49
-18 49 -10 0 -23 5 -29 11 -8 8 -17 8 -32 0 -23 -13 -29 -41 -9 -41 9 0 9 -3
0 -12 -7 -7 -12 -15 -12 -20 0 -11 50 -58 62 -58 11 0 29 -15 69 -57 12 -12
28 -19 35 -16 9 3 14 -2 14 -16 0 -12 6 -21 13 -22 96 -6 118 -6 123 2 3 5 10
9 16 9 7 0 6 -5 -2 -15 -13 -16 -6 -35 14 -35 6 0 17 -5 24 -12 10 -10 3 -15
-30 -25 -81 -24 -133 -8 -121 37 7 27 -21 27 -40 -1 -8 -11 -21 -20 -28 -19
-28 4 -40 0 -34 -12 3 -7 -2 -3 -11 10 -9 12 -23 22 -30 22 -8 0 -14 5 -14 11
0 5 6 7 13 3 6 -4 5 1 -4 10 -9 10 -22 19 -30 20 -8 2 -22 7 -33 11 -12 5 -21
3 -27 -6 -8 -12 -11 -11 -20 4 -5 9 -19 17 -31 17 -18 0 -19 2 -7 17 12 15 12
16 -5 10 -16 -6 -17 -5 -6 8 11 13 11 16 0 13 -9 -2 -14 6 -14 22 -1 26 -21
34 -43 17 -9 -7 -13 -4 -13 8 0 12 -5 15 -16 11 -9 -4 -23 -1 -30 5 -8 6 -20
9 -28 6 -10 -4 -16 5 -21 30 -4 25 -10 33 -21 29 -8 -3 -14 -1 -14 3 0 5 4 11
10 13 10 3 -19 71 -33 77 -5 2 -3 7 4 12 12 7 12 10 0 21 -12 11 -13 10 -6 -2
5 -9 4 -12 -1 -7 -11 11 -13 58 -2 51 4 -3 8 5 9 18 0 13 3 17 6 11 7 -18 31
-16 50 3 15 14 17 14 25 0 5 -9 13 -14 19 -11 15 10 10 45 -6 45 -22 0 -30 27
-13 44 7 7 21 23 31 35 10 12 22 19 27 16 5 -3 17 6 26 20 9 14 24 25 33 25 9
0 54 14 101 30 75 26 141 34 177 22z m-427 -112 c0 -5 -5 -10 -11 -10 -5 0 -7
5 -4 10 3 6 8 10 11 10 2 0 4 -4 4 -10z m-53 -76 c-3 -3 -12 -4 -19 -1 -8 3
-5 6 6 6 11 1 17 -2 13 -5z m-4052 -143 c3 -5 1 -12 -5 -16 -5 -3 -10 1 -10 9
0 18 6 21 15 7z m4420 -131 c3 -6 -1 -7 -9 -4 -18 7 -21 14 -7 14 6 0 13 -4
16 -10z m-449 -102 c4 -6 3 -8 -4 -4 -5 3 -12 1 -14 -6 -2 -6 -10 -8 -16 -4
-7 4 -10 12 -7 17 8 13 32 11 41 -3z m609 -48 c3 -5 1 -10 -4 -10 -6 0 -11 5
-11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m-271 -9 c3 -5 -1 -11 -9 -14 -9 -4
-12 -1 -8 9 6 16 10 17 17 5z m116 -25 c0 -11 -19 -15 -25 -6 -3 5 1 10 9 10
9 0 16 -2 16 -4z m-1785 -1086 c50 -26 106 -51 125 -56 34 -7 34 -8 10 -15
-34 -10 -439 -9 -470 1 -14 4 -20 8 -13 9 10 1 43 27 109 88 14 13 37 26 52
29 15 3 32 7 37 8 15 5 52 -11 150 -64z m-2822 -756 c-2 -6 3 -14 12 -18 10
-3 15 -12 11 -21 -3 -10 1 -15 11 -15 9 0 13 -3 10 -7 -4 -3 -1 -13 6 -22 11
-14 10 -14 -6 -2 -33 26 -86 107 -84 129 1 21 2 21 23 -5 12 -15 20 -33 17
-39z m3248 -73 c20 -21 21 -27 10 -75 -6 -28 -10 -62 -8 -76 2 -21 -2 -25 -23
-22 -18 2 -21 0 -12 -6 11 -7 10 -10 -3 -16 -10 -3 -13 -11 -9 -18 5 -8 0 -7
-11 2 -11 9 -16 10 -11 3 4 -7 3 -13 -2 -13 -14 0 -22 -38 -8 -44 6 -2 3 -5
-8 -5 -15 -1 -16 -4 -7 -15 7 -8 21 -12 33 -8 14 3 19 1 15 -6 -8 -11 -25 -11
-44 1 -7 4 -21 4 -30 -1 -10 -4 -29 -7 -43 -6 -14 1 -30 -2 -36 -7 -7 -6 -16
-8 -20 -7 -5 2 -10 0 -11 -4 -6 -17 -3 -28 8 -28 18 0 39 -28 33 -44 -3 -9 -1
-16 4 -16 17 0 26 41 11 51 -22 14 -2 10 37 -6 26 -11 34 -11 31 -2 -2 6 -9
13 -15 13 -7 1 -18 2 -24 3 -10 1 -9 4 1 10 20 13 57 -3 53 -23 -2 -11 2 -14
15 -10 15 5 16 4 3 -5 -8 -6 -24 -11 -36 -11 -11 0 -27 -6 -35 -12 -8 -7 -12
-12 -10 -11 2 2 10 -2 18 -8 7 -6 22 -9 32 -6 11 3 22 -1 24 -7 3 -8 -4 -11
-23 -8 -21 3 -28 -1 -33 -17 -6 -23 3 -27 20 -10 7 7 12 6 16 -4 4 -11 -3 -13
-28 -11 -20 1 -39 -4 -46 -12 -6 -7 -15 -11 -20 -8 -5 3 -9 -1 -9 -8 0 -10 -2
-10 -8 -1 -6 9 -17 10 -45 2 -20 -5 -36 -13 -36 -17 3 -17 -2 -32 -8 -31 -22
4 -35 -3 -30 -14 3 -9 -7 -19 -29 -27 -21 -9 -33 -19 -30 -27 3 -7 2 -12 -2
-12 -20 3 -32 -2 -32 -15 0 -21 50 -7 60 18 5 11 9 17 9 12 1 -5 7 -3 15 3 10
9 15 8 20 -4 4 -10 -1 -15 -17 -16 -17 -1 -18 -2 -4 -6 9 -2 17 -11 17 -19 0
-17 12 -18 29 -1 10 10 12 6 8 -20 -6 -37 -14 -53 -28 -53 -6 0 -7 5 -3 12 5
7 3 8 -5 4 -9 -6 -8 -13 5 -27 20 -22 39 -25 31 -5 -3 8 -3 17 1 21 4 4 8 11
8 16 1 5 2 13 3 18 0 5 8 11 16 15 13 4 13 2 5 -14 -5 -10 -10 -21 -10 -24 0
-12 28 -5 40 9 13 16 30 20 30 8 0 -9 -49 -33 -67 -33 -7 0 -13 -7 -13 -16 0
-9 5 -12 12 -8 7 4 8 3 4 -4 -4 -7 -14 -12 -22 -12 -9 0 -13 -5 -9 -12 4 -7 1
-6 -7 2 -7 9 -22 14 -33 13 l-20 -3 20 9 c17 8 14 10 -17 10 -20 1 -40 6 -43
12 -5 7 -13 5 -25 -6 -18 -16 -38 -5 -26 14 9 14 -26 23 -36 9 -8 -10 -11 -10
-15 0 -8 21 -21 13 -16 -9 5 -19 4 -20 -17 -9 -15 8 -20 8 -16 1 7 -11 -6 -15
-34 -11 -8 1 -25 13 -39 26 -25 25 -55 31 -66 14 -10 -16 -67 -8 -72 11 -9 33
-102 83 -95 52 3 -16 -14 -17 -24 -2 -3 6 0 15 7 21 10 6 5 8 -16 7 -87 -6
-96 8 -32 46 50 29 65 32 46 9 -11 -14 -10 -15 11 -12 14 2 24 9 22 16 -1 6 4
11 10 10 7 -2 12 5 12 15 -1 10 5 17 15 17 12 0 13 2 3 9 -11 6 -9 9 7 14 28
7 31 0 15 -31 -18 -34 -2 -44 50 -32 24 5 47 5 61 -2 29 -13 109 7 102 26 -4
9 0 12 12 9 11 -3 24 5 35 21 15 24 15 27 1 32 -10 4 -25 -4 -41 -21 -15 -16
-31 -24 -40 -21 -8 3 -13 2 -10 -3 3 -5 -1 -11 -9 -15 -20 -7 -26 6 -11 25 6
9 23 16 36 15 14 -1 31 7 39 17 8 11 21 17 32 14 11 -3 22 -1 25 4 3 5 -5 9
-17 9 -12 0 -19 3 -16 7 8 8 -12 35 -22 29 -6 -4 -7 30 -3 59 1 6 13 -3 26
-20 22 -27 27 -29 46 -17 12 7 25 11 28 8 3 -3 1 -6 -5 -6 -18 0 -2 -38 18
-43 10 -3 19 -1 19 4 0 5 -8 9 -17 10 -12 0 -8 4 10 11 15 5 27 15 27 21 0 7
5 5 10 -4 6 -10 19 -14 44 -11 39 4 44 13 22 31 -18 15 -14 42 9 55 13 8 19 8
22 -1 3 -7 9 -13 14 -13 6 0 7 5 4 10 -3 6 -2 10 3 10 5 0 12 9 15 21 7 27
-18 36 -42 15 -22 -20 -41 -21 -41 -1 0 8 5 15 10 15 6 0 10 5 10 11 0 8 -6 7
-17 -2 -13 -11 -17 -11 -20 -1 -3 6 -10 12 -17 12 -9 0 -12 14 -10 45 1 25 -1
45 -5 45 -3 0 -14 13 -23 28 -14 23 -15 31 -5 41 9 10 8 11 -5 6 -11 -4 -18
-2 -18 4 0 13 -36 15 -44 3 -3 -5 1 -29 9 -55 9 -30 10 -49 4 -53 -13 -8 -39
14 -39 33 0 9 -6 13 -14 10 -8 -3 -17 -1 -20 6 -4 7 -4 0 -2 -15 2 -16 2 -28
0 -28 -1 0 -19 16 -39 35 -22 22 -33 40 -29 48 5 8 2 7 -9 -2 -11 -9 -29 -11
-51 -7 -21 4 -36 2 -38 -4 -2 -6 -13 -12 -26 -13 -12 0 -22 -7 -22 -14 0 -14
-82 -33 -91 -20 -4 5 -16 -5 -28 -21 -22 -32 -27 -47 -12 -38 15 9 33 -22 26
-44 -3 -11 -3 -20 2 -20 19 -1 33 -18 27 -33 -3 -9 -9 -15 -14 -12 -4 2 -4
-13 0 -35 4 -24 3 -43 -4 -51 -8 -9 -8 -10 1 -5 10 6 13 -20 2 -26 -2 -2 -3
-1 -2 1 5 8 -27 31 -44 32 -10 0 -13 3 -5 6 6 2 12 11 12 19 0 8 -6 14 -12 14
-8 0 -9 3 -3 8 14 10 19 52 6 52 -6 0 -18 -12 -27 -27 -9 -16 -25 -40 -36 -55
l-18 -27 30 -16 c30 -16 38 -29 21 -39 -5 -3 -11 3 -14 14 -4 17 -9 19 -32 10
-29 -11 -60 3 -49 22 3 5 -1 17 -10 27 -15 16 -14 17 13 13 23 -3 33 2 46 22
10 14 20 24 24 22 3 -2 7 9 8 26 2 23 -1 29 -15 26 -9 -2 -16 -9 -15 -15 1 -6
-6 -9 -17 -6 -11 3 -17 9 -14 14 3 5 0 9 -5 9 -6 0 -11 -7 -11 -15 0 -13 -4
-14 -21 -4 -15 8 -24 8 -32 0 -13 -13 -47 -15 -47 -2 0 5 10 18 23 28 13 10
22 24 20 30 -3 7 5 18 16 25 14 8 21 23 21 42 0 26 -1 28 -13 13 -8 -12 -22
-16 -42 -14 -46 6 -64 17 -111 64 -24 23 -53 43 -64 43 -23 0 -24 10 -6 60
l13 35 119 6 c65 3 343 6 616 5 l497 -1 22 -24z m-572 -164 c11 -14 6 -27 -10
-27 -5 0 -13 9 -19 20 -8 16 -8 20 3 20 8 0 20 -6 26 -13z m-185 -38 c-3 -5
-10 -7 -15 -3 -5 3 -7 10 -3 15 3 5 10 7 15 3 5 -3 7 -10 3 -15z m337 -12
c-13 -13 -26 -3 -16 12 3 6 11 8 17 5 6 -4 6 -10 -1 -17z m-361 -35 c0 -14
-13 -9 -42 16 -28 24 -21 33 12 14 16 -9 30 -23 30 -30z m-1340 8 c-24 -15
-36 -11 -14 4 10 8 21 12 24 10 2 -3 -2 -9 -10 -14z m-40 -22 c0 -6 -6 -5 -15
2 -8 7 -15 14 -15 16 0 2 7 1 15 -2 8 -4 15 -11 15 -16z m79 -3 c-9 -9 -23
-13 -32 -9 -28 10 -19 24 15 24 29 0 31 -2 17 -15z m107 -18 c9 15 16 16 50 5
21 -6 49 -14 62 -17 12 -4 22 -11 22 -16 0 -5 5 -9 12 -9 6 0 22 -9 34 -21 12
-11 35 -21 52 -21 17 -1 33 -7 36 -15 3 -7 19 -13 35 -13 23 0 34 -7 44 -27 8
-16 12 -34 10 -40 -3 -7 0 -13 5 -13 6 0 17 -6 24 -13 7 -7 39 -23 71 -36 41
-17 57 -29 57 -42 0 -16 -6 -18 -42 -15 -25 2 -46 -1 -50 -8 -5 -7 -8 -4 -8 8
0 18 -1 18 -20 1 -15 -14 -17 -21 -9 -32 8 -9 15 -10 24 -3 8 7 15 3 23 -14 8
-18 8 -25 -1 -29 -26 -10 -95 1 -137 22 -63 30 -97 51 -85 51 6 0 3 5 -5 10
-8 5 -15 13 -15 17 0 4 -6 22 -14 40 -9 21 -18 30 -28 26 -8 -3 -11 -9 -6 -12
12 -9 14 -31 2 -31 -6 0 -18 -8 -27 -17 -16 -16 -17 -15 -20 0 -2 10 -8 15
-13 12 -5 -4 -9 -2 -9 3 0 5 -11 7 -24 5 -32 -6 -42 -48 -12 -51 11 0 26 4 33
10 10 8 12 7 8 -4 -4 -11 2 -18 21 -22 24 -6 25 -9 11 -24 -9 -11 -12 -24 -7
-37 12 -31 1 -37 -30 -19 -28 17 -28 17 -7 34 16 13 17 19 7 25 -9 5 -11 4 -6
-3 4 -7 1 -12 -8 -12 -8 0 -20 10 -27 21 -9 17 -13 19 -20 8 -5 -8 -4 -18 1
-23 6 -6 10 -14 10 -18 0 -13 -28 -9 -37 5 -8 13 -63 42 -75 39 -4 -1 -5 5 -2
13 4 8 1 15 -6 15 -6 0 -9 4 -6 9 4 5 -3 7 -14 4 -29 -8 -32 -17 -14 -53 15
-28 15 -34 1 -47 -10 -10 -17 -11 -21 -4 -4 6 0 11 9 11 12 0 15 5 9 23 -9 28
-39 68 -48 62 -3 -3 -4 -2 -2 1 2 3 7 5 10 5 4 -1 18 11 31 25 14 15 25 22 25
17 0 -8 13 -17 63 -41 4 -2 7 5 8 15 0 10 3 13 6 6 3 -10 10 -10 25 -2 19 10
19 11 1 24 -10 8 -26 15 -35 15 -22 0 -29 12 -18 30 7 12 12 12 28 -3 10 -9
24 -17 31 -17 6 0 14 -7 17 -15 6 -14 8 -13 19 2 15 20 10 37 -7 27 -7 -4 -8
-2 -4 4 4 8 -3 16 -18 22 -14 5 -26 16 -26 24 0 21 46 13 74 -13 24 -23 50
-28 43 -8 -2 6 -9 11 -15 10 -6 -2 -9 6 -7 16 3 15 -1 19 -15 16 -20 -4 -37
25 -20 35 6 4 -5 11 -24 17 -31 10 -36 8 -55 -15 -12 -15 -21 -21 -21 -16 0 6
-11 22 -25 36 l-24 24 28 -4 c38 -5 45 10 21 41 -19 24 -19 26 -3 30 10 2 27
-6 38 -19 19 -22 21 -22 31 -7z m1544 18 c29 -17 41 -19 38 -6 -3 9 2 11 25
11 6 0 4 -5 -5 -11 -10 -5 -18 -17 -18 -24 0 -8 -5 -15 -11 -15 -5 0 -8 -3 -6
-8 3 -4 -8 -7 -24 -7 -32 -1 -36 6 -14 25 21 17 19 30 -5 30 -14 0 -25 -11
-34 -31 -7 -18 -15 -26 -18 -19 -3 10 -9 10 -27 1 -12 -7 -30 -10 -39 -8 -12
3 -11 5 6 6 17 1 22 7 22 30 0 16 6 32 13 34 24 10 72 6 97 -8z m-2066 -86
c-3 -5 -11 -9 -17 -8 -8 0 -8 2 1 6 10 4 10 8 0 21 -12 15 -11 16 4 3 10 -7
15 -17 12 -22z m2446 27 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10
11 6 0 10 -2 10 -4z m70 -21 c0 -8 -2 -15 -4 -15 -2 0 -6 7 -10 15 -3 8 -1 15
4 15 6 0 10 -7 10 -15z m-50 1 c0 -2 -7 -7 -16 -10 -8 -3 -12 -2 -9 4 6 10 25
14 25 6z m-538 -41 c0 -5 -5 -11 -11 -13 -6 -2 -11 4 -11 13 0 9 5 15 11 13 6
-2 11 -8 11 -13z m-1505 -21 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17 -2
13 -5z m1963 2 c0 -3 -4 -8 -10 -11 -5 -3 -10 -1 -10 4 0 6 5 11 10 11 6 0 10
-2 10 -4z m-2399 -23 c13 -16 12 -17 -3 -4 -10 7 -18 15 -18 17 0 8 8 3 21
-13z m202 -3 c3 -11 1 -18 -4 -14 -5 3 -9 12 -9 20 0 20 7 17 13 -6z m252 -4
c0 -23 -1 -24 -18 -8 -18 16 -18 17 0 23 10 4 18 8 18 8 0 1 0 -10 0 -23z
m-281 -22 c3 -8 13 -11 23 -8 15 5 16 4 3 -5 -12 -9 -11 -11 8 -11 14 0 21 -4
17 -11 -4 -6 -14 -8 -23 -4 -8 3 -19 0 -23 -7 -7 -10 -11 -10 -21 1 -8 9 -9
11 -1 7 6 -3 14 -2 18 4 3 6 -2 14 -12 18 -10 4 -19 12 -20 18 -3 15 25 13 31
-2z m153 -10 c-9 -9 -28 6 -21 18 4 6 10 6 17 -1 6 -6 8 -13 4 -17z m78 -4
c12 -23 13 -30 2 -30 -7 0 -18 14 -24 30 -6 17 -7 30 -2 30 4 0 15 -13 24 -30z
m835 -36 c0 -32 76 -47 93 -18 5 10 21 12 55 8 26 -4 55 -7 65 -7 9 -1 17 -5
17 -10 0 -4 5 -5 10 -2 6 3 10 -1 10 -9 0 -9 7 -16 15 -16 8 0 15 -6 16 -12 0
-10 2 -10 6 0 2 6 14 12 25 12 33 0 14 -25 -21 -28 -19 -2 -43 -14 -56 -28
-13 -14 -26 -21 -29 -16 -8 13 -56 21 -56 10 0 -5 -5 -6 -10 -3 -15 9 -51 -5
-44 -17 4 -7 2 -8 -5 -4 -6 4 -9 16 -6 27 4 10 2 19 -4 19 -6 0 -8 6 -5 13 3
8 -13 19 -43 30 -53 19 -67 21 -59 9 2 -4 -7 -8 -22 -7 -35 0 -42 32 -12 55
25 19 60 15 60 -6z m-927 -55 c4 1 7 -1 7 -4 0 -3 0 -9 0 -14 0 -6 -9 -9 -19
-8 -11 0 -17 5 -14 10 3 5 0 13 -7 17 -10 6 -10 11 1 23 12 13 15 13 19 -5 3
-10 8 -19 13 -19z m725 -47 c15 -10 39 -24 54 -31 15 -8 25 -18 21 -24 -3 -5
-9 -4 -13 3 -4 7 -12 10 -16 7 -14 -8 -56 12 -49 23 3 5 0 7 -8 4 -9 -3 -16 3
-20 15 -6 26 -2 26 31 3z m-313 -13 c-5 -6 -55 0 -55 7 0 3 13 3 29 2 16 -1
28 -5 26 -9z m1520 2 c3 -5 1 -12 -4 -15 -5 -4 -12 0 -14 6 -3 8 -6 6 -6 -4
-1 -10 -5 -18 -11 -18 -12 0 -9 22 5 32 14 10 23 10 30 -1z m-1885 -18 c7 7
10 7 7 1 -3 -6 1 -20 9 -32 13 -19 18 -20 37 -10 20 10 21 10 8 -5 -7 -10 -10
-17 -6 -17 5 0 6 -3 3 -6 -3 -3 -28 11 -55 31 -58 45 -64 51 -37 37 15 -8 24
-8 34 1z m360 -18 c0 -23 -16 -26 -34 -6 -13 15 -14 20 -4 23 19 7 38 -2 38
-17z m89 -8 c8 -11 6 -13 -11 -12 -12 1 -24 7 -26 13 -5 16 23 15 37 -1z m285
-15 c3 -5 -1 -9 -9 -9 -8 0 -15 4 -15 9 0 4 4 8 9 8 6 0 12 -4 15 -8z m-304
-36 c0 -2 -9 -6 -20 -9 -11 -3 -20 -1 -20 4 0 5 9 9 20 9 11 0 20 -2 20 -4z
m-445 -46 c3 -5 1 -10 -4 -10 -6 0 -11 5 -11 10 0 6 2 10 4 10 3 0 8 -4 11
-10z m970 -10 c5 -8 12 -7 23 2 12 10 14 10 8 1 -4 -7 -2 -13 3 -13 6 0 11 5
11 10 0 6 7 10 15 10 8 0 15 -4 15 -9 0 -10 -24 -21 -49 -21 -19 0 -63 29 -44
30 6 0 15 -5 18 -10z m695 -27 c0 -8 12 -13 28 -13 32 0 41 -30 14 -52 -13
-11 -14 -11 -7 1 5 10 4 12 -3 7 -7 -4 -12 -14 -12 -22 0 -13 -15 -18 -48 -17
-9 1 -10 -2 -2 -12 9 -11 5 -15 -22 -20 -76 -14 -93 -11 -96 13 -3 20 -7 22
-35 17 -26 -6 -30 -5 -19 6 19 21 15 24 -32 24 -24 0 -48 3 -52 8 -15 15 12
25 51 18 29 -5 51 -2 80 11 22 10 53 18 68 18 16 0 26 4 23 9 -7 11 11 19 41
17 13 -1 23 -7 23 -13z m258 -11 c-10 -2 -18 -8 -18 -13 0 -6 -5 -7 -10 -4
-17 11 9 35 28 27 16 -6 16 -7 0 -10z m-903 -2 c3 -5 1 -10 -4 -10 -6 0 -11 5
-11 10 0 6 2 10 4 10 3 0 8 -4 11 -10z m789 -12 c-3 -4 -11 -5 -19 -1 -21 7
-19 12 4 10 11 0 18 -5 15 -9z m1 -28 c-3 -5 -12 -10 -18 -10 -7 0 -6 4 3 10
19 12 23 12 15 0z m-29 -46 c-11 -8 -29 -14 -40 -13 -14 1 -10 4 12 10 17 5
32 15 32 21 0 6 3 8 7 4 5 -4 -1 -14 -11 -22z m-56 10 c0 -8 -19 -13 -24 -6
-3 5 1 9 9 9 8 0 15 -2 15 -3z m150 -23 c0 -6 -4 -13 -10 -16 -5 -3 -10 1 -10
9 0 9 5 16 10 16 6 0 10 -4 10 -9z m-675 -21 c3 -6 -1 -7 -9 -4 -18 7 -21 14
-7 14 6 0 13 -4 16 -10z m642 -6 c-3 -3 -12 -4 -19 -1 -8 3 -5 6 6 6 11 1 17
-2 13 -5z m-777 -8 c0 -7 -40 -14 -44 -7 -3 4 6 8 20 9 13 1 24 0 24 -2z m665
-14 c3 -8 1 -20 -5 -27 -8 -9 -8 -15 0 -20 5 -3 10 -11 10 -16 0 -6 -4 -8 -9
-5 -4 3 -26 -3 -47 -13 -38 -19 -82 -18 -52 0 7 5 10 9 6 9 -15 0 32 40 48 40
9 0 14 8 13 18 -2 25 0 29 16 29 8 0 17 -7 20 -15z m60 8 c4 -6 1 -9 -7 -8 -7
2 -12 -3 -10 -9 1 -7 -5 -13 -13 -13 -9 0 -12 -6 -9 -17 5 -15 4 -16 -5 -3 -7
11 -5 20 11 37 25 26 25 26 33 13z m-463 -30 c-2 -8 3 -10 13 -7 9 4 15 1 15
-7 0 -12 -7 -12 -36 -3 -30 9 -33 12 -18 18 17 7 16 8 -3 8 -13 1 -23 5 -23
10 0 5 12 6 28 2 15 -5 26 -14 24 -21z m214 -15 c-3 -8 -1 -15 4 -15 6 0 10 5
10 12 0 6 3 9 6 5 4 -3 4 -13 1 -21 -5 -13 -10 -13 -37 0 -32 17 -32 34 2 34
14 0 18 -5 14 -15z m-191 -65 c4 -13 15 -20 31 -20 15 0 23 4 19 11 -4 6 -14
8 -22 5 -8 -3 -12 -2 -8 3 3 5 -1 12 -7 14 -8 4 -9 6 -2 6 7 1 22 -8 35 -18
22 -18 22 -20 6 -26 -27 -11 -64 3 -70 25 -7 26 10 26 18 0z m245 0 c-6 -11
-15 -18 -21 -15 -15 10 -11 23 9 28 9 3 18 5 20 6 1 0 -2 -8 -8 -19z m-328 3
c-10 -4 -10 -8 0 -21 12 -15 11 -16 -4 -3 -19 14 -15 32 5 30 8 0 8 -2 -1 -6z
m48 -3 c8 -5 11 -10 5 -10 -5 0 -17 5 -25 10 -8 5 -10 10 -5 10 6 0 17 -5 25
-10z m215 -29 c9 -15 -51 -52 -71 -44 -11 4 -15 3 -11 -4 13 -21 -22 -22 -45
-2 -17 15 -18 19 -6 15 10 -3 20 0 24 6 4 6 21 8 42 5 32 -6 33 -5 16 8 -11 8
-14 15 -8 15 5 0 15 -5 21 -11 6 -6 17 -8 24 -3 9 5 8 9 -7 15 -16 6 -16 8 -2
8 9 1 19 -3 23 -8z m-142 -58 c16 -8 27 -16 25 -18 -1 -2 -24 -5 -50 -7 -47
-5 -48 -4 -48 24 0 26 3 29 23 22 12 -3 35 -13 50 -21z m-115 -3 c30 -14 48
-38 18 -27 -7 3 -22 0 -32 -7 -11 -7 -37 -16 -59 -19 -29 -5 -34 -4 -18 3 21
9 24 24 10 47 -5 7 -1 9 13 6 12 -3 20 0 20 7 0 6 3 10 8 8 4 -3 22 -11 40
-18z m271 8 c-4 -33 2 -35 79 -31 56 3 88 0 116 -12 l38 -16 -38 -20 c-21 -10
-44 -19 -51 -19 -7 0 -17 -9 -23 -20 -12 -23 -32 -17 -28 8 2 13 -9 19 -47 25
-45 8 -52 13 -61 41 -7 22 -6 36 1 44 13 15 16 15 14 0z m-29 -48 c0 -6 -7
-13 -15 -16 -20 -8 -48 3 -40 16 8 13 55 13 55 0z"/>
<path d="M1896 5743 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z"/>
<path d="M2497 3556 c-4 -60 -7 -340 -7 -623 l0 -513 260 0 c201 0 260 3 260
13 0 6 16 32 35 56 19 24 35 47 35 52 0 4 25 44 55 88 30 44 55 84 55 88 0 5
11 20 24 35 14 14 22 29 19 32 -4 3 -1 6 6 6 11 0 28 32 29 55 1 6 11 13 24
17 13 3 -66 6 -174 7 l-198 1 0 183 c0 257 -11 517 -22 511 -10 -6 -77 4 -241
38 -109 22 -129 26 -139 27 -3 1 -8 9 -10 19 -2 9 -7 -32 -11 -92z"/>
<path d="M5055 2843 c9 -89 42 -225 66 -279 11 -22 19 -45 19 -51 0 -6 17 -30
38 -52 l37 -42 323 3 323 3 -80 133 c-44 73 -106 172 -138 220 l-59 87 -266 3
-266 2 3 -27z"/>
<path d="M6290 4781 c0 -7 -5 -9 -12 -5 -7 5 -8 3 -3 -5 5 -9 10 -10 18 -2 6
6 8 14 4 18 -4 3 -7 1 -7 -6z"/>
<path d="M6236 4733 c-6 -14 -5 -15 5 -6 7 7 10 15 7 18 -3 3 -9 -2 -12 -12z"/>
<path d="M6070 4683 c0 -5 7 -18 15 -29 15 -18 15 -18 13 5 -3 23 -28 44 -28
24z"/>
<path d="M6254 4678 c-5 -7 -9 -32 -10 -56 l-1 -43 22 21 c14 13 21 30 19 47
-3 33 -19 49 -30 31z"/>
<path d="M6245 4230 c-3 -5 1 -10 10 -10 9 0 13 5 10 10 -3 6 -8 10 -10 10 -2
0 -7 -4 -10 -10z"/>
<path d="M6325 4180 c3 -5 10 -10 16 -10 5 0 9 5 9 10 0 6 -7 10 -16 10 -8 0
-12 -4 -9 -10z"/>
<path d="M3800 2261 c0 -20 13 -41 25 -41 12 0 25 21 25 41 0 5 -11 9 -25 9
-14 0 -25 -4 -25 -9z"/>
<path d="M4836 2251 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z"/>
<path d="M3645 2239 c-4 -6 -4 -13 -1 -16 3 -4 6 -1 6 6 0 7 5 9 12 5 7 -4 8
-3 4 4 -9 15 -13 15 -21 1z"/>
<path d="M3880 2206 c0 -2 7 -7 16 -10 8 -3 12 -2 9 4 -6 10 -25 14 -25 6z"/>
<path d="M4680 2079 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
-5 -10 -11z"/>
<path d="M3930 2055 c0 -14 8 -29 20 -35 38 -21 55 13 22 43 -26 24 -42 21
-42 -8z"/>
<path d="M4650 2070 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0
-10 -4 -10 -10z"/>
<path d="M3865 2030 c-3 -6 1 -13 10 -16 19 -8 30 0 20 15 -8 14 -22 14 -30 1z"/>
<path d="M4566 1911 c-4 -5 -2 -12 3 -15 5 -4 12 -2 15 3 4 5 2 12 -3 15 -5 4
-12 2 -15 -3z"/>
<path d="M4485 1820 c-14 -15 -15 -20 -4 -20 25 0 45 18 33 30 -7 7 -16 5 -29
-10z"/>
<path d="M4690 1789 c0 -11 4 -18 10 -14 5 3 7 12 3 20 -7 21 -13 19 -13 -6z"/>
<path d="M4476 1724 c-4 -9 -4 -19 -1 -22 2 -3 7 3 11 12 4 9 4 19 1 22 -2 3
-7 -3 -11 -12z"/>
<path d="M4424 1681 c4 -5 0 -12 -6 -14 -8 -4 -9 -6 -2 -6 6 -1 17 6 24 14 10
12 9 15 -4 15 -10 0 -15 -4 -12 -9z"/>
<path d="M4375 1620 c-7 -12 2 -30 16 -30 5 0 9 9 9 20 0 21 -15 27 -25 10z"/>
<path d="M4480 1589 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
-5 -10 -11z"/>
<path d="M4146 1581 c-3 -5 1 -11 9 -15 15 -6 29 7 18 18 -9 9 -21 8 -27 -3z"/>
<path d="M2845 2000 c-3 -5 -1 -10 4 -10 6 0 11 5 11 10 0 6 -2 10 -4 10 -3 0
-8 -4 -11 -10z"/>
<path d="M2948 1973 c-20 -5 -24 -18 -9 -28 6 -3 15 4 21 15 6 11 9 19 8 19
-2 -1 -11 -3 -20 -6z"/>
<path d="M3000 1962 c0 -5 7 -16 16 -23 14 -12 16 -11 13 5 -4 20 -29 35 -29
18z"/>
<path d="M3009 1877 c13 -13 50 -16 57 -5 4 7 2 8 -4 4 -7 -4 -12 -3 -12 2 0
6 -11 9 -24 8 -14 0 -22 -4 -17 -9z"/>
<path d="M3100 1789 c0 -5 -4 -7 -10 -4 -5 3 -10 4 -10 2 0 -3 16 -14 35 -26
25 -15 36 -17 41 -8 4 7 4 9 -1 5 -4 -4 -14 0 -21 10 -9 13 -9 19 -1 24 7 5 3
8 -10 8 -13 0 -23 -5 -23 -11z"/>
<path d="M3245 1740 c-7 -11 22 -26 32 -16 4 3 -1 6 -11 6 -9 0 -14 5 -11 10
3 6 4 10 1 10 -3 0 -8 -5 -11 -10z"/>
<path d="M3188 1708 c5 -5 16 -8 23 -6 8 3 3 7 -10 11 -17 4 -21 3 -13 -5z"/>
<path d="M4440 1959 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10
-5 -10 -11z"/>
<path d="M3065 1610 c3 -5 8 -10 11 -10 2 0 4 5 4 10 0 6 -5 10 -11 10 -5 0
-7 -4 -4 -10z"/>
<path d="M4305 1450 c-28 -7 -28 -8 -5 -9 14 0 32 4 40 9 17 11 8 11 -35 0z"/>
<path d="M4326 1427 c-15 -11 -16 -15 -4 -25 11 -9 19 -8 36 4 12 8 22 19 22
25 0 13 -33 11 -54 -4z"/>
<path d="M3953 1124 c4 -4 -3 -14 -15 -21 -24 -13 -9 -16 30 -5 l22 7 -22 14
c-13 7 -19 10 -15 5z"/>
<path d="M4388 1063 c6 -2 18 -2 25 0 6 3 1 5 -13 5 -14 0 -19 -2 -12 -5z"/>
<path d="M5680 7086 c0 -3 9 -10 20 -16 11 -6 20 -8 20 -6 0 3 -9 10 -20 16
-11 6 -20 8 -20 6z"/>
<path d="M1310 3031 c0 -6 4 -13 10 -16 6 -3 7 1 4 9 -7 18 -14 21 -14 7z"/>
<path d="M1307 2955 c8 -39 10 -41 15 -11 3 14 2 23 -3 21 -4 -3 -10 1 -13 7
-3 7 -3 0 1 -17z"/>
<path d="M1522 2470 c0 -14 2 -19 5 -12 2 6 2 18 0 25 -3 6 -5 1 -5 -13z"/>
<path d="M2576 1573 c-13 -13 -5 -23 17 -23 18 0 19 -2 7 -11 -12 -9 -12 -10
-1 -7 8 3 16 9 18 14 4 11 -32 35 -41 27z"/>
<path d="M2626 1543 c-11 -11 -6 -23 9 -23 8 0 15 4 15 9 0 13 -16 22 -24 14z"/>
<path d="M3668 1198 c5 -5 16 -8 23 -6 8 3 3 7 -10 11 -17 4 -21 3 -13 -5z"/>
<path d="M3648 1103 c12 -2 20 -9 17 -14 -3 -5 1 -6 10 -2 13 5 14 7 3 14 -7
5 -22 8 -33 7 -17 -1 -17 -1 3 -5z"/>
<path d="M5149 1050 c-13 -10 -20 -19 -16 -20 4 0 17 9 29 20 28 26 17 26 -13
0z"/>
<path d="M4980 988 c0 -10 19 -9 45 2 16 7 14 8 -12 7 -18 -1 -33 -5 -33 -9z"/>
</g>
</svg>
````

## File: blog/public/site.webmanifest
````
{
    "name": "",
    "short_name": "",
    "icons": [
        {
            "src": "/android-chrome-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "/android-chrome-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ],
    "theme_color": "#ffffff",
    "background_color": "#ffffff",
    "display": "standalone"
}
````

## File: blog/src/components/common/Button.astro
````
---
const { class: className, ...props } = Astro.props;
---

<button
  class={`
    w-28 
    relative overflow-hidden
    px-6 py-2
    bg-gradient-to-r from-blue-600 to-blue-800
    text-white font-semibold
    rounded-md
    transition-all duration-500
    hover:bg-blue-700
    focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-opacity-50    
    group
    ${className}
  `}
  {...props}
>
  <span class="relative z-10">
    <slot />
  </span>
  <span
    class="absolute inset-0 bg-gradient-to-r from-blue-400 to-blue-500 opacity-0 transition-opacity duration-300 blur-[2px]"
  ></span>
  <span
    class="absolute top-0 left-0 w-full h-1 bg-blue-400 transform origin-left scale-x-0 transition-transform duration-300 group-hover:scale-x-100 blur-[2px]"
  ></span>
  <span
    class="absolute bottom-0 right-0 w-full h-1 bg-blue-400 transform origin-right scale-x-0 transition-transform duration-300 group-hover:scale-x-100 blur-[2px]"
  ></span>
</button>
````

## File: blog/src/components/Footer/Footer.astro
````
---
const today = new Date();
---

<footer class="text-center mt-4 py-4">
  <span class="mt-2 md:mt-0 text-lg"
    >&copy; {today.getFullYear()} Earth Doom</span
  >
</footer>

<style>
  footer {
    color: #fff;
    padding: 10px;
  }
</style>
````

## File: blog/src/components/Header/BaseHead.astro
````
---
import "../../styles/global.css";

export interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/placeholder-social.jpg" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
<meta name="msapplication-TileColor" content="#da532c" />
<meta name="theme-color" content="#ffffff" />

<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />
````

## File: blog/src/components/Header/Header.astro
````
---
import HeaderLink from "./HeaderLink.astro";
---

<header class="container">
  <nav class="flex justify-between items-center pt-4">
    <div class="mx-auto md:mx-0">
      <img
        class="h-16 w-16"
        src="/images/logo.png"
        alt="Earthdoom logo"
        width="90"
      />
    </div>
    <div class="hidden sm:block">
      <HeaderLink
        class="text-white text-md uppercase mx-4 font-bold relative after:absolute after:bottom-[-0.45rem] after:left-0 after:w-full after:h-1 after:bg-white after:origin-left after:scale-x-0 after:transition-transform after:duration-300 hover:after:scale-x-100"
        activeClass="after:scale-x-100"
        href="/"
      >
        Home
      </HeaderLink>
      <HeaderLink
        class="text-white text-md uppercase mx-4 font-bold relative after:absolute after:bottom-[-0.45rem] after:left-0 after:w-full after:h-1 after:bg-white after:origin-left after:scale-x-0 after:transition-transform after:duration-300 hover:after:scale-x-100"
        activeClass="after:scale-x-100"
        href="/manual"
      >
        Manual
      </HeaderLink>
    </div>
  </nav>
  <!-- This is the mobile menu -->
  <div class="sm:hidden">
    <div class="flex justify-center items-center py-4 px-6">
      <HeaderLink
        class="text-white block text-sm uppercase px-4 font-bold relative after:absolute after:bottom-[-0.45rem] after:left-0 after:w-full after:h-1 after:bg-white after:origin-left after:scale-x-0 after:transition-transform after:duration-300 hover:after:scale-x-100"
        activeClass="after:scale-x-100"
        href="/"
      >
        Home
      </HeaderLink>
      <HeaderLink
        class="text-white block text-sm uppercase px-4 font-bold relative after:absolute after:bottom-[-0.45rem] after:left-0 after:w-full after:h-1 after:bg-white after:origin-left after:scale-x-0 after:transition-transform after:duration-300 hover:after:scale-x-100"
        activeClass="after:scale-x-100"
        href="/manual"
      >
        Manual
      </HeaderLink>
    </div>
  </div>
</header>

<style>
  header {
    margin: 0em 0 2em;
  }
  h2 {
    margin: 0.5em 0;
  }
</style>
````

## File: blog/src/components/Header/HeaderLink.astro
````
---
import type { HTMLAttributes } from 'astro/types';

export interface Props extends HTMLAttributes<'a'> {
  activeClass?: string;
}

const { href, class: className, activeClass, ...props } = Astro.props;

const { pathname } = Astro.url;
const isActive = href === pathname || href === pathname.replace(/\/$/, "");

const computedClass = [
  className,
  isActive ? activeClass : ''
].filter(Boolean).join(" ");
---

<a href={href} class={computedClass} {...props}>
  <slot />
</a>
````

## File: blog/src/components/Index/CallToAction.astro
````
---
import Button from "../common/Button.astro";
---

<div class="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
  <a href="https://game.earthdoom.com/login" class="w-full sm:w-auto">
    <Button>Play</Button>
  </a>
  <a href="/manual" class="w-full sm:w-auto">
    <Button>Manual</Button>
  </a>
</div>
````

## File: blog/src/components/Index/Hero.astro
````
---
import CallToAction from "./CallToAction.astro";
---

<main class="w-full relative">
  <div
    class="h-[25rem] md:h-[30rem] bg-cool-space-ship bg-cover bg-center flex items-center justify-center"
  >
    <div class="absolute inset-0 bg-black bg-opacity-60"></div>
    <div class="relative z-10 text-center px-4 max-w-5xl mx-auto">
      <div class="container">
        <h1 class="text-4xl md:text-6xl font-bold mb-6 typed-out">
          Earth Doom
        </h1>
      </div>
      <p class="text-xl md:text-2xl mb-4 fade-in-top-second text-left md:text-center">
        Explore the world like never before and conquer your enemies!
      </p>
      <p class="text-sm md:text-base mb-8 fade-in-top-third text-left md:text-center">
        I am manually running the game ticker when I am developing and testing
        the game. Please be patient.
      </p>
      <CallToAction />
    </div>
  </div>
</main>

<style>
  .container {
    display: flex;
    justify-content: center;
  }

  .typed-out {
    overflow: hidden;
    white-space: nowrap;
    margin: 0 auto;
    letter-spacing: 0.05em;
    padding: 10px;
    animation:
      typing 2s steps(20, end),
      blink-caret 0.75s step-end 8,
      remove-caret 0s 1.2s forwards;
    border-right: 0.15em solid #fff;
  }

  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  @keyframes blink-caret {
    from,
    to {
      border-color: transparent;
    }
    50% {
      border-color: #fff;
    }
  }

  @keyframes remove-caret {
    to {
      border-right: none;
    }
  }

  .fade-in-top-second {
    opacity: 0;
    transform: translateY(-20px);
    animation: fadeInTop 0.7s ease-in-out forwards;
    animation-delay: 2s; /* Delay until after typing animation */
  }

  .fade-in-top-third {
    opacity: 0;
    transform: translateY(-20px);
    animation: fadeInTop 0.7s ease-in-out forwards;
    animation-delay: 2.7s; /* Delay until after second paragraph fades in */
  }

  @keyframes fadeInTop {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
````

## File: blog/src/components/Index/Intro.astro
````
---
const features = [
  {
    title: "Strategic Gameplay",
    description: "Build your empire, manage resources, and conquer enemies.",
  },
  {
    title: "Advanced Technology",
    description: "Research and unlock powerful technologies to gain an edge.",
  },
  {
    title: "Dynamic Alliances",
    description: "Form alliances and engage in diplomatic warfare.",
  },
  {
    title: "Turn-based Battles",
    description: "Command your forces in intense turn-based combat scenarios.",
  },
];
---

<section class="py-14 max-w-6xl mx-auto">
  <h2 class="text-2xl md:text-3xl font-bold mb-8 text-center">
    What is Earth Doom?
  </h2>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-12">
    {
      features.map((feature) => (
        <div class="relative bg-neutral-800 p-6 rounded-lg shadow-lg overflow-hidden group">
          <div class="absolute inset-0 bg-gradient-to-r from-sky-700 to-sky-900 opacity-0 transition-opacity duration-500 ease-in-out group-hover:opacity-100 blur-sm" />
          <div class="relative z-10">
            <h3 class="text-xl font-semibold mb-2">{feature.title}</h3>
            <p>{feature.description}</p>
          </div>
        </div>
      ))
    }
  </div>
  <p class="mb-6">
    Earth Doom is an epic war game that plunges you into a relentless fight for
    survival and dominance. As a leader of your own burgeoning nation, you must
    carefully build up your forces, gain critical resources, research powerful
    technologies, and conquer enemy lands - all while defending against those
    who would conquer you.
  </p>
  <p class="mb-6">
    The key to victory lies in properly balancing and adeptly managing the
    growth of your empire. Each decision you make can have significant
    consequences on your nation's future. One wrong move could leave your lands
    vulnerable or your armies outmatched.
  </p>
  <p>
    Only the shrewdest and most tactical players will emerge victorious in this
    competitive real-time strategy arena. Do you have what it takes to dominate
    the world of Earth Doom?
  </p>
</section>
````

## File: blog/src/components/Manual/ManualContent.astro
````
---
import { MANUAL_SECTIONS } from "./ManualSections";
---

<section class="py-4 max-w-6xl mx-auto">
  <h2 class="text-3xl font-bold mb-8 text-center">Earth Doom Manual</h2>
  { MANUAL_SECTIONS.map((section) => (
      <div class="mb-12 bg-neutral-800 p-6 rounded-lg shadow-lg">
        <h3 class="text-xl font-semibold mb-4 text-center">{section.title}</h3>
        <div set:html={section.content} />
      </div>
    ))
  }
</section>
````

## File: blog/src/components/Manual/ManualSections.js
````javascript
export const MANUAL_SECTIONS = [
  {
    title: "Gameplay Overview",
    content: `
        <p>The game is actually quite simple. It's all about building troops and taking over land. The game is tick based, that is, every sixty seconds or so, when a "tick" happens, resources are distributed. The amount of resource you receive depends on the land you control (more on that later on). Also, you can produce units and buildings and research sciences for a certain amount of resources. These things take a certain amount of ticks (displayed in the ETA column of the units/science/building screens) to produce. Once you have ordered the research of a science or the production of a unit or building its ETA will decrease with each tick. When it reaches 0, the production is complete and you will be able to produce more of the same unit type (if you've just built a building or researched a science, you won't be able to do it again, but you don't need to do so anyway).</p>
        <p>The amount of seconds passed since the last tick are shown on the top right. If it becomes any larger than 300 seconds it is likely that the ticks are currently deactivated for some reason and you will not be able to do anything for the next couple of hours (sometimes it's just server lag, but 300 is a safe bet).</p>
      `,
  },
  {
    title: "Getting Started",
    content: `
        <p>In the beginning you can't do much. First thing to do is to get credits, which is the currency used by your citizens and in building troops.</p>
        <p>In order to get any credits, you need to construct the building "Tax collectors", which is free and takes 10 ticks to build. Just click on the symbol with the crossed wrenches in the column labelled "Build:". Then go and get yourself a drink or something and come back in about ten minutes. Just select "Building" from the navigation again and you should see the current ETA and status.</p>
        <p>If the construction is complete already, you are receiving a small amount of credits with each tick now. To increase it you need to research the science "Improved tax revenue" which costs 1000 credits and takes 25 ticks to complete. If you don't have 1000 credits, just wait a little.</p>
      `,
  },
  {
    title: "Titanium Extraction",
    content: `
        <p>The next thing to build is the "Titanium extractor" with an ETA of 20 ticks and a cost of 500 credits. It allows you to receive an amount of titanium every tick and produce titanium mines later on. Titanium is the most important resource because most heavy units need it and they need lots of it. Once you have constructed it, you should research the "advanced titanium extractor" for which you need to accumulate 1000 titanium and which takes 25 ticks to research.</p>
      `,
  },
  {
    title: "Scouts and Spying",
    content: `
        <p>You may want to increase the amount of resources you get now, just go to the section "Spying" (fourth option from the bottom in the navigation):</p>
        <p>You are able to send out scouts, each scout costs you 500 credits and the more scouts you send out, the more land they might find. Note however that they will have a harder time finding more land the more land you have already, so eventually scouting might turn out to become inefficient, but we shouldn't worry about that yet. It is recommended to send out as many scouts as possible in the beginning. If you only send out a few, they might find 0 land, which is quite a waste of credits.</p>
        <p>The land by itself increases your desirability as a target for stronger players, but doesn't do much else right now because it's undeveloped. In order to let it increase the amount of titanium and credits it produce (or make it produce any in the first place), you need to develop it first, which costs titanium. Go to the "income" screen to take a look at your stats now.</p>
      `,
  },
  {
    title: "Land Development",
    content: `
        <p>The top three bars show the amount of land you have developed and how you developed it. Houses produce credits, Titanium produces (guess what) titanium. The lower two bars show the amount of resources your nation produces as a whole. The percentages are not very important, but you should try to keep the income at 66% to 75% titanium and 25% to 33% credits if you plan to produce a lot of heavy units. In order to turn your undeveloped land (which should be about 100% now, if you have scouted for land yet -- if not, do so now) into developed land you need to fill out the form below the bars.</p>
        <p>You can chose what kind of land you want to develop and the amount of land you want to develop. The cost above that form will increase the more land you have developed already, so don't be too confused if you try to develop 50 land and it only lets you develop 3 -- maybe you just ran out of titanium, so just wait until you have enough of it to continue. As you develop more land the income bars will increase (or rather, the numbers next to it will) showing the amount of resources you get per tick. It'll always cost more to develop the next land than what you get within a tick, but it's a good idea to develop land for titanium first and then focus on the credits, otherwise you end up having to wait for ages until you are able to develop any land again.</p>
      `,
  },
  {
    title: "Science and Units",
    content: `
        <p>As you research new sciences and build new buildings more sciences and buildings will become available. Construct/research them as you get access to them, you'll need most of them later on.</p>
        <p>Once you have built the barracks, you can produce your first units. Go to the units screen now. Light infantry is a good standard unit, shadows tend to be a great supplement. You'll notice their cost and ETA is very different, but that doesn't mean one is better than the other. Right now the units you can produce are best used in combination, so it's recommended to produce some of both. The maximum amount of units of the type that you can construct right now (based on your available resources) is entered in the input field already, so just click "build" to produce them. You'll need a lot of units in battles, so there isn't really a "too much".</p>
        <p>In order to get any land from your enemy in a war (in EarthDoom most wars are about gaining land), you need to have the Robot Factory built, tho. Once it has been constructed, you can build new units, one of which is the grabber. Its description should be self-explanatory: it grabs the enemy's land and takes it home. Be sure to build masses of them. Goliaths might also come in handy, so build some of them as well, if you have any resources left.</p>
      `,
  },
  {
    title: "Energy and Combat",
    content: `
        <p>In order to fight, you first need energy. For that you first need to research fusion plants. Once that science is researched and ready, go to the "Energy" screen (last option in the upper part of the navigation). Depending on how war hungry you are, you should build many or only a few power plants. Note that they are rather expensive, so better save some titanium for them. Power plants continously produce energy. Energy is being stored and there's no real limit for it, so producing more plants will only increase the energy gained with each tick. If you only plan to attack around once a day, one or two will suffice. Enter the amount you wish to produce into the input box (the maximum possible is entered already) and press build. You can only produce Fusion plants right now, so ignore the drop down box.</p>
        <p>Once you have enough energy you might want to launch your first attack. You can only attack those in your "score" range -- the score is calculated depending on the size of your army and a couple of other things, so it basically reflects your military strength. As these large numbers tend to get irritating, try to focus on your rank. The rank is all that really matters anyway.</p>
      `,
  },
  {
    title: "Finding a Target and Attacking",
    content: `
        <p>To find a good victim in your range, open the "Ranking" screen from the navigation and scroll down until you find your position (you should have a green (ONLINE) appearing next to your name because you're logged in right now -- it's usually better to attack players who are not online, btw). Take a look at the guys around you and chose one you deem fitting, better noone with a clan tag in front of their name because they tend to be a nasty target for a clanless youngster like you. The third column shows the player's ID, it's a number of one to four digits, usually. Remember it or write it down, then switch to the "Military" screen.</p>
        <p>In order to send troops to attack someone, you need to move them from your base to the squad first. For that enter the amount of units of the selected unit type (just select All Units and type a large number and you will transfer all units you can use) and select "Squadron 1" in the "To squad" column and click "Submit Query" or press the Enter key.</p>
        <p>Scroll down a bit as the screen refreshes and you'll be told how much energy it will cost you to send the units which are in your squad to an enemy. Good thing you produced those plants, right? Enter the ID you were told to remember or write down into the input box (the one below "Launch Attack", not "Defend") and click "Attack". Only 30 more ticks and your squadron will reach your victim and attack him for five ticks.</p>
      `,
  },
  {
    title: "Combat Summary",
    content: `
        <p>During the battle, once the troops have arrived, you will be informed of your success or lack thereof in the "News" screen -- where your screen currently reads "Old news" (below the EarthDoom logo and version number), a blue button labelled "News" will appear, click it and you'll see how your war is going. It'll take a little time to understand the combat report, but then it should become quite clear what it's all about.</p>
        <p>If you took away any land from your victim, that land will be added to yours. Undeveloped land needs to be developed, but by now you know how that is to be done.</p>
        <p>The further you advance, the more units will be available and the more dangerous will the fights be. You might lose ten or twenty ranks in a bad battle, but in the end it can be a really fun way to kill some time.</p>
      `,
  },
];
````

## File: blog/src/components/Manual/Stats.astro
````
<section class="px-4 max-w-[95vw] md:max-w-6xl mx-auto">
  <div class="container mx-auto py-2">
    <div class="table-scroll overflow-y-auto">
      <div class="overflow-x-auto">
        <p class="text-md text-center text-white font-semibold mb-6">
          Ships dealing damage (top) Targets (left). Values are the damage dealt
        </p>
        <table class="w-full text-center table-fixed bg-gray-800 mt-6">
          <thead>
            <tr class="h-12">
              <th class="w-[7rem]"></th>
              <th class="w-[7rem]">Infantry</th>
              <th class="w-[7rem]">Shadows</th>
              <th class="w-[7rem]">Goliaths</th>
              <th class="w-[7rem]">Hellspawn</th>
              <th class="w-[7rem]">Ares</th>
              <th class="w-[6rem]">Lucius</th>
              <th class="w-[7rem]">Avengers</th>
              <th class="w-[6rem]">Reaper</th>
            </tr>
          </thead>
          <tbody class="text-white">
            <tr class="h-12">
              <th>Infantry</th>
              <td>0.025</td>
              <td>0.02</td>
              <td>1.6</td>
              <td>0.8</td>
              <td>3.00</td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
            <tr class="bg-gray-700 h-12">
              <th>Shadows</th>
              <td>0.02</td>
              <td>0.105</td>
              <td>1.2</td>
              <td>0.31</td>
              <td>2.35</td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
            <tr class="h-12">
              <th>Goliaths</th>
              <td>0.015</td>
              <td>0.025</td>
              <td>0.05</td>
              <td>0.3</td>
              <td>0.125</td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
            <tr class="bg-gray-700 h-12">
              <th>Grabbers</th>
              <td>0.015</td>
              <td>0.015</td>
              <td>0.055</td>
              <td>0.11</td>
              <td>0.135</td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
            <tr class="h-12">
              <th>Hellspawn</th>
              <td>0.0025</td>
              <td>0.027</td>
              <td>0.025</td>
              <td>0.05</td>
              <td>0.18</td>
              <td>0.08</td>
              <td></td>
              <td></td>
            </tr>
            <tr class="bg-gray-700 h-12">
              <th>Ares</th>
              <td>0.0035</td>
              <td>0.025</td>
              <td>0.025</td>
              <td>0.04</td>
              <td>0.05</td>
              <td>0.1</td>
              <td></td>
              <td></td>
            </tr>
            <tr class="h-12">
              <th>Medusas</th>
              <td>0.02</td>
              <td>0.005</td>
              <td>0.015</td>
              <td>0.25</td>
              <td>1.00</td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
            <tr class="bg-gray-700 h-12">
              <th>Reaper</th>
              <td>0.005</td>
              <td>0.04</td>
              <td>0.1</td>
              <td>0.15</td>
              <td>0.25</td>
              <td></td>
              <td>0.2</td>
              <td></td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</section>
````

## File: blog/src/components/FormattedDate.astro
````
---
const { date } = Astro.props;
---

<time datetime={date.toISOString()}>
  {
    date.toLocaleDateString("en-us", {
      year: "numeric",
      month: "short",
      day: "numeric",
    })
  }
</time>
````

## File: blog/src/content/blog/first-post.md
````markdown
---
title: "First post"
description: "Lorem ipsum dolor sit amet"
pubDate: "Jul 08 2022"
heroImage: "/placeholder-hero.jpg"
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.

Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.

Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.

Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.

Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.
````

## File: blog/src/content/blog/markdown-style-guide.md
````markdown
---
title: "Markdown Style Guide"
description: "Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro."
pubDate: "Jul 01 2022"
heroImage: "/placeholder-hero.jpg"
---

Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.

## Headings

The following HTML `<h1>`—`<h6>` elements represent six levels of section headings. `<h1>` is the highest section level while `<h6>` is the lowest.

# H1

## H2

### H3

#### H4

##### H5

###### H6

## Paragraph

Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.

Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.

## Images

![This is a placeholder image description](/placeholder-social.jpg)

## Blockquotes

The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations.

#### Blockquote without attribution

> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  
> **Note** that you can use _Markdown syntax_ within a blockquote.

#### Blockquote with attribution

> Don't communicate by sharing memory, share memory by communicating.<br>
> — <cite>Rob Pike[^1]</cite>

[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.

## Tables

| Italics   | Bold     | Code   |
| --------- | -------- | ------ |
| _italics_ | **bold** | `code` |

## Code Blocks

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Example HTML5 Document</title>
  </head>
  <body>
    <p>Test</p>
  </body>
</html>
```

## List Types

#### Ordered List

1. First item
2. Second item
3. Third item

#### Unordered List

- List item
- Another item
- And another item

#### Nested list

- Fruit
  - Apple
  - Orange
  - Banana
- Dairy
  - Milk
  - Cheese

## Other Elements — abbr, sub, sup, kbd, mark

<abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.

H<sub>2</sub>O

X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>

Press <kbd><kbd>CTRL</kbd>+<kbd>ALT</kbd>+<kbd>Delete</kbd></kbd> to end the session.

Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.
````

## File: blog/src/content/blog/using-mdx.txt
````
---
title: 'Using MDX'
description: 'Lorem ipsum dolor sit amet'
pubDate: 'Jul 02 2022'
heroImage: '/placeholder-hero.jpg'
---

This theme comes with the [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/) integration installed and configured in your `astro.config.mjs` config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.

## Why MDX?

MDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to [mix JavaScript and UI Components into your Markdown content](https://docs.astro.build/en/guides/markdown-content/#mdx-features) for things like interactive charts or alerts.

If you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.

## Example

Here is how you import and use a UI component inside of MDX.  
When you open this page in the browser, you should see the clickable button below.

import HeaderLink from '../../components/Header/HeaderLink.astro';

<HeaderLink href="#" onclick="alert('clicked!')">
	Embedded component in MDX
</HeaderLink>

## More Links

- [MDX Syntax Documentation](https://mdxjs.com/docs/what-is-mdx)
- [Astro Usage Documentation](https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages)
- **Note:** [Client Directives](https://docs.astro.build/en/reference/directives-reference/#client-directives) are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.
````

## File: blog/src/content/config.ts
````typescript
import { defineCollection, z } from 'astro:content';
const blog = defineCollection({
	// Type-check frontmatter using a schema
	schema: z.object({
		title: z.string(),
		description: z.string(),
		// Transform string to Date object
		pubDate: z
			.string()
			.or(z.date())
			.transform((val) => new Date(val)),
		updatedDate: z
			.string()
			.optional()
			.transform((str) => (str ? new Date(str) : undefined)),
		heroImage: z.string().optional(),
	}),
});
export const collections = { blog };
````

## File: blog/src/layouts/BlogPost.astro
````
---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/Header/BaseHead.astro";
import Header from "../components/Header/Header.astro";
import Footer from "../components/Footer/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      .title {
        font-size: 2em;
        margin: 0.25em 0 0;
      }
      hr {
        border-top: 1px solid #ddd;
        margin: 1rem 0;
      }
      .last-updated-on {
        font-style: italic;
      }
    </style>
  </head>

  <body class="bg-neutral-900">
    <Header />
    <main>
      <article>
        {heroImage && <img width={720} height={360} src={heroImage} alt="" />}
        <h1 class="title">{title}</h1>
        <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <div class="last-updated-on">
              Last updated on <FormattedDate date={updatedDate} />
            </div>
          )
        }
        <hr />
        <slot />
      </article>
    </main>
    <Footer />
  </body>
</html>
````

## File: blog/src/pages/blog/[...slug].astro
````
---
import { CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data}>
  <h1>{post.data.title}</h1>
  <Content />
</BlogPost>
````

## File: blog/src/pages/blog/index.astro
````
---
import BaseHead from "../../components/Header/BaseHead.astro";
import Header from "../../components/Header/Header.astro";
import Footer from "../../components/Footer/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import { getCollection } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";

const posts = (await getCollection("blog")).sort(
  (a, b) => a.data.pubDate.valueOf() - b.data.pubDate.valueOf()
);
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      ul {
        list-style-type: none;
        padding: unset;
      }
      ul li {
        display: flex;
      }
      ul li :global(time) {
        flex: 0 0 130px;
        font-style: italic;
        color: #595959;
      }
      ul li a:visited {
        color: #8e32dc;
      }
    </style>
  </head>
  <body class="bg-neutral-900">
    <Header />
    <main>
      <section>
        <ul>
          {
            posts.map((post) => (
              <li>
                <FormattedDate date={post.data.pubDate} />
                <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
              </li>
            ))
          }
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>
````

## File: blog/src/pages/about.astro
````
---
import Layout from "../layouts/BlogPost.astro";
---

<Layout
  title="About Me"
  description="Lorem ipsum dolor sit amet"
  pubDate={new Date("August 08 2021")}
  updatedDate={new Date("August 08 2022")}
  heroImage="/placeholder-about.jpg"
>
  <p>
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo
    integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis
    egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In
    hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat.
    Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu
    non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim.
    Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed
    vulputate mi. Dictumst quisque sagittis purus sit amet.
  </p>
  <p>
    Morbi tristique senectus et netus. Id semper risus in hendrerit gravida
    rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus
    sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris
    rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus
    dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis
    massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius
    morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras
    ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est
    ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa
    ultricies mi.
  </p>
  <p>
    Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque.
    Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac
    felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit
    amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed
    elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem
    dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra.
    Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum
    consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus
    ultricies tristique. Rhoncus dolor purus non enim praesent elementum
    facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed
    risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor
    vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus
    non. Amet dictum sit amet justo donec enim.
  </p>
  <p>
    Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac
    ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem
    viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu
    ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac
    tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus
    pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim
    sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam.
    Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.
  </p>
  <p>
    Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus
    imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu
    cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum.
    Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit
    libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed
    pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique
    magna.
  </p>
</Layout>
````

## File: blog/src/pages/index.astro
````
---
import BaseHead from "../components/Header/BaseHead.astro";
import Header from "../components/Header/Header.astro";
import Footer from "../components/Footer/Footer.astro";
import Intro from "../components/Index/Intro.astro";
import Hero from "../components/Index/Hero.astro";

import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
---

<!DOCTYPE html>
<html lang="en" class="flex items-center justify-center">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
  </head>
  <body class="bg-neutral-900 font-roboto text-white">
    <Header title={SITE_TITLE} />
    <Hero />
    <Intro />
    <Footer />
  </body>
</html>

<style is:global>
  body {
    font-family: 'Roboto', sans-serif;
    letter-spacing: 0.5px;
    line-height: 1.6;
  }
</style>
````

## File: blog/src/pages/manual.astro
````
---
import BaseHead from "../components/Header/BaseHead.astro";
import Header from "../components/Header/Header.astro";
import Footer from "../components/Footer/Footer.astro";
import ManualContent from "../components/Manual/ManualContent.astro";
import Stats from "../components/Manual/Stats.astro";

import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
---

<!DOCTYPE html>
<html lang="en" class="flex items-center justify-center">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
  </head>
  <body class="bg-neutral-900 font-roboto text-white max-w-[95vw]">
    <Header title={SITE_TITLE} />
    <main class="flex flex-col items-center justify-center">
      <ManualContent />
      <Stats />
    </main>
    <Footer />
  </body>
</html>

<style is:global>
  body {
    font-family: 'Roboto', sans-serif;
    letter-spacing: 0.5px;
    line-height: 1.6;
  }
</style>
````

## File: blog/src/pages/rss.xml.js
````javascript
import rss from "@astrojs/rss";
import { getCollection } from "astro:content";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
export async function get(context) {
  const posts = await getCollection("blog");
  return rss({
    title: SITE_TITLE,
    description: SITE_DESCRIPTION,
    site: context.site,
    items: posts.map((post) => ({
      ...post.data,
      link: `/blog/${post.slug}/`,
    })),
  });
}
````

## File: blog/src/styles/global.css
````css
/*
  The CSS in this style tag is based off of Bear Blog's default CSS.
  https://github.com/HermanMartinus/bearblog/blob/297026a877bc2ab2b3bdfbd6b9f7961c350917dd/templates/styles/blog/default.css
  License MIT: https://github.com/HermanMartinus/bearblog/blob/master/LICENSE.md
 */
body {
  font-family: Verdana, sans-serif;
  margin: auto;
  padding: 10px;  
  max-width: 90vw;
  text-align: left;
  background-color: #fff;
  word-wrap: break-word;
  overflow-wrap: break-word;
  line-height: 1.5;
  color: #fff;
}
h1,
h2,
h3,
h4,
h5,
h6,
strong,
b {
  color: #fff;
}
a {
  color: #3273dc;
}
nav a {
  margin-right: 10px;
}
textarea {
  width: 100%;
  font-size: 16px;
}
input {
  font-size: 16px;
}
content {
  line-height: 1.6;
}
table {
  width: 100%;
}
img {
  max-width: 100%;
  height: auto;
}
code {
  padding: 2px 5px;
  background-color: #f2f2f2;
}
pre {
  padding: 1rem;
}
pre > code {
  all: unset;
}
blockquote {
  border: 1px solid #999;
  color: #222;
  padding: 2px 0px 2px 20px;
  margin: 0px;
  font-style: italic;
}
````

## File: blog/src/consts.ts
````typescript
// Place any global data in this file.
// You can import this data from anywhere in your site by using the `import` keyword.
export const SITE_TITLE = 'Earth Doom';
export const SITE_DESCRIPTION = 'Welcome to Earth Doom';
````

## File: blog/src/env.d.ts
````typescript
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
````

## File: blog/.gitignore
````
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*


# environment variables
.env
.env.production

# macOS-specific files
.DS_Store
````

## File: blog/astro.config.mjs
````
import { defineConfig } from "astro/config";
import mdx from "@astrojs/mdx";
import sitemap from "@astrojs/sitemap";
import tailwind from "@astrojs/tailwind";

// https://astro.build/config
export default defineConfig({
  site: "https://www.earthdoom.com",
  integrations: [mdx(), sitemap(), tailwind()],
  output: "static",
});
````

## File: blog/package.json
````json
{
  "name": "blog",
  "type": "module",
  "version": "0.1.7",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro",
    "check": "astro check"
  },
  "dependencies": {
    "@astrojs/mdx": "^4.0.0",
    "@astrojs/rss": "^4.0.7",
    "@astrojs/sitemap": "^3.1.6",
    "@astrojs/tailwind": "^5.1.0",  
    "astro": "^5.0.0",
    "tailwindcss": "^3.4.10"
  },
  "optionalDependencies": {
    "@esbuild/linux-x64": "^0.24.0",
    "@rollup/rollup-linux-x64-gnu": "^4.21.2"
  }
}
````

## File: blog/renovate.json
````json
{ 
  "extends": ["config:base"],
  "ignorePresets": [":prHourlyLimit2", ":prConcurrentLimit20"],
  "packageRules": [
    {
      "rangeStrategy": "bump",
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    },
    {
      "matchUpdateTypes": ["minor", "pin", "digest"],
      "automerge": true,
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    },
    {
      "matchUpdateTypes": ["patch", "lockFileMaintenance"],
      "automerge": true,
      "automergeType": "branch",
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    }
  ]
}
````

## File: blog/tailwind.config.cjs
````
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}"],
  theme: {
    extend: {
      backgroundImage: {
        "space-ship": "url('/images/spaceship.jpg')",
        "large-space-ship": "url('/images/spaceship.png')",
        "cool-space-ship": "url('/images/new-spaceship.jpg')",
      },
    },
  },
  plugins: [],
};
````

## File: blog/tsconfig.json
````json
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "strictNullChecks": true
  }
}
````

## File: game/prisma/migrations/20240619044633_init/migration.sql
````sql
-- CreateTable
CREATE TABLE "PaUsers" (
    "id" SERIAL NOT NULL,
    "nick" TEXT NOT NULL,
    "crystal" INTEGER NOT NULL DEFAULT 0,
    "metal" INTEGER NOT NULL DEFAULT 0,
    "energy" INTEGER NOT NULL DEFAULT 0,
    "r_energy" INTEGER NOT NULL DEFAULT 0,
    "sats" INTEGER NOT NULL DEFAULT 0,
    "infinitys" INTEGER NOT NULL DEFAULT 0,
    "wraiths" INTEGER NOT NULL DEFAULT 0,
    "warfrigs" INTEGER NOT NULL DEFAULT 0,
    "destroyers" INTEGER NOT NULL DEFAULT 0,
    "scorpions" INTEGER NOT NULL DEFAULT 0,
    "astropods" INTEGER NOT NULL DEFAULT 0,
    "cobras" INTEGER NOT NULL DEFAULT 0,
    "infinitys_base" INTEGER NOT NULL DEFAULT 0,
    "wraiths_base" INTEGER NOT NULL DEFAULT 0,
    "warfrigs_base" INTEGER NOT NULL DEFAULT 0,
    "destroyers_base" INTEGER NOT NULL DEFAULT 0,
    "scorpions_base" INTEGER NOT NULL DEFAULT 0,
    "astropods_base" INTEGER NOT NULL DEFAULT 0,
    "cobras_base" INTEGER NOT NULL DEFAULT 0,
    "p_scorpions" INTEGER NOT NULL DEFAULT 0,
    "p_scorpions_eta" INTEGER NOT NULL DEFAULT 0,
    "p_cobras" INTEGER NOT NULL DEFAULT 0,
    "p_cobras_eta" INTEGER NOT NULL DEFAULT 0,
    "missiles" INTEGER NOT NULL DEFAULT 0,
    "score" INTEGER NOT NULL DEFAULT 0,
    "asteroids" INTEGER NOT NULL DEFAULT 0,
    "asteroid_crystal" INTEGER NOT NULL DEFAULT 0,
    "asteroid_metal" INTEGER NOT NULL DEFAULT 0,
    "ui_roids" INTEGER NOT NULL DEFAULT 0,
    "war" INTEGER NOT NULL DEFAULT 0,
    "def" INTEGER NOT NULL DEFAULT 0,
    "wareta" INTEGER NOT NULL DEFAULT 0,
    "defeta" INTEGER NOT NULL DEFAULT 0,
    "r_imcrystal" INTEGER NOT NULL DEFAULT 0,
    "r_immetal" INTEGER NOT NULL DEFAULT 0,
    "r_iafs" INTEGER NOT NULL DEFAULT 0,
    "r_aaircraft" INTEGER NOT NULL DEFAULT 0,
    "r_tbeam" INTEGER NOT NULL DEFAULT 0,
    "r_uscan" INTEGER NOT NULL DEFAULT 0,
    "r_oscan" INTEGER NOT NULL DEFAULT 0,
    "p_infinitys" INTEGER NOT NULL DEFAULT 0,
    "p_infinitys_eta" INTEGER NOT NULL DEFAULT 0,
    "p_wraiths" INTEGER NOT NULL DEFAULT 0,
    "p_wraiths_eta" INTEGER NOT NULL DEFAULT 0,
    "p_warfrigs" INTEGER NOT NULL DEFAULT 0,
    "p_warfrigs_eta" INTEGER NOT NULL DEFAULT 0,
    "p_destroyers" INTEGER NOT NULL DEFAULT 0,
    "p_destroyers_eta" INTEGER NOT NULL DEFAULT 0,
    "p_missiles" INTEGER NOT NULL DEFAULT 0,
    "p_missiles_eta" INTEGER NOT NULL DEFAULT 0,
    "timer" INTEGER NOT NULL DEFAULT 0,
    "size" INTEGER NOT NULL DEFAULT 0,
    "p_astropods" INTEGER NOT NULL DEFAULT 0,
    "p_astropods_eta" INTEGER NOT NULL DEFAULT 0,
    "tag" TEXT NOT NULL DEFAULT '',
    "rank" INTEGER NOT NULL DEFAULT 0,
    "rcannons" INTEGER NOT NULL DEFAULT 0,
    "p_rcannons" INTEGER NOT NULL DEFAULT 0,
    "p_rcannons_eta" INTEGER NOT NULL DEFAULT 0,
    "avengers" INTEGER NOT NULL DEFAULT 0,
    "p_avengers" INTEGER NOT NULL DEFAULT 0,
    "p_avengers_eta" INTEGER NOT NULL DEFAULT 0,
    "lstalkers" INTEGER NOT NULL DEFAULT 0,
    "p_lstalkers" INTEGER NOT NULL DEFAULT 0,
    "p_lstalkers_eta" INTEGER NOT NULL DEFAULT 0,
    "r_odg" INTEGER NOT NULL DEFAULT 0,
    "sleep" INTEGER NOT NULL DEFAULT 0,
    "lastsleep" INTEGER NOT NULL DEFAULT 0,
    "closed" INTEGER NOT NULL DEFAULT 0,
    "x" INTEGER NOT NULL DEFAULT 1,
    "y" INTEGER NOT NULL DEFAULT 1,
    "commander" INTEGER NOT NULL DEFAULT 0,
    "galname" TEXT NOT NULL DEFAULT 'No name',
    "galpic" TEXT NOT NULL DEFAULT '125x125earthdoom1.gif',
    "motd" INTEGER NOT NULL DEFAULT 0,
    "vote" TEXT NOT NULL DEFAULT '',
    "civilians" INTEGER NOT NULL DEFAULT 1000,
    "tax" INTEGER NOT NULL DEFAULT 20,
    "credits" INTEGER NOT NULL DEFAULT 5000,
    "newbie" INTEGER NOT NULL DEFAULT 100,
    "paConstructId" INTEGER,
    CONSTRAINT "PaUsers_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaConstruct" (
    "id" SERIAL NOT NULL,
    "c_crystal" INTEGER NOT NULL DEFAULT 0,
    "c_metal" INTEGER NOT NULL DEFAULT 0,
    "c_airport" INTEGER NOT NULL DEFAULT 0,
    "c_abase" INTEGER NOT NULL DEFAULT 0,
    "c_wstation" INTEGER NOT NULL DEFAULT 0,
    "c_amp1" INTEGER NOT NULL DEFAULT 0,
    "c_amp2" INTEGER NOT NULL DEFAULT 0,
    "c_warfactory" INTEGER NOT NULL DEFAULT 0,
    "c_destfact" INTEGER NOT NULL DEFAULT 0,
    "c_scorpfact" INTEGER NOT NULL DEFAULT 0,
    "c_energy" INTEGER NOT NULL DEFAULT 0,
    "c_odg" INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT "PaConstruct_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaNews" (
    "id" SERIAL NOT NULL,
    "sentTo" INTEGER NOT NULL DEFAULT 0,
    "time" INTEGER NOT NULL DEFAULT 0,
    "news" TEXT NOT NULL,
    "seen" TEXT NOT NULL DEFAULT '',
    "header" TEXT NOT NULL,
    CONSTRAINT "PaNews_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaLogging" (
    "id" SERIAL NOT NULL,
    "subject" TEXT NOT NULL,
    "text" TEXT NOT NULL,
    "author" INTEGER NOT NULL DEFAULT 0,
    "stamp" INTEGER NOT NULL DEFAULT 0,
    "toid" INTEGER NOT NULL DEFAULT 0,
    "type" TEXT NOT NULL,
    "ip" TEXT NOT NULL,
    CONSTRAINT "PaLogging_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaTag" (
    "id" SERIAL NOT NULL,
    "tag" TEXT NOT NULL,
    "leader" TEXT NOT NULL,
    "password" TEXT NOT NULL,
    CONSTRAINT "PaTag_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaMail" (
    "id" SERIAL NOT NULL,
    "sentTo" INTEGER NOT NULL DEFAULT 0,
    "time" INTEGER NOT NULL DEFAULT 0,
    "news" TEXT NOT NULL,
    "seen" INTEGER NOT NULL DEFAULT 0,
    "header" TEXT NOT NULL,
    CONSTRAINT "PaMail_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaPolitics" (
    "id" SERIAL NOT NULL,
    "time" INTEGER NOT NULL DEFAULT 0,
    "tekst" TEXT NOT NULL,
    "x" INTEGER NOT NULL DEFAULT 1,
    "creator" TEXT NOT NULL,
    "threadid" TEXT NOT NULL,
    "header" TEXT NOT NULL,
    CONSTRAINT "PaPolitics_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaAlliance" (
    "id" SERIAL NOT NULL,
    "time" INTEGER NOT NULL DEFAULT 0,
    "tekst" TEXT NOT NULL,
    "alliance" TEXT NOT NULL,
    "creator" TEXT NOT NULL,
    "threadid" TEXT NOT NULL,
    "header" TEXT NOT NULL,
    CONSTRAINT "PaAlliance_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaSession" (
    "id" SERIAL NOT NULL,
    "nick" TEXT NOT NULL,
    "userid" INTEGER NOT NULL,
    "magicnumber" TEXT NOT NULL DEFAULT '0',
    CONSTRAINT "PaSession_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "PaWar" (
    "id" SERIAL NOT NULL,
    "attacker" INTEGER NOT NULL,
    "defender" INTEGER NOT NULL,
    CONSTRAINT "PaWar_pkey" PRIMARY KEY ("id")
);
-- CreateTable
CREATE TABLE "Reset" (
    "id" SERIAL NOT NULL,
    "nextreset" INTEGER NOT NULL DEFAULT 10080,
    "game_start" INTEGER NOT NULL DEFAULT 0,
    "game_reset" INTEGER NOT NULL DEFAULT 1,
    CONSTRAINT "Reset_pkey" PRIMARY KEY ("id")
);
-- CreateIndex
CREATE INDEX "PaUsers_nick_idx" ON "PaUsers"("nick");
-- CreateIndex
CREATE INDEX "PaUsers_paConstructId_idx" ON "PaUsers"("paConstructId");
-- CreateIndex
CREATE UNIQUE INDEX "PaUsers_nick_key" ON "PaUsers"("nick");
-- CreateIndex
CREATE INDEX "PaConstruct_id_idx" ON "PaConstruct"("id");
-- CreateIndex
CREATE INDEX "PaNews_sentTo_idx" ON "PaNews"("sentTo");
-- CreateIndex
CREATE INDEX "PaTag_tag_password_idx" ON "PaTag"("tag", "password");
-- CreateIndex
CREATE UNIQUE INDEX "PaTag_tag_password_key" ON "PaTag"("tag", "password");
-- CreateIndex
CREATE INDEX "PaMail_sentTo_idx" ON "PaMail"("sentTo");
````

## File: game/prisma/migrations/migration_lock.toml
````toml
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"
````

## File: game/prisma/schema.prisma
````
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PaUsers {
  id               Int          @id @default(autoincrement())
  nick             String       @unique
  crystal          Int          @default(0)
  metal            Int          @default(0)
  energy           Int          @default(0)
  r_energy         Int          @default(0)
  sats             Int          @default(0)
  infinitys        Int          @default(0)
  wraiths          Int          @default(0)
  warfrigs         Int          @default(0)
  destroyers       Int          @default(0)
  scorpions        Int          @default(0)
  astropods        Int          @default(0)
  cobras           Int          @default(0)
  infinitys_base   Int          @default(0)
  wraiths_base     Int          @default(0)
  warfrigs_base    Int          @default(0)
  destroyers_base  Int          @default(0)
  scorpions_base   Int          @default(0)
  astropods_base   Int          @default(0)
  cobras_base      Int          @default(0)
  p_scorpions      Int          @default(0)
  p_scorpions_eta  Int          @default(0)
  p_cobras         Int          @default(0)
  p_cobras_eta     Int          @default(0)
  missiles         Int          @default(0)
  score            Int          @default(0)
  asteroids        Int          @default(0)
  asteroid_crystal Int          @default(0)
  asteroid_metal   Int          @default(0)
  ui_roids         Int          @default(0)
  war              Int          @default(0)
  def              Int          @default(0)
  wareta           Int          @default(0)
  defeta           Int          @default(0)
  r_imcrystal      Int          @default(0)
  r_immetal        Int          @default(0)
  r_iafs           Int          @default(0)
  r_aaircraft      Int          @default(0)
  r_tbeam          Int          @default(0)
  r_uscan          Int          @default(0)
  r_oscan          Int          @default(0)
  p_infinitys      Int          @default(0)
  p_infinitys_eta  Int          @default(0)
  p_wraiths        Int          @default(0)
  p_wraiths_eta    Int          @default(0)
  p_warfrigs       Int          @default(0)
  p_warfrigs_eta   Int          @default(0)
  p_destroyers     Int          @default(0)
  p_destroyers_eta Int          @default(0)
  p_missiles       Int          @default(0)
  p_missiles_eta   Int          @default(0)
  timer            Int          @default(0)
  size             Int          @default(0)
  p_astropods      Int          @default(0)
  p_astropods_eta  Int          @default(0)
  tag              String       @default("")
  rank             Int          @default(0)
  rcannons         Int          @default(0)
  p_rcannons       Int          @default(0)
  p_rcannons_eta   Int          @default(0)
  avengers         Int          @default(0)
  p_avengers       Int          @default(0)
  p_avengers_eta   Int          @default(0)
  lstalkers        Int          @default(0)
  p_lstalkers      Int          @default(0)
  p_lstalkers_eta  Int          @default(0)
  r_odg            Int          @default(0)
  sleep            Int          @default(0)
  lastsleep        Int          @default(0)
  closed           Int          @default(0)
  x                Int          @default(1)
  y                Int          @default(1)
  commander        Int          @default(0)
  galname          String       @default("No name")
  galpic           String       @default("125x125earthdoom1.gif")
  motd             Int          @default(0)
  vote             String       @default("")
  civilians        Int          @default(1000)
  tax              Int          @default(20)
  credits          Int          @default(5000)
  newbie           Int          @default(100)
  paConstructId    Int?
  construction     PaConstruct? @relation(fields: [paConstructId], references: [id])

  @@index([nick])
  @@index([paConstructId])
}

model PaConstruct {
  id           Int       @id @default(autoincrement())
  c_crystal    Int       @default(0)
  c_metal      Int       @default(0)
  c_airport    Int       @default(0)
  c_abase      Int       @default(0)
  c_wstation   Int       @default(0)
  c_amp1       Int       @default(0)
  c_amp2       Int       @default(0)
  c_warfactory Int       @default(0)
  c_destfact   Int       @default(0)
  c_scorpfact  Int       @default(0)
  c_energy     Int       @default(0)
  c_odg        Int       @default(0)
  PaUsers      PaUsers[]

  @@index([id])
}

model PaNews {
  id     Int    @id @default(autoincrement())
  sentTo Int    @default(0)
  time   Int    @default(0)
  news   String
  seen   String @default("")
  header String

  @@index([sentTo])
}

model PaLogging {
  id      Int    @id @default(autoincrement())
  subject String
  text    String
  author  Int    @default(0)
  stamp   Int    @default(0)
  toid    Int    @default(0)
  type    String
  ip      String
}

model PaTag {
  id       Int    @id @default(autoincrement())
  tag      String
  leader   String
  password String

  @@unique([tag, password])
  @@index([tag, password])
}

model PaMail {
  id     Int    @id @default(autoincrement())
  sentTo Int    @default(0)
  time   Int    @default(0)
  news   String
  seen   Int    @default(0)
  header String

  @@index([sentTo])
}

model PaPolitics {
  id       Int    @id @default(autoincrement())
  time     Int    @default(0)
  tekst    String
  x        Int    @default(1)
  creator  String
  threadid String
  header   String
}

model PaAlliance {
  id       Int    @id @default(autoincrement())
  time     Int    @default(0)
  tekst    String
  alliance String
  creator  String
  threadid String
  header   String
}

model PaSession {
  id          Int    @id @default(autoincrement())
  nick        String
  userid      Int
  magicnumber String @default("0")
}

model PaWar {
  id       Int @id @default(autoincrement())
  attacker Int
  defender Int
}

model Reset {
  id         Int @id @default(autoincrement())
  nextreset  Int @default(10080)
  game_start Int @default(0)
  game_reset Int @default(1)
}
````

## File: game/scripts/fix-constructs.ts
````typescript
const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});
async function fixConstructs() {
  try {
    // Get all users
    const users = await prisma.paUsers.findMany({
      include: {
        construction: true,
      },
    });
    console.log(`Found ${users.length} users`);
    // Process each user
    for (const user of users) {
      if (!user.construction) {
        console.log(`Creating PaConstruct for user ${user.nick} (ID: ${user.id})`);
        // Create new PaConstruct and link it to user
        await prisma.paUsers.update({
          where: { id: user.id },
          data: {
            construction: {
              create: {}, // Creates with default values
            },
          },
        });
        console.log(`Created PaConstruct for user ${user.nick}`);
      } else {
        console.log(`User ${user.nick} already has PaConstruct ID: ${user.construction.id}`);
      }
    }
    console.log('Finished processing all users');
  } catch (error) {
    console.error('Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}
// Run the fix
fixConstructs().catch(console.error);
````

## File: game/src/__tests__/components/common/Button.test.tsx
````typescript
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import Button from '../../../components/common/Button';
describe('Button component', () => {
  it('renders with default props', () => {
    render(<Button>Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toBeInTheDocument();
    expect(button).toHaveClass('bg-primary');
    expect(button).not.toBeDisabled();
  });
  it('renders primary variant correctly', () => {
    render(<Button variant="primary">Primary</Button>);
    const button = screen.getByRole('button', { name: /primary/i });
    expect(button).toHaveClass('bg-primary');
  });
  it('renders danger variant correctly', () => {
    render(<Button variant="danger">Danger</Button>);
    const button = screen.getByRole('button', { name: /danger/i });
    expect(button).toHaveClass('bg-danger');
  });
  it('applies disabled state correctly', () => {
    render(<Button disabled>Disabled</Button>);
    const button = screen.getByRole('button', { name: /disabled/i });
    expect(button).toBeDisabled();
    expect(button).toHaveClass('disabled:opacity-50');
  });
  it('applies extra classes correctly', () => {
    const extraClasses = 'test-class another-class';
    render(<Button extraClasses={extraClasses}>Extra Classes</Button>);
    const button = screen.getByRole('button', { name: /extra classes/i });
    expect(button.className).toContain('test-class');
    expect(button.className).toContain('another-class');
  });
  it('handles click events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click Handler</Button>);
    const button = screen.getByRole('button', { name: /click handler/i });
    fireEvent.click(button);
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  it('does not trigger click handler when disabled', () => {
    const handleClick = jest.fn();
    render(<Button disabled onClick={handleClick}>Disabled Click</Button>);
    const button = screen.getByRole('button', { name: /disabled click/i });
    fireEvent.click(button);
    expect(handleClick).not.toHaveBeenCalled();
  });
  it('applies hover and focus styles', () => {
    render(<Button>Style Test</Button>);
    const button = screen.getByRole('button', { name: /style test/i });
    const className = button.className;
    expect(className).toContain('hover:bg-primary-600');
    expect(className).toContain('focus:bg-primary-600');
  });
  it('spreads additional props to button element', () => {
    render(
      <Button data-testid="test-button" aria-label="test button">
        Props Spread
      </Button>
    );
    const button = screen.getByTestId('test-button');
    expect(button).toHaveAttribute('aria-label', 'test button');
  });
  it('maintains consistent styling with long text content', () => {
    render(
      <Button>
        This is a very long button text that should still maintain proper styling
      </Button>
    );
    const button = screen.getByRole('button');
    const className = button.className;
    expect(className).toContain('p-8');
    expect(className).toContain('w-32');
    expect(className).toContain('pb-2');
    expect(className).toContain('pt-2.5');
  });
  it('combines all style classes correctly', () => {
    render(<Button variant="primary" extraClasses="custom-class">Test</Button>);
    const button = screen.getByRole('button');
    const className = button.className;
    // Base classes
    expect(className).toContain('inline-block');
    expect(className).toContain('rounded');
    expect(className).toContain('text-white');
    // Variant classes
    expect(className).toContain('bg-primary');
    // Extra classes
    expect(className).toContain('custom-class');
    // Interactive states
    expect(className).toContain('disabled:opacity-50');
    expect(className).toContain('hover:bg-primary-600');
    expect(className).toContain('focus:bg-primary-600');
  });
});
````

## File: game/src/__tests__/pages/index.test.tsx
````typescript
import React from 'react';
import { render, screen } from '@testing-library/react';
import Home from '../../pages/index';
import type { PaUsers } from '@prisma/client';
// Define the PaPlayer type that extends PaUsers
interface PaPlayer extends PaUsers {
  [key: string]: number | string | null | undefined;
}
interface UseUserReturn {
  isSignedIn: boolean;
  user: { username: string | null } | null;
}
interface UseQueryReturn {
  data: PaPlayer | null | undefined;
  isLoading: boolean;
  error?: Error;
}
// Mock the clerk hook
const mockUseUser = jest.fn<UseUserReturn, []>();
jest.mock('@clerk/nextjs', () => ({
  useUser: () => mockUseUser()
}));
// Mock the api
const mockUseQuery = jest.fn<UseQueryReturn, []>();
jest.mock('../../utils/api', () => ({
  api: {
    paUsers: {
      getPlayerByNick: {
        useQuery: () => mockUseQuery()
      }
    }
  }
}));
// Mock the components
jest.mock('../../components/common/Layout', () => ({
  Layout: ({ children }: { children: React.ReactNode }) => <div data-testid="layout">{children}</div>
}));
jest.mock('../../components/common/Loader/LoadingSpinner', () => ({
  __esModule: true,
  default: () => <div data-testid="loading-spinner">Loading...</div>
}));
jest.mock('../../components/ui/tables/UnitsTable', () => ({
  __esModule: true,
  default: ({ paPlayer }: { paPlayer: PaPlayer }) => (
    <div data-testid="units-table">Units Table: {paPlayer.nick}</div>
  )
}));
jest.mock('../../components/ui/tables/BDUTable', () => ({
  __esModule: true,
  default: ({ paPlayer }: { paPlayer: PaPlayer }) => (
    <div data-testid="bdu-table">BDU Table: {paPlayer.nick}</div>
  )
}));
jest.mock('../../components/ui/tables/LandTable', () => ({
  __esModule: true,
  default: ({ paPlayer }: { paPlayer: PaPlayer }) => (
    <div data-testid="land-table">Land Table: {paPlayer.nick}</div>
  )
}));
jest.mock('../../components/ui/tables/FleetTable', () => ({
  __esModule: true,
  default: ({ paPlayer }: { paPlayer: PaPlayer }) => (
    <div data-testid="fleet-table">Fleet Table: {paPlayer.nick}</div>
  )
}));
describe('Home component', () => {
  beforeEach(() => {
    mockUseUser.mockClear();
    mockUseQuery.mockClear();
  });
  it('renders null when user is not signed in', () => {
    mockUseUser.mockReturnValue({
      isSignedIn: false,
      user: null
    });
    const { container } = render(<Home />);
    expect(container.firstChild).toBeNull();
  });
  it('renders null when user is signed in but has no username', () => {
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username: null }
    });
    const { container } = render(<Home />);
    expect(container.firstChild).toBeNull();
  });
  it('renders loading spinner when signed in but player data is loading', () => {
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username: 'testuser' }
    });
    mockUseQuery.mockReturnValue({
      data: null,
      isLoading: true
    });
    const { getByTestId } = render(<Home />);
    expect(getByTestId('loading-spinner')).toBeInTheDocument();
    expect(getByTestId('layout')).toBeInTheDocument();
  });
  it('renders loading spinner when player data is undefined', () => {
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username: 'testuser' }
    });
    mockUseQuery.mockReturnValue({
      data: undefined,
      isLoading: false
    });
    const { getByTestId } = render(<Home />);
    expect(getByTestId('loading-spinner')).toBeInTheDocument();
  });
  it('renders all tables with correct player data', () => {
    const mockPlayer: PaPlayer = {
      id: 1,
      nick: 'TestPlayer',
      crystal: 1000,
      metal: 1000,
      energy: 1000,
      infinitys: 10,
      wraiths: 10,
      warfrigs: 10,
      destroyers: 10,
      scorpions: 10,
      astropods: 10,
      war: 0,
      def: 0,
      tag: 'TEST',
      rank: 1,
      x: 1,
      y: 1,
      commander: 0,
      galname: 'Test Galaxy',
      galpic: '125x125earthdoom1.gif',
      civilians: 1000,
      tax: 20,
      credits: 5000,
      newbie: 100,
      paConstructId: null,
      // Add all other required fields with default values
      r_energy: 0,
      sats: 0,
      cobras: 0,
      infinitys_base: 0,
      wraiths_base: 0,
      warfrigs_base: 0,
      destroyers_base: 0,
      scorpions_base: 0,
      astropods_base: 0,
      cobras_base: 0,
      p_scorpions: 0,
      p_scorpions_eta: 0,
      p_cobras: 0,
      p_cobras_eta: 0,
      missiles: 0,
      score: 0,
      asteroids: 0,
      asteroid_crystal: 0,
      asteroid_metal: 0,
      ui_roids: 0,
      wareta: 0,
      defeta: 0,
      r_imcrystal: 0,
      r_immetal: 0,
      r_iafs: 0,
      r_aaircraft: 0,
      r_tbeam: 0,
      r_uscan: 0,
      r_oscan: 0,
      p_infinitys: 0,
      p_infinitys_eta: 0,
      p_wraiths: 0,
      p_wraiths_eta: 0,
      p_warfrigs: 0,
      p_warfrigs_eta: 0,
      p_destroyers: 0,
      p_destroyers_eta: 0,
      p_missiles: 0,
      p_missiles_eta: 0,
      timer: 0,
      size: 0,
      p_astropods: 0,
      p_astropods_eta: 0,
      rcannons: 0,
      p_rcannons: 0,
      p_rcannons_eta: 0,
      avengers: 0,
      p_avengers: 0,
      p_avengers_eta: 0,
      lstalkers: 0,
      p_lstalkers: 0,
      p_lstalkers_eta: 0,
      r_odg: 0,
      sleep: 0,
      lastsleep: 0,
      closed: 0,
      motd: 0,
      vote: ''
    };
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username: 'testuser' }
    });
    mockUseQuery.mockReturnValue({
      data: mockPlayer,
      isLoading: false
    });
    render(<Home />);
    expect(screen.getByTestId('layout')).toBeInTheDocument();
    expect(screen.getByTestId('units-table')).toBeInTheDocument();
    expect(screen.getByTestId('bdu-table')).toBeInTheDocument();
    expect(screen.getByTestId('land-table')).toBeInTheDocument();
    expect(screen.getByTestId('fleet-table')).toBeInTheDocument();
    // Verify player data is passed correctly
    expect(screen.getByTestId('units-table')).toHaveTextContent('TestPlayer');
    expect(screen.getByTestId('bdu-table')).toHaveTextContent('TestPlayer');
    expect(screen.getByTestId('land-table')).toHaveTextContent('TestPlayer');
    expect(screen.getByTestId('fleet-table')).toHaveTextContent('TestPlayer');
  });
  it('handles error state in API query', () => {
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username: 'testuser' }
    });
    mockUseQuery.mockReturnValue({
      data: null,
      isLoading: false,
      error: new Error('Failed to fetch player data')
    });
    const { getByTestId } = render(<Home />);
    expect(getByTestId('loading-spinner')).toBeInTheDocument();
  });
  it('passes correct query parameters to API', () => {
    const username = 'testuser';
    mockUseUser.mockReturnValue({
      isSignedIn: true,
      user: { username }
    });
    mockUseQuery.mockReturnValue({
      data: null,
      isLoading: true
    });
    render(<Home />);
    // Verify API was called with correct parameters
    expect(mockUseQuery).toHaveBeenCalled();
    const queryResult = mockUseQuery.mock.results[0]?.value as UseQueryReturn;
    expect(queryResult.isLoading).toBe(true);
  });
});
````

## File: game/src/__tests__/server/api/routers/paUsers.test.ts
````typescript
import type { DeepMockProxy } from 'jest-mock-extended';
import type { PrismaClient, PaUsers, PaConstruct } from '@prisma/client';
import type { inferProcedureInput } from '@trpc/server';
import type { AppRouter } from '../../../../server/api/root';
import type { ZodType } from 'zod';
// Import the actual functions after the type imports
import { mockDeep as actualMockDeep, mockReset as actualMockReset } from 'jest-mock-extended';
import { z } from 'zod';
const prismaMock = actualMockDeep<PrismaClient>();
// Infer the context type from createTRPCContext
type Context = {
  prisma: PrismaClient;
  userId: string | null;
  username: string | null;
};
interface RouterContext extends Omit<Context, 'prisma'> {
  prisma: DeepMockProxy<PrismaClient>;
}
interface ProcedureParams<TInput> {
  ctx: RouterContext;
  input: TInput;
}
type CreatePlayerInput = inferProcedureInput<AppRouter['paUsers']['createPlayer']>;
type GetPlayerByNickInput = inferProcedureInput<AppRouter['paUsers']['getPlayerByNick']>;
interface PlayerWithConstruction extends PaUsers {
  construction: PaConstruct | null;
}
type RouterResolver<TInput, TOutput> = (params: ProcedureParams<TInput>) => Promise<TOutput>;
// Mock the entire trpc module
jest.mock('../../../../server/api/trpc', () => ({
  createTRPCRouter: (routes: Record<string, unknown>) => ({
    createCaller: (ctx: RouterContext) => {
      const router: Record<string, RouterResolver<unknown, unknown>> = {};
      for (const [name, route] of Object.entries(routes)) {
        router[name] = async (input: unknown): Promise<unknown> => {
          const resolver = (route as { resolve: RouterResolver<unknown, unknown> }).resolve;
          return await resolver({ 
            ctx: { ...ctx, prisma: prismaMock },
            input,
          });
        };
      }
      return router;
    },
  }),
  publicProcedure: {
    input: (schema: ZodType) => ({
      mutation: (resolver: RouterResolver<z.infer<typeof schema>, unknown>) => ({
        resolve: resolver
      })
    })
  },
  privateProcedure: {
    input: (schema: ZodType) => ({
      query: (resolver: RouterResolver<z.infer<typeof schema>, unknown>) => ({
        resolve: resolver
      })
    })
  }
}));
// Define the router with typed procedures
const paUsersRouter = {
  createPlayer: {
    resolve: async ({ ctx, input }: ProcedureParams<CreatePlayerInput>): Promise<PlayerWithConstruction> => {
      return await ctx.prisma.paUsers.create({
        data: {
          nick: input.nick,
          construction: { create: {} },
        },
        include: { construction: true },
      });
    }
  },
  getPlayerByNick: {
    resolve: async ({ ctx, input }: ProcedureParams<GetPlayerByNickInput>) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true, tag: true, construction: true },
      });
      if (!user) return null;
      const player = await ctx.prisma.paUsers.findUnique({
        where: { id: user.id },
      });
      if (!player) return null;
      const paConstruct = await ctx.prisma.paConstruct.findUnique({
        where: { id: player.paConstructId || 1 },
      });
      return { ...paConstruct, ...player, id: player.id };
    }
  }
};
describe('paUsers router', () => {
  beforeAll(() => {
    jest.spyOn(console, 'error').mockImplementation(() => {});
  });
  afterAll(() => {
    (console.error as jest.Mock).mockRestore();
  });
  beforeEach(() => {
    actualMockReset(prismaMock);
  });
  describe('createPlayer', () => {
    it('creates a new player with construction', async () => {
      const mockPlayer: PlayerWithConstruction = {
        id: 1,
        nick: 'testPlayer',
        crystal: 0,
        metal: 0,
        energy: 0,
        r_energy: 0,
        sats: 0,
        infinitys: 0,
        wraiths: 0,
        warfrigs: 0,
        destroyers: 0,
        scorpions: 0,
        astropods: 0,
        cobras: 0,
        infinitys_base: 0,
        wraiths_base: 0,
        warfrigs_base: 0,
        destroyers_base: 0,
        scorpions_base: 0,
        astropods_base: 0,
        cobras_base: 0,
        p_scorpions: 0,
        p_scorpions_eta: 0,
        p_cobras: 0,
        p_cobras_eta: 0,
        missiles: 0,
        score: 0,
        asteroids: 0,
        asteroid_crystal: 0,
        asteroid_metal: 0,
        ui_roids: 0,
        war: 0,
        def: 0,
        wareta: 0,
        defeta: 0,
        r_imcrystal: 0,
        r_immetal: 0,
        r_iafs: 0,
        r_aaircraft: 0,
        r_tbeam: 0,
        r_uscan: 0,
        r_oscan: 0,
        p_infinitys: 0,
        p_infinitys_eta: 0,
        p_wraiths: 0,
        p_wraiths_eta: 0,
        p_warfrigs: 0,
        p_warfrigs_eta: 0,
        p_destroyers: 0,
        p_destroyers_eta: 0,
        p_missiles: 0,
        p_missiles_eta: 0,
        timer: 0,
        size: 0,
        p_astropods: 0,
        p_astropods_eta: 0,
        rcannons: 0,
        p_rcannons: 0,
        p_rcannons_eta: 0,
        avengers: 0,
        p_avengers: 0,
        p_avengers_eta: 0,
        lstalkers: 0,
        p_lstalkers: 0,
        p_lstalkers_eta: 0,
        r_odg: 0,
        sleep: 0,
        lastsleep: 0,
        closed: 0,
        tag: '',
        rank: 0,
        commander: 0,
        galname: '',
        galpic: '',
        motd: 0,
        vote: '',
        civilians: 0,
        tax: 0,
        credits: 0,
        newbie: 0,
        paConstructId: null,
        x: 0,
        y: 0,
        construction: {
          id: 1,
          c_crystal: 0,
          c_metal: 0,
          c_airport: 0,
          c_abase: 0,
          c_wstation: 0,
          c_amp1: 0,
          c_amp2: 0,
          c_warfactory: 0,
          c_destfact: 0,
          c_scorpfact: 0,
          c_energy: 0,
          c_odg: 0,
        }
      };
      prismaMock.paUsers.create.mockResolvedValue(mockPlayer);
      const result = await paUsersRouter.createPlayer.resolve({
        ctx: { prisma: prismaMock, userId: null, username: null },
        input: { nick: 'testPlayer' }
      });    
      expect(result).toEqual(mockPlayer);
    });
    it('throws error if nick is already taken', async () => {
      prismaMock.paUsers.create.mockRejectedValue(new Error('Unique constraint failed'));
      await expect(
        paUsersRouter.createPlayer.resolve({
          ctx: { prisma: prismaMock, userId: null, username: null },
          input: { nick: 'existingPlayer' }
        })
      ).rejects.toThrow();
    });
  });
  describe('getPlayerByNick', () => {
    it('returns player with construction data', async () => {
      const mockUser: PaUsers & { construction: PaConstruct } = {
        id: 1,
        nick: 'testPlayer',
        crystal: 0,
        metal: 0,
        energy: 0,
        r_energy: 0,
        sats: 0,
        infinitys: 0,
        wraiths: 0,
        warfrigs: 0,
        destroyers: 0,
        scorpions: 0,
        astropods: 0,
        cobras: 0,
        infinitys_base: 0,
        wraiths_base: 0,
        warfrigs_base: 0,
        destroyers_base: 0,
        scorpions_base: 0,
        astropods_base: 0,
        cobras_base: 0,
        p_scorpions: 0,
        p_scorpions_eta: 0,
        p_cobras: 0,
        p_cobras_eta: 0,
        missiles: 0,
        score: 0,
        asteroids: 0,
        asteroid_crystal: 0,
        asteroid_metal: 0,
        ui_roids: 0,
        war: 0,
        def: 0,
        wareta: 0,
        defeta: 0,
        r_imcrystal: 0,
        r_immetal: 0,
        r_iafs: 0,
        r_aaircraft: 0,
        r_tbeam: 0,
        r_uscan: 0,
        r_oscan: 0,
        p_infinitys: 0,
        p_infinitys_eta: 0,
        p_wraiths: 0,
        p_wraiths_eta: 0,
        p_warfrigs: 0,
        p_warfrigs_eta: 0,
        p_destroyers: 0,
        p_destroyers_eta: 0,
        p_missiles: 0,
        p_missiles_eta: 0,
        timer: 0,
        size: 0,
        p_astropods: 0,
        p_astropods_eta: 0,
        rcannons: 0,
        p_rcannons: 0,
        p_rcannons_eta: 0,
        avengers: 0,
        p_avengers: 0,
        p_avengers_eta: 0,
        lstalkers: 0,
        p_lstalkers: 0,
        p_lstalkers_eta: 0,
        r_odg: 0,
        sleep: 0,
        lastsleep: 0,
        closed: 0,
        tag: 'TEST',
        rank: 1,
        commander: 0,
        galname: '',
        galpic: '',
        motd: 0,
        vote: '',
        civilians: 0,
        tax: 0,
        credits: 0,
        newbie: 0,
        paConstructId: 1,
        x: 0,
        y: 0,
        construction: {
          id: 1,
          c_crystal: 0,
          c_metal: 0,
          c_airport: 0,
          c_abase: 0,
          c_wstation: 0,
          c_amp1: 0,
          c_amp2: 0,
          c_warfactory: 0,
          c_destfact: 0,
          c_scorpfact: 0,
          c_energy: 0,
          c_odg: 0,
        }
      };
      const mockConstruct: PaConstruct = {
        id: 1,
        c_crystal: 0,
        c_metal: 0,
        c_airport: 0,
        c_abase: 0,
        c_wstation: 0,
        c_amp1: 0,
        c_amp2: 0,
        c_warfactory: 0,
        c_destfact: 0,
        c_scorpfact: 0,
        c_energy: 0,
        c_odg: 0,
      };
      prismaMock.paUsers.findUnique
        .mockResolvedValueOnce(mockUser)
        .mockResolvedValueOnce(mockUser);
      prismaMock.paConstruct.findUnique.mockResolvedValue(mockConstruct);
      const result = await paUsersRouter.getPlayerByNick.resolve({
        ctx: { prisma: prismaMock, userId: 'test-user-id', username: 'test-user' },
        input: { nick: 'testPlayer' }
      });
      expect(result).toEqual({
        ...mockConstruct,
        ...mockUser,
        id: mockUser.id,
      });
    });
    it('returns null if player not found', async () => {
      prismaMock.paUsers.findUnique.mockResolvedValue(null);
      const result = await paUsersRouter.getPlayerByNick.resolve({
        ctx: { prisma: prismaMock, userId: 'test-user-id', username: 'test-user' },
        input: { nick: 'nonexistent' }
      });
      expect(result).toBeNull();
    });
  });
});
````

## File: game/src/components/common/Header/constants/LINKS.ts
````typescript
interface ILinks {
  id: number;
  href: string;
  text: string;
  target?: string;
}
export const LINKS: ILinks[] = [
  {
    id: 0,
    href: "/",
    text: "Main",
  },
  {
    id: 1,
    href: "https://earthdoom.com/manual",
    text: "Manual",
    target: "_new",
  },
  {
    id: 2,
    href: "/news",
    text: "News",
  },
  /*{
    id: 3,
    href: "/contnews",
    text: "Continent News",
  },*/
  {
    id: 4,
    href: "/mail",
    text: "Mail",
  },
  {
    id: 5,
    href: "/production",
    text: "Production",
  },
  {
    id: 6,
    href: "/construct",
    text: "Construct",
  },
  {
    id: 7,
    href: "/research",
    text: "Research",
  },
  {
    id: 8,
    href: "/energy",
    text: "Energy",
  },
  {
    id: 9,
    href: "/resources",
    text: "Resources",
  },
  {
    id: 10,
    href: "/military",
    text: "Military",
  },
  {
    id: 11,
    href: "/spying",
    text: "Spying",
  },
  {
    id: 12,
    href: "/ranking",
    text: "Ranking",
  },
  {
    id: 13,
    href: "/alliance",
    text: "Alliance",
  },
  /*{
    id: 14,
    href: "/country",
    text: "Country",
  },*/
  {
    id: 15,
    href: "/logout",
    text: "Logout",
  },
];
````

## File: game/src/components/common/Header/Information.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import Link from "next/link";
import type { PaPlayer } from "@/components/features/Military/Military";
import { api } from "@/utils/api";
import OverviewTable from "./OverviewTable";
import LoadingSpinner from "../Loader/LoadingSpinner";
interface InformationProps {
  paPlayer?: PaPlayer;
}
const Information: React.FC<InformationProps> = ({ paPlayer }) => {
  const { user } = useUser();
  if (!user?.username) {
    return null;
  }
  const { data: hostilesData, isLoading } = api.paUsers.getHostiles.useQuery({
    nick: user.username,
  });
  const { data: friendliesData } = api.paUsers.getFriendlies.useQuery({
    nick: user.username,
  });
  const { data: paUnseenMail } = api.paMail.getUnseenMailByUserId.useQuery({
    nick: user.username,
  });
  if (!paPlayer) {
    return null;
  }
  return (
    <>
      <div className="mt-4 flex w-full flex-col items-center justify-center gap-12 px-4 py-4 text-white">
        <div className="flex flex-col items-center gap-2 text-center text-lg md:w-[44.5625rem]">
          {isLoading && <LoadingSpinner />}
          {hostilesData?.hostiles && (
            <div
              className="mb-4 rounded-lg bg-red-300 px-6 py-5 text-base text-black md:min-w-[30.625rem]"
              role="alert"
            >
              {/* Split the hostiles string into an array of lines */}
              {hostilesData.hostiles.split("\n").map((line, index) => (
                <div className="text-left" key={index}>
                  {line}
                </div>
              ))}
            </div>
          )}
          {friendliesData?.defenders && (
            <div
              className="mb-4 rounded-lg bg-green-300 px-6 py-5 text-base text-black md:min-w-[30.625rem]"
              role="alert"
            >
              {/* Split the defenders string into an array of lines */}
              {friendliesData.defenders.split("\n").map((line, index) => (
                <div className="text-left" key={index}>
                  {line}
                </div>
              ))}
            </div>
          )}
          {paUnseenMail?.email?.length && paUnseenMail?.email?.length > 0 ? (
            <div
              className="mb-4 min-w-[27.125rem] rounded-lg bg-secondary-100 px-6 py-5 text-base text-secondary-800 md:min-w-[30.375rem]"
              role="alert"
            >
              <Link href="/mail" className="font-bold text-info-800">
                You have unread email
              </Link>
            </div>
          ) : (
            ""
          )}
          {paPlayer?.newbie > 0 && (
            <div
              className="mb-4 rounded-lg bg-blue-100 px-6 py-5 text-base text-blue-800 md:min-w-[30.625rem]"
              role="alert"
            >
              You are under protection for {paPlayer.newbie} more ticks
            </div>
          )}
          {paPlayer && <OverviewTable paPlayer={paPlayer} />}
        </div>
      </div>
    </>
  );
};
export default Information;
````

## File: game/src/components/common/Header/Navbar - Copy.tsx
````typescript
import { SignedIn } from "@clerk/nextjs";
import Link from "next/link";
const Navbar = () => (
  <div className="flex min-h-[6.875rem] justify-center bg-gray-800 p-6">
    <SignedIn>
      <nav
        className="relative flex w-full items-center justify-between bg-gray-800 py-2 text-white  lg:flex-wrap lg:justify-center dark:bg-neutral-700 dark:text-neutral-300"
        data-te-navbar-ref
      >
        <div className="px-6">
          <button
            className="border-0 text-xl leading-none transition-shadow duration-150 ease-in-out lg:hidden dark:hover:text-white dark:focus:text-white"
            type="button"
            data-te-collapse-init
            data-te-target="#navbarSupportedContentX"
            aria-controls="navbarSupportedContentX"
            aria-expanded="false"
            aria-label="Toggle navigation"
          >
            <span className="[&>svg]:w-8">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth="2"
                stroke="currentColor"
                className="h-8 w-8"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
                />
              </svg>
            </span>
          </button>
          <div
            className="!visible hidden flex-grow basis-[100%] items-center lg:!flex lg:basis-auto"
            id="navbarSupportedContentX"
            data-te-collapse-item
          >
            <ul className="mr-auto flex flex-row" data-te-navbar-nav-ref>
              <li className="static" data-te-nav-item-ref data-te-dropdown-ref>
                <button
                  className="flex items-center whitespace-nowrap py-2 pr-2 text-lg font-bold  transition duration-150 ease-in-out hover:text-slate-300  lg:px-2 dark:hover:text-white dark:focus:text-white"
                  type="button"
                  id="dropdownMenuButtonX"
                  data-te-dropdown-toggle-ref
                  aria-expanded="false"
                  data-te-nav-link-ref
                >
                  Main menu
                  <span className="ml-2 w-2">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                      className="h-5 w-5"
                    >
                      <path
                        fillRule="evenodd"
                        d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </span>
                </button>
                <div
                  className="absolute left-0 right-0 top-full z-[1000] mt-0 hidden w-full border-none bg-white bg-clip-padding text-neutral-600  dark:bg-neutral-700 dark:text-neutral-200 [&[data-te-dropdown-show]]:block"
                  aria-labelledby="dropdownMenuButtonX"
                  data-te-dropdown-menu-ref
                >
                  <div className="px-6 py-5 lg:px-8">
                    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
                      <div>
                        <Link
                          href="/"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Main
                        </Link>
                        <Link
                          href="https://earthdoom.com/manual"
                          target="new"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Manual
                        </Link>
                        <Link
                          href="/news"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          News
                        </Link>
                        <Link
                          href="/contnews"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Contnews
                        </Link>
                        <Link
                          href="/mail"
                          aria-current="true"
                          className="block w-full px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-50 hover:text-neutral-700 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Mail
                        </Link>
                      </div>
                      <div>
                        <Link
                          href="/politics"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Politics
                        </Link>
                        <Link
                          href="/production"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Production
                        </Link>
                        <Link
                          href="/construct"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Construct
                        </Link>
                        <Link
                          href="/research"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Research
                        </Link>
                        <Link
                          href="/sats"
                          aria-current="true"
                          className="block w-full px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-50 hover:text-neutral-700 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Sats
                        </Link>
                      </div>
                      <div>
                        <Link
                          href="/resources"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Resources
                        </Link>
                        <Link
                          href="/military"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Military
                        </Link>
                        <Link
                          href="/spying"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Spying
                        </Link>
                        <Link
                          href="/ranking"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Ranking
                        </Link>
                        <Link
                          href="/alliance"
                          aria-current="true"
                          className="block w-full px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-50 hover:text-neutral-700 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Alliance
                        </Link>
                      </div>
                      <div>
                        <Link
                          href="/senate"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Senate
                        </Link>
                        <Link
                          href="/country"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Country
                        </Link>
                        <Link
                          href="/endre"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Preferences
                        </Link>
                        <Link
                          href="/logout"
                          aria-current="true"
                          className="block w-full border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                        >
                          Logout
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </SignedIn>
  </div>
);
export default Navbar;
````

## File: game/src/components/common/Header/Navbar.tsx
````typescript
import { useState, useRef } from "react";
import { SignedIn } from "@clerk/nextjs";
import { useClickAway } from "react-use";
import Link from "next/link";
import { LINKS } from "./constants/LINKS";
/**
 * A React functional component that represents a Navbar.
 *
 * @return {JSX.Element} The rendered Navbar component.
 */
const Navbar = () => {
  const [expanded, setExpanded] = useState<boolean>(false);
  const navbarRef = useRef(null);
  useClickAway(navbarRef, () => {
    setExpanded(false);
  });
  return (
    <div
      ref={navbarRef}
      className="flex min-h-[6.875rem] justify-center bg-gray-800 p-6"
    >
      <SignedIn>
        <nav className="relative flex w-full items-center justify-between bg-gray-800 py-2 text-white  lg:flex-wrap lg:justify-center dark:bg-neutral-700 dark:text-neutral-300">
          <div className="px-6">
            <button
              className="border-0 text-xl leading-none transition-shadow duration-150 ease-in-out lg:hidden dark:hover:text-white dark:focus:text-white"
              type="button"
              aria-controls="navbarSupportedContentX"
              aria-expanded="false"
              aria-label="Toggle navigation"
              onClick={() => {
                setExpanded(!expanded);
              }}
            >
              <span className="[&>svg]:w-8">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="2"
                  stroke="currentColor"
                  className="h-8 w-8"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
                  />
                </svg>
              </span>
            </button>
            <div id="navbarSupportedContentX">
              <ul className="mr-auto flex flex-row">
                <li className="static">
                  <button
                    className="flex items-center whitespace-nowrap py-2 pr-2 text-lg font-bold  transition duration-150 ease-in-out hover:text-slate-300  lg:px-2 dark:hover:text-white dark:focus:text-white"
                    type="button"
                    id="dropdownMenuButtonX"
                    aria-expanded={expanded}
                    onClick={() => {
                      setExpanded(!expanded);
                    }}
                  >
                    Main menu
                    <span className="ml-2 w-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                        className="h-5 w-5"
                      >
                        <path
                          fillRule="evenodd"
                          d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z"
                          clipRule="evenodd"
                        />
                      </svg>
                    </span>
                  </button>
                  <div
                    className={`absolute left-0 right-0 top-full z-[1000] mt-0 w-full border-none bg-white bg-clip-padding text-neutral-600 transition-all duration-500 dark:bg-neutral-700 dark:text-neutral-200 ${
                      expanded ? "visible opacity-100" : "invisible opacity-0"
                    }`}
                    aria-labelledby="dropdownMenuButtonX"
                  >
                    <div className="px-6 py-5 lg:px-8">
                      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                        {LINKS.map(({ id, href, text, target }) => (
                          <Link
                            key={id}
                            href={href}
                            target={target || "_self"}
                            className="block border-b border-neutral-200 px-6 py-2 transition duration-150 ease-in-out hover:bg-neutral-100 hover:text-neutral-800 dark:border-neutral-500 dark:hover:bg-neutral-800 dark:hover:text-white"
                          >
                            {text}
                          </Link>
                        ))}
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </SignedIn>
    </div>
  );
};
export default Navbar;
````

## File: game/src/components/common/Header/OverviewTable.tsx
````typescript
import type { FC } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import { DataTable } from "@/components/ui";
interface OverviewTableProps {
  paPlayer: PaPlayer;
}
/**
 * Renders an overview table for a given player.
 *
 * @param {OverviewTableProps} paPlayer - The player to render the table for.
 * @return {JSX.Element} The rendered overview table.
 */
const OverviewTable: FC<OverviewTableProps> = ({ paPlayer }) => {
  const columns = [
    { label: "Crystal", accessor: "crystal" },
    { label: "Titanium", accessor: "metal" },
    { label: "Energy", accessor: "energy" },
    { label: "Houses", accessor: "asteroid_crystal" },
    { label: "Mines", accessor: "asteroid_metal" },
    { label: "Undeveloped", accessor: "ui_roids" },
    { label: "Rank", accessor: "rank" },
  ];
  const caption = `Overview for ${paPlayer?.nick}`;
  return <DataTable columns={columns} data={[paPlayer]} caption={caption} />;
};
export default OverviewTable;
````

## File: game/src/components/common/Layout/Footer.tsx
````typescript
import { IconContext } from "react-icons";
import { BiCopyright } from "react-icons/bi";
/**
 * Renders the footer for the application
 * @function Footer
 * @returns {JSX.Element} - Rendered Hamburger component
 */
const Footer = () => (
  <footer
    aria-label="Innholdet for bunnteksten med copyright"
    data-testid="footer"
    className="fixed bottom-0 hidden w-full md:block"
  >
    <div className="w-full bg-gray-800 shadow">
      <div className="mx-auto inline-block w-full p-6 text-center font-semibold text-white">
        Copyright killaH
        <IconContext.Provider value={{ className: "inline-block m-2" }}>
          <BiCopyright size="1.2em" />
        </IconContext.Provider>
        {new Date().getFullYear()}
      </div>
    </div>
  </footer>
);
export default Footer;
````

## File: game/src/components/common/Layout/index.ts
````typescript
export { default as Footer } from "./Footer";
export { default as Layout } from "./Layout";
````

## File: game/src/components/common/Layout/Layout.tsx
````typescript
import Head from "next/head";
import { SignedIn } from "@clerk/nextjs";
import type { ReactNode } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import Navbar from "@/components/common/Header/Navbar";
import Information from "@/components/common/Header/Information";
import Footer from "./Footer";
interface ILayoutProps {
  paPlayer?: PaPlayer;
  children: ReactNode;
}
/**
 * Renders the layout for the page by including the Navbar, Information, Footer
 * and the main content area.
 * Uses the paPlayer parameter to display the player information from the API.
 *
 * @param {Object} ILayoutProps - The props object containing paPlayer and children.
 * @param {Object} ILayoutProps.paPlayer - The player object containing player information.
 * @param {ReactNode} ILayoutProps.children - The children components to be rendered.
 *
 * @return {JSX.Element} The JSX element containing the entire layout.
 */
const Layout = ({ paPlayer, children }: ILayoutProps) => {
  return (
    <>
      <Head>
        <title>Earth Doom - www.earthdoom.com</title>
        <meta name="description" content="Generated by Earth Doom" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <SignedIn>
        <Information paPlayer={paPlayer} />
      </SignedIn>
      <main className="mb-8 flex items-center justify-center md:mb-0 lg:px-[5rem] 2xl:px-0">
        {children}
      </main>
      <Footer />
    </>
  );
};
export default Layout;
````

## File: game/src/components/common/Loader/LoadingSpinner.tsx
````typescript
const LoadingSpinner = () => (
  <>
    <svg
      aria-hidden="true"
      className="mr-2 h-12 w-12 animate-spin fill-blue-600 text-gray-200 dark:text-gray-600"
      viewBox="0 0 100 101"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
        fill="currentColor"
      />
      <path
        d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
        fill="currentFill"
      />
    </svg>
    <span className="sr-only">Loading...</span>
  </>
);
export default LoadingSpinner;
````

## File: game/src/components/common/Button.tsx
````typescript
import type { ButtonHTMLAttributes } from "react";
interface IButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "primary" | "danger";
  disabled?: boolean;
  extraClasses?: string;
}
/**
 * Button component
 * @param {IButtonProps} props - The props for the Button component
 * @returns {JSX.Element} - The Button component
 */
export const Button: React.FC<IButtonProps> = ({
  children,
  variant = "primary",
  disabled,
  extraClasses = "",
  ...rest
}) => {
  let bgColor: string;
  let hoverBgColor: string;
  if (variant === "primary") {
    bgColor = "bg-primary";
    hoverBgColor = "bg-primary-600";
  } else {
    bgColor = "bg-danger";
    hoverBgColor = "bg-danger-600";
  }
  const classNames = `disabled:opacity-50 inline-block rounded p-8 w-32 pb-2 pt-2.5 text-sm leading-normal text-white transition duration-150 ease-in-out ${extraClasses} ${bgColor} hover:${hoverBgColor} focus:${hoverBgColor}}}`;
  return (
    <button disabled={disabled} className={classNames} {...rest}>
      {children}
    </button>
  );
};
export default Button;
````

## File: game/src/components/features/Alliance/Alliance.tsx
````typescript
import { useRef } from "react";
import { Button } from "@/components/ui";
import type { PaUsers, PaTag } from "@prisma/client";
import type { FC } from "react";
import { api } from "@/utils/api";
import ToastComponent from "@/components/ui/notifications/ToastComponent";
interface IAllianceProps {
  paPlayer: PaUsers;
  paTag: PaTag[];
}
/**
 * Renders a form for creating, joining, and leaving an alliance.
 * @param {Object} props - The component props.
 * @param {PaUsers} props.paPlayer - The player object.
 * @param {PaTag[]} props.paTag - The array of tags.
 * @returns {JSX.Element} - The rendered component.
 */
const Alliance: FC<IAllianceProps> = ({ paPlayer, paTag }) => {
  const ctx = api.useContext();
  const createAllianceRef = useRef<HTMLInputElement>(null);
  const joinAllianceRef = useRef<HTMLInputElement>(null);
  const isLeader =
    paTag.find((tag: PaTag) => tag.leader === paPlayer.nick) !== undefined;
  const player = paPlayer.nick;
  const allianceTag = paTag.find(
    (tag: { leader: string }) => tag.leader === player,
  );
  const alliancePassword = allianceTag ? allianceTag.password : null;
  const { mutate: createAlliance, isLoading: isCreateAllianceLoading } =
    api.paTag.createAlliance.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "Alliance created", type: "success" });
        await ctx.paTag.getAll.invalidate();
        await ctx.paTag.getAll.refetch();
        await ctx.paUsers.getPlayerByNick.invalidate();
        await ctx.paUsers.getPlayerByNick.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Database error", type: "error" });
      },
    });
  const { mutate: joinAlliance, isLoading: isJoinAllianceLoading } =
    api.paTag.joinAlliance.useMutation({
      onSuccess: async (result: string) => {
        if (result === "Wrong password") {
          ToastComponent({ message: result, type: "error" });
          return;
        }
        ToastComponent({ message: "Alliance joined", type: "success" });
        await ctx.paTag.getAll.invalidate();
        await ctx.paTag.getAll.refetch();
        await ctx.paUsers.getPlayerByNick.invalidate();
        await ctx.paUsers.getPlayerByNick.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Database error", type: "error" });
      },
    });
  const { mutate: leaveAlliance, isLoading: isLeaveAllianceLoading } =
    api.paTag.leaveAlliance.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "Alliance left", type: "success" });
        await ctx.paUsers.getPlayerByNick.invalidate();
        await ctx.paUsers.getPlayerByNick.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Database error", type: "error" });
      },
    });
  return (
    <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
      <div className="relative py-4 sm:mx-auto">
        <div className="mx-auto max-w-7xl px-4 pb-8 pt-4 sm:px-6 lg:px-8">
          <div className="flex flex-col items-center justify-center">
            <div className="flex w-[20.625rem] items-center justify-center rounded bg-white p-6 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] md:w-[44.563rem] dark:bg-neutral-700">
              <form>
                <h2 className="mb-4 text-center text-2xl font-bold text-black">
                  Alliance{" "}
                  {paPlayer.tag && (
                    <>
                      - {isLeader ? "leader" : "member"} of {paPlayer.tag}
                    </>
                  )}
                </h2>
                {isLeader && paPlayer.tag && (
                  <div className="relative mt-2 w-64">
                    <h2 className="mb-4 text-center text-2xl font-bold text-black">
                      Password: {alliancePassword}
                    </h2>
                  </div>
                )}
                {!paPlayer.tag && (
                  <>
                    <div className="relative mt-2 w-64">
                      <input
                        type="text"
                        className="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
                        id="exampleInputEmail1"
                        aria-describedby="emailHelp"
                        pattern="[A-Za-z]+"
                        title="Please enter letters only"
                        ref={createAllianceRef}
                      />
                      <label
                        htmlFor="exampleInputEmail1"
                        className="mb-2 block py-2 text-sm font-bold text-gray-500"
                      >
                        Create alliance
                      </label>
                    </div>
                    <div className="flex items-center justify-center">
                      <Button
                        extraClasses="mb-4"
                        disabled={
                          isCreateAllianceLoading ||
                          isLeaveAllianceLoading ||
                          isJoinAllianceLoading
                        }
                        onClick={(event: { preventDefault: () => void }) => {
                          event.preventDefault();
                          if (!createAllianceRef?.current?.value) {
                            ToastComponent({
                              message: "You need to type something",
                              type: "error",
                            });
                            return;
                          }
                          createAlliance({
                            Userid: paPlayer.id,
                            tagName: createAllianceRef.current.value,
                          });
                        }}
                      >
                        Create
                      </Button>
                    </div>
                  </>
                )}
                {paPlayer.tag && (
                  <div className="flex items-center justify-center">
                    <Button
                      disabled={
                        isCreateAllianceLoading ||
                        isLeaveAllianceLoading ||
                        isJoinAllianceLoading
                      }
                      extraClasses="mb-4"
                      onClick={(event: { preventDefault: () => void }) => {
                        event.preventDefault();
                        leaveAlliance({
                          Userid: paPlayer.id,
                        });
                      }}
                    >
                      Leave
                    </Button>
                  </div>
                )}
                <div className="relative mt-2 w-64">
                  <input
                    type="text"
                    className="focus:shadow-outline w-full appearance-none rounded border px-3 py-2 leading-tight text-gray-700 shadow focus:outline-none"
                    id="exampleInputEmail1"
                    aria-describedby="emailHelp"
                    pattern="[A-Za-z]+"
                    title="Please enter letters only"
                    ref={joinAllianceRef}
                  />
                  <label
                    htmlFor="exampleInputEmail1"
                    className="mb-2 block py-2 text-sm font-bold text-gray-500"
                  >
                    Join alliance
                  </label>
                </div>
                <div className="flex items-center justify-center">
                  <Button
                    extraClasses="mb-4"
                    disabled={
                      isCreateAllianceLoading ||
                      isLeaveAllianceLoading ||
                      isJoinAllianceLoading
                    }
                    onClick={(event: { preventDefault: () => void }) => {
                      event.preventDefault();
                      if (!joinAllianceRef?.current?.value) {
                        ToastComponent({
                          message: "You need to type something",
                          type: "error",
                        });
                        return;
                      }
                      joinAlliance({
                        Userid: paPlayer.id,
                        tagPassword: joinAllianceRef.current.value,
                      });
                    }}
                  >
                    Join
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
export default Alliance;
````

## File: game/src/components/features/Alliance/index.ts
````typescript
export { default } from "./Alliance";
````

## File: game/src/components/features/Construct/constants/BUILDINGS.tsx
````typescript
import type { Building } from "../types/types";
export const BUILDINGS: Building[] = [
  {
    buildingId: 1,
    buildingName: "Tax collectors",
    buildingDescription:
      "Automatically collects tax from civilians. Taxes generate credits which you need to produce units, do research and more.",
    buildingFieldName: "c_crystal",
    buildingETA: 10,
    buildingCost: "Free",
    buildingCostCrystal: 0,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 2,
    buildingName: "Titanium extractor",
    buildingDescription:
      "Enables titanium extractor, which gives you titanium each tick. ",
    buildingFieldName: "c_metal",
    buildingETA: 20,
    buildingCost: "500c",
    buildingCostCrystal: 500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 3,
    buildingName: "Fusion power plant",
    buildingDescription:
      "Enables construction of fusion power plants, which generate energy.",
    buildingFieldName: "c_energy",
    buildingETA: 50,
    buildingCost: "5000c",
    buildingCostCrystal: 5000,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 4,
    buildingName: "Barracks",
    buildingDescription: "Enables training of Light Infantry.",
    buildingFieldName: "c_airport",
    buildingETA: 20,
    buildingCost: "2500c 1000t",
    buildingCostCrystal: 2500,
    buildingCostTitanium: 1000,
  },
  {
    buildingId: 5,
    buildingName: "Robot Factory",
    buildingDescription: "Enables building of advanced robots.",
    buildingFieldName: "c_abase",
    buildingETA: 40,
    buildingCost: "5000c 3000t",
    buildingCostCrystal: 5000,
    buildingCostTitanium: 3000,
  },
  {
    buildingId: 6,
    buildingName: "Hellspawn factory",
    buildingDescription: "Enables building of Hellspawns.",
    buildingFieldName: "c_destfact",
    buildingETA: 120,
    buildingCost: "10000c 10000t",
    buildingCostCrystal: 10000,
    buildingCostTitanium: 10000,
  },
  {
    buildingId: 7,
    buildingName: "BDU factory",
    buildingDescription: "Enables building of Base Defence Units.",
    buildingFieldName: "c_odg",
    buildingETA: 120,
    buildingCost: "20000c 20000t",
    buildingCostCrystal: 20000,
    buildingCostTitanium: 20000,
  },
];
````

## File: game/src/components/features/Construct/types/types.tsx
````typescript
export interface Building {
  [key: string]: string | number | JSX.Element | undefined;
  buildingId: number;
  buildingName: string;
  buildingDescription: string;
  buildingFieldName: string;
  buildingETA: number;
  buildingConstruct?: JSX.Element;
  buildingCost: string;
  buildingCostCrystal: number;
  buildingCostTitanium: number;
}
````

## File: game/src/components/features/ContNews/ContNewsTable.tsx
````typescript
import { Toaster } from "react-hot-toast";
import type { FC } from "react";
import type { PaNews } from "@prisma/client";
import { Button } from "@/components/ui";
interface INewsTableProps {
  news: PaNews[];
}
const NewsTable: FC<INewsTableProps> = ({ news }) => {
  return (
    <table className="min-w-full text-left text-sm font-light">
      <thead className="border-b font-medium dark:border-neutral-500">
        <tr>
          <th scope="col" className="px-6 py-4">
            ID
          </th>
          <th scope="col" className="px-6 py-4">
            Title
          </th>
          <th scope="col" className="px-6 py-4">
            Content
          </th>
          <th scope="col" className="px-6 py-4">
            Delete
          </th>
        </tr>
      </thead>
      <tbody>
        {news?.map((news) => (
          <tr key={news.id} className="border-b dark:border-neutral-500">
            <td className="whitespace-nowrap px-6 py-4 font-medium">
              {news.id}
            </td>
            <td className="whitespace-nowrap px-6 py-4">{news.header}</td>
            <td className="whitespace-nowrap px-6 py-4">{news.news}</td>
            <td className="whitespace-nowrap px-6 py-4">
              <Button
                type="button"
                className="inline-block rounded bg-danger px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#dc4c64] transition duration-150 ease-in-out hover:bg-danger-600 hover:shadow-[0_8px_9px_-4px_rgba(220,76,100,0.3),0_4px_18px_0_rgba(220,76,100,0.2)] focus:bg-danger-600 focus:shadow-[0_8px_9px_-4px_rgba(220,76,100,0.3),0_4px_18px_0_rgba(220,76,100,0.2)] focus:outline-none focus:ring-0 active:bg-danger-700 active:shadow-[0_8px_9px_-4px_rgba(220,76,100,0.3),0_4px_18px_0_rgba(220,76,100,0.2)]"
                onClick={() => alert(news.id)}
              >
                Delete
              </Button>
              <Toaster />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};
export default NewsTable;
````

## File: game/src/components/features/ContNews/index.ts
````typescript
export { default } from "./ContNewsTable";
````

## File: game/src/components/features/Energy/constants/ENERGY.tsx
````typescript
export const ENERGY = [
  {
    buildingId: 1,
    buildingName: "Power plant",
    buildingDescription:
      "Power plants are used to generate energy. Energy is used to power your base and units.",
    buildingFieldName: "sats",
    buildingRequirement: "r_energy",
    buildingETA: 10,
    buildingCost: "9500t",
    buildingCostCrystal: 0,
    buildingCostTitanium: 9500,
    /* Extra rendering checks */
    needsFieldName: 0,
    hasInputField: 1,
  },
];
````

## File: game/src/components/features/Mail/index.ts
````typescript
export { default } from "./MailTable";
````

## File: game/src/components/features/Mail/MailTable.tsx
````typescript
import { Button, ToastComponent } from "@/components/ui";
import type { FC } from "react";
import type { PaMail } from "@prisma/client";
import { api } from "@/utils/api";
import { format } from "date-fns";
interface IMailTableProps {
  mail: PaMail[];
}
/**
 * Renders a table of emails and allows the user to delete individual emails.
 *
 * @param {IMailTableProps} mail - the list of emails to display
 * @return {JSX.Element} - the email table component
 */
const MailTable: FC<IMailTableProps> = ({ mail }) => {
  const ctx = api.useContext();
  const { mutate: deleteSingleMail, isLoading: isDeletingMail } =
    api.paMail.deleteEmail.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "Mail deleted", type: "success" });
        await ctx.paMail.getAllMailByNick.invalidate();
        await ctx.paMail.getAllMailByNick.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Failed to delete", type: "error" });
      },
    });
  return (
    <>
      {mail && mail.length > 0 && (
        <table className="min-w-full text-left text-sm font-light">
          <thead className="border-b font-medium dark:border-neutral-500">
            <tr>
              <th
                scope="col"
                className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
              >
                Sent
              </th>
              <th
                scope="col"
                className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
              >
                Title
              </th>
              <th
                scope="col"
                className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
              >
                Content
              </th>
              <th
                scope="col"
                className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
              >
                Delete
              </th>
            </tr>
          </thead>
          <tbody>
            {mail.map((mail) => (
              <tr key={mail.id} className="border-b dark:border-neutral-500">
                <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                  {format(new Date(mail.time * 1000), "dd/MM-yyyy HH:mm:ss")}
                </td>
                <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                  {mail.header}
                </td>
                <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                  {mail.news}
                </td>
                <td className="flex h-12 items-center px-6 py-2 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':']  first:border-l-0 sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                  <Button
                    disabled={isDeletingMail}
                    variant="danger"
                    onClick={() => {
                      deleteSingleMail({ id: mail.id });
                    }}
                  >
                    Delete
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
      {mail.length === 0 && (
        <h1 className="text-bold p-4 text-center text-2xl text-black">
          No email to display
        </h1>
      )}
    </>
  );
};
export default MailTable;
````

## File: game/src/components/features/Mail/NewMail.tsx
````typescript
import { useRef, useState, useEffect } from "react";
import { api } from "@/utils/api";
import type { FC, ChangeEvent, FormEvent } from "react";
import type { PaUsers } from "@prisma/client";
import { Button, ToastComponent } from "@/components/ui";
export interface PaPlayer extends PaUsers {
  [key: string]: number | string | null;
}
interface INewMailProps {
  paPlayer: PaPlayer;
  recipient?: string;
}
interface IHandleInputChange {
  (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void;
}
/**
 * Renders a form for sending a mail.
 *
 * @param {INewMailProps} props - The component props.
 * @return {FC} The mail form component.
 */
const NewMail: FC<INewMailProps> = ({ paPlayer, recipient }) => {
  const ctx = api.useContext();
  const [mailTarget, setMailTarget] = useState(recipient || "");
  const [mailContent, setMailContent] = useState("");
  const [mailHeader, setMailHeader] = useState("");
  const formRef = useRef<HTMLFormElement>(null);
  // Update mailTarget when recipient prop changes
  useEffect(() => {
    if (recipient) {
      setMailTarget(recipient);
    }
  }, [recipient]);
  const { mutate: sendMail, isLoading } = api.paMail.sendMail.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Mail sent!", type: "success" });
      await ctx.paMail.getAllMailByNick.invalidate();
      await ctx.paMail.getAllMailByNick.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Error ...", type: "error" });
    },
  });
  const handleInputMailTargetChange: IHandleInputChange = (event) => {
    setMailTarget(event.target.value);
  };
  const handleInputMailContentChange: IHandleInputChange = (event) => {
    setMailContent(event.target.value);
  };
  const handleInputMailHeaderChange: IHandleInputChange = (event) => {
    setMailHeader(event.target.value);
  };
  const handleMailSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    formRef.current?.reset();
    sendMail({
      nick: mailTarget,
      news: mailContent,
      header: mailHeader,
    });
  };
  return (
    <div className="flex flex-col items-center justify-center py-4">
      <div className="w-full">
        <form ref={formRef} onSubmit={handleMailSubmit}>
          <div className="mb-4 rounded-lg bg-white px-8 py-5 shadow-md">
            <h2 className="py-4 text-center text-xl font-bold">Mail</h2>
            <div className="flex flex-col items-center justify-center">
              <label className="text-md py-4" htmlFor="nick">
                Nick:
              </label>
              <input
                type="text"
                id="nick"
                name="attack"
                value={mailTarget}
                onChange={handleInputMailTargetChange}
                className="w-64 rounded-md border border-gray-300 px-3 py-2"
                required
              />
              <label className="text-md py-4" htmlFor="title">
                Title:
              </label>
              <input
                type="text"
                id="title"
                name="attack"
                onChange={handleInputMailHeaderChange}
                className="w-64 rounded-md border border-gray-300 px-3 py-2"
                required
              />
              <label className="text-md py-4" htmlFor="content">
                Content:
              </label>
              <textarea
                id="content"
                name="attack"
                onChange={handleInputMailContentChange}
                className="w-64 rounded-md border border-gray-300 px-3 py-2"
                required
              />
              <Button disabled={isLoading} extraClasses="w-32 mt-4">
                Send
              </Button>
            </div>
          </div>
        </form>
      </div>
    </div>
  );
};
export default NewMail;
````

## File: game/src/components/features/Military/index.ts
````typescript
export { default } from "./Military";
````

## File: game/src/components/features/Military/Military.tsx
````typescript
import { useState } from "react";
import { api } from "@/utils/api";
import type { FC, ChangeEvent } from "react";
import type { PaUsers } from "@prisma/client";
import { Button, ToastComponent } from "@/components/ui";
export interface PaPlayer extends PaUsers {
  [key: string]: number | string | null;
}
interface IMilitaryProps {
  paPlayer: PaPlayer;
}
interface IHandleInputChange {
  (event: ChangeEvent<HTMLInputElement>): void;
}
const Military: FC<IMilitaryProps> = ({ paPlayer }) => {
  const ctx = api.useContext();
  const [attackValue, setAttackValue] = useState<string>("");
  const [defValue, setDefValue] = useState<string>("");
  const areTroopsAvailable =
    Number(paPlayer.war) === 0 && Number(paPlayer.def) === 0;
  const { mutate: addNews } = api.paNews.addNews.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "News added", type: "success" });
      await ctx.paNews.getAllNewsByUserId.invalidate();
      await ctx.paNews.getAllNewsByUserId.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Error ...", type: "error" });
    },
  });
  const { data: targetedPlayer } = api.paUsers.getPlayerByNick.useQuery(
    {
      nick: attackValue || defValue,
    },
    {
      enabled: attackValue.length > 3 || defValue.length > 3,
    },
  );
  const { mutate: militaryAction, isLoading } =
    api.paMilitary.militaryAction.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "Troops are on their way", type: "success" });
        await ctx.paUsers.getPlayerByNick.invalidate();
        await ctx.paUsers.getPlayerByNick.refetch();
        if (targetedPlayer && attackValue) {
          addNews({
            sentTo: targetedPlayer.id,
            news: `${paPlayer.nick} is attacking you, ETA 30 mins`,
            header: "Incoming hostile fleet",
          });
        }
        if (targetedPlayer && defValue) {
          addNews({
            sentTo: targetedPlayer.id,
            news: `${paPlayer.nick} is defending you, ETA 25 mins`,
            header: "Incoming defending fleet",
          });
        }
      },
      onError: () => {
        ToastComponent({ message: "Error ...", type: "error" });
      },
    });
  const { mutate: retreatTroops } = api.paMilitary.retreatTroops.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Troops are returning", type: "success" });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Error ...", type: "error" });
    },
  });
  const handleInputAttackChange: IHandleInputChange = (event) => {
    setAttackValue(event.target.value);
  };
  const handleInputDefChange: IHandleInputChange = (event) => {
    setDefValue(event.target.value);
  };
  const allFleetsAtHome = paPlayer && paPlayer.war === 0 && paPlayer.def === 0;
  const shipCount =
    paPlayer["astropods"] +
    paPlayer["infinitys"] +
    paPlayer["wraiths"] +
    paPlayer["warfrigs"] +
    paPlayer["destroyers"] +
    paPlayer["scorpions"];
  const energyCost = 9 * shipCount;
  const shouldShowRetreatButton =
    !allFleetsAtHome && shipCount > 0 && paPlayer.war > 0;
  return (
    <div className="flex flex-col items-center justify-center py-5">
      <div className="w-full">
        {shouldShowRetreatButton && (
          <>
            <div className="mb-4 flex flex-col items-center justify-center rounded bg-white px-8 py-5 shadow md:w-[44.563rem]">
              <h2 className="py-4 text-center text-xl font-bold">
                Retreat troops:
              </h2>
              <Button
                extraClasses="mt-4 mb-4"
                disabled={isLoading}
                onClick={(event) => {
                  event.preventDefault();
                  retreatTroops({
                    Userid: paPlayer.id,
                  });
                }}
              >
                Retreat
              </Button>
            </div>
          </>
        )}
        {allFleetsAtHome && shipCount > 0 ? (
          <div className="mb-4 rounded-lg bg-white px-8 py-5 shadow-md">
            <h2 className="py-4 text-center text-xl font-bold">
              Cost to attack: {energyCost} energy
              <br />
              (defending is free)
            </h2>
            <h2 className="py-4 text-center text-xl font-bold">Attack:</h2>
            <div className="mt-4 flex flex-col items-center justify-center">
              <span className="text-md mb-2">Country nick:</span>
              <input
                type="text"
                name="attack"
                onChange={handleInputAttackChange}
                className="w-64 rounded-md border border-gray-300 px-3 py-2"
              />
              <Button
                disabled={isLoading}
                onClick={(event) => {
                  event.preventDefault();
                  if (!attackValue.trim().length) {
                    ToastComponent({
                      message: "You need to enter a target",
                      type: "error",
                    });
                    return;
                  }
                  if (paPlayer.energy < energyCost) {
                    ToastComponent({
                      message: "You need more energy to attack",
                      type: "error",
                    });
                    return;
                  }
                  if (!areTroopsAvailable) {
                    ToastComponent({
                      message: "Troops are not available",
                      type: "error",
                    });
                    return;
                  }
                  militaryAction({
                    Userid: paPlayer.id,
                    target: attackValue,
                    energyCost: energyCost,
                    mode: "attack",
                  });
                }}
                extraClasses="w-32 mt-4"
              >
                Attack
              </Button>
            </div>
            <h2 className="py-4 text-center text-xl font-bold">Defend:</h2>
            <form className="mt-4 flex flex-col items-center justify-center">
              <span className="text-md mb-2">Country nick:</span>
              <input
                type="text"
                name="defend"
                onChange={handleInputDefChange}
                className="w-64 rounded-md border border-gray-300 px-3 py-2"
              />
              <Button
                disabled={isLoading}
                extraClasses="w-32 mt-4"
                onClick={(event) => {
                  event.preventDefault();
                  if (!defValue.trim().length) {
                    ToastComponent({
                      message: "You need to enter a target",
                      type: "error",
                    });
                    return;
                  }
                  if (!areTroopsAvailable) {
                    ToastComponent({
                      message: "Troops are not available",
                      type: "error",
                    });
                    return;
                  }
                  militaryAction({
                    Userid: paPlayer.id,
                    target: defValue,
                    mode: "defend",
                  });
                }}
              >
                Defend
              </Button>
            </form>
          </div>
        ) : null}
      </div>
    </div>
  );
};
export default Military;
````

## File: game/src/components/features/News/CombatReport.tsx
````typescript
export interface CombatReportProps {
  title: string;
  defenders: {
    [key: string]: {
      total: number;
      lost: string;
    };
  };
  attackers: {
    [key: string]: {
      total: number;
      lost: string;
    };
  };
  yours: {
    [key: string]: number | string;
  };
  land: {
    [key: string]: number | string;
  };
  time: string;
}
const CombatReport: React.FC<CombatReportProps> = ({
  title,
  defenders,
  attackers,
  yours,
  land,
  time,
}) => {
  const renderRow = (name: string, data: { total: number; lost: string }) => (
    <tr className="block border-b p-4 last:border-b-0 sm:table-row sm:border-none md:p-0">
      <td className="h-12 w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
        {name}
      </td>
      <td className="h-12 w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
        {data.total}
      </td>
      <td className="h-12 w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
        {data.lost}
      </td>
    </tr>
  );
  return (
    <table className="py-6 text-left ring-1 ring-slate-400/10 md:w-full">
      <caption className="bg-slate-400/90 py-4 text-center text-xl font-bold text-black">
        {title} - {time}
      </caption>
      <thead>
        <tr className="block border-b bg-white p-4 last:border-b-0 sm:table-row sm:border-none md:p-0">
          <th className="h-12 px-6 pl-[2.2rem] text-center text-base font-bold text-black first:border-l-0 sm:table-cell md:pl-4">
            Unit
          </th>
          <th className="h-12  px-6 pl-[2.2rem] text-center text-base font-bold text-black first:border-l-0 sm:table-cell md:pl-4">
            Total
          </th>
          <th className="h-12  px-6 pl-[2.2rem] text-center text-base font-bold text-black first:border-l-0 sm:table-cell md:pl-4">
            Lost
          </th>
        </tr>
      </thead>
      <tbody>
        <tr className="block last:border-b-0 sm:table-row sm:border-none md:p-0">
          <td className="flex h-12 items-center bg-slate-300/90 px-6 text-center text-base font-bold text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black  first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
            Defenders
          </td>
          <td className="bg-slate-300/90"></td>
          <td className="bg-slate-300/90"></td>
        </tr>
        {Object.entries(defenders).map(([name, data]) => renderRow(name, data))}
        <tr className="block last:border-b-0 sm:table-row sm:border-none md:p-0">
          <td className="flex h-12 items-center bg-slate-300/90 px-6 text-center text-base font-bold text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black  first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
            Attackers
          </td>
          <td className="bg-slate-300/90"></td>
          <td className="bg-slate-300/90"></td>
        </tr>
        {Object.entries(attackers).map(([name, data]) => renderRow(name, data))}
        <tr className="block last:border-b-0 sm:table-row sm:border-none md:p-0">
          <td className="flex h-12  items-center bg-slate-300/90 px-6 text-center text-base font-bold text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black  first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
            Yours
          </td>
          <td className="bg-slate-300/90"></td>
          <td className="bg-slate-300/90"></td>
        </tr>
        {Object.entries(yours).map(([name, value]) => (
          <tr
            className="block border-b p-4 last:border-b-0 sm:table-row sm:border-none md:p-0"
            key={name}
          >
            <td className="h-12  w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
              {name}
            </td>
            <td className="h-12  w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
              {value}
            </td>
          </tr>
        ))}
        <tr className="block last:border-b-0 sm:table-row sm:border-none md:p-0">
          <td className="flex h-12 items-center bg-slate-300/90 px-6 text-center text-base font-bold text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black  first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
            Land captures
          </td>
          <td className="bg-slate-300/90"></td>
          <td className="bg-slate-300/90"></td>
        </tr>
        {Object.entries(land).map(([name, value]) => (
          <tr
            className="block border-b p-4 last:border-b-0 sm:table-row sm:border-none md:p-0"
            key={name}
          >
            <td className="h-12  w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
              {name}
            </td>
            <td className="h-12  w-[6.25rem] text-center text-base text-black transition duration-300  before:font-medium before:text-black first:border-l-0 sm:border-l sm:border-t">
              {value}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};
export default CombatReport;
````

## File: game/src/components/features/News/index.ts
````typescript
export { default as NewsTable } from "./NewsTable";
export { default as CombatReport } from "./CombatReport";
````

## File: game/src/components/features/News/NewsTable.tsx
````typescript
import React from "react";
import { Button, ToastComponent } from "@/components/ui";
import type { FC } from "react";
import type { PaNews } from "@prisma/client";
import { api } from "@/utils/api";
import { format } from "date-fns";
interface INewsTableProps {
  isDeletingAll: boolean;
  news: PaNews[];
}
const NewsTable: FC<INewsTableProps> = ({ news, isDeletingAll }) => {
  const ctx = api.useContext();
  const { mutate: deleteSingleNews, isLoading: isDeleting } =
    api.paNews.deleteSingleNews.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "News deleted", type: "success" });
        await ctx.paNews.getAllNewsByUserId.invalidate();
        await ctx.paNews.getAllNewsByUserId.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Database error", type: "error" });
      },
    });
  const isOnlyCombatReport = news.every(
    ({ header }) => header === "Combat report",
  );
  if (isOnlyCombatReport)
    return (
      <h2 className="py-4 text-right text-xl font-bold">
        No general news to display
      </h2>
    );
  return (
    <>
      <table className="min-w-full text-left text-sm font-light">
        <thead className="border-b font-medium dark:border-neutral-500">
          <tr>
            <th
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              Time
            </th>
            <th
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              Title
            </th>
            <th
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              Content
            </th>
            <th
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              Delete
            </th>
          </tr>
        </thead>
        <tbody>
          {news?.map(
            (news) =>
              news.header !== "Combat report" && (
                <tr key={news.id} className="border-b dark:border-neutral-500">
                  <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                    {format(new Date(news.time * 1000), "dd/MM-yyyy HH:mm:ss")}
                  </td>
                  <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                    {news.header}
                  </td>
                  <td className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                    {news.news}
                  </td>
                  <td className="flex h-12 items-center px-6 py-2 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':']  first:border-l-0 sm:table-cell sm:border-l sm:border-t sm:before:content-none">
                    <Button
                      disabled={isDeleting || isDeletingAll}
                      variant="danger"
                      onClick={() => {
                        deleteSingleNews({ id: news.id });
                      }}
                    >
                      Delete
                    </Button>
                  </td>
                </tr>
              ),
          )}
        </tbody>
      </table>
    </>
  );
};
export default NewsTable;
````

## File: game/src/components/features/Production/constants/PRODUCTION.tsx
````typescript
export const PRODUCTION = [
  {
    buildingId: 1,
    buildingName: "Light infantry",
    buildingDescription:
      "Light infantry is a quick unit that is good for hit and run techniques. What it lacks in firepower, it makes up with it with his speed and agility.",
    buildingFieldName: "p_infinitys",
    buildingFieldNameETA: "p_infinitys_eta",
    buildingRequirement: "c_airport",
    buildingETA: 10,
    buildingCost: "300c",
    buildingCostCrystal: 300,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 2,
    buildingName: "Shadow",
    buildingDescription:
      "Shadows are heavier versions of Light Infantry. Very good against Ares and Hellspawns.",
    buildingFieldName: "p_wraiths",
    buildingFieldNameETA: "p_wraiths_eta",
    buildingRequirement: "c_airport",
    buildingETA: 10,
    buildingCost: "300c",
    buildingCostCrystal: 300,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 3,
    buildingName: "Heavy Infantry",
    buildingDescription:
      "Heavy Infantry is a slow but powerful unit that is good for frontal assaults.",
    buildingFieldName: "p_cobras",
    buildingFieldNameETA: "p_cobras_eta",
    buildingRequirement: "c_abase",
    buildingETA: 15,
    buildingCost: "500c",
    buildingCostCrystal: 500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 4,
    buildingName: "Goliaths",
    buildingDescription:
      "Using the latest in fusion powered propulsion systems and plasma cannons, the Goliath Tank provides the backbone of many armies.",
    buildingFieldName: "p_warfrigs",
    buildingFieldNameETA: "p_warfrigs_eta",
    buildingRequirement: "c_abase",
    buildingETA: 20,
    buildingCost: "1000c",
    buildingCostCrystal: 1000,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 5,
    buildingName: "Grabber",
    buildingDescription:
      "The grabber is the only unit that can claim land in combat. Be sure to build many of those before attacking",
    buildingFieldName: "p_astropods",
    buildingFieldNameETA: "p_astropods_eta",
    buildingRequirement: "c_abase",
    buildingETA: 30,
    buildingCost: "1500c",
    buildingCostCrystal: 1500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 6,
    buildingName: "Hellspawns",
    buildingDescription:
      "The hellspawn class robot is a special type designed for combat. It is effective against Light Infantry and Goliath.",
    buildingFieldName: "p_destroyers",
    buildingFieldNameETA: "p_destroyers_eta",
    buildingRequirement: "c_destfact",
    buildingETA: 30,
    buildingCost: "1500c",
    buildingCostCrystal: 1500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 7,
    buildingName: "Reaper",
    buildingDescription:
      "The reaper cannon is a general purpose cannon which is extremely effective against grabbers and light units.",
    buildingFieldName: "p_rcannons",
    buildingFieldNameETA: "p_rcannons_eta",
    buildingRequirement: "c_odg",
    buildingETA: 30,
    buildingCost: "1500c",
    buildingCostCrystal: 1500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 8,
    buildingName: "Avengers",
    buildingDescription:
      "Using a mounted Tachyon Particle Disrupter, the avenger is effective against medium-sized units like the Goliath.",
    buildingFieldName: "p_avengers",
    buildingFieldNameETA: "p_avengers_eta",
    buildingRequirement: "c_odg",
    buildingETA: 30,
    buildingCost: "1500c",
    buildingCostCrystal: 1500,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 9,
    buildingName: "Lucius",
    buildingDescription:
      "The Lucius are large slow firing cannons that use physical rounds instead of energy weapons.It is effective against the larger robots.",
    buildingFieldName: "p_lstalkers",
    buildingFieldNameETA: "p_lstalkers_eta",
    buildingRequirement: "c_odg",
    buildingETA: 30,
    buildingCost: "1500c",
    buildingCostCrystal: 1500,
    buildingCostTitanium: 0,
  },
];
````

## File: game/src/components/features/Production/types/types.tsx
````typescript
export interface IProduction {
  buildingId: number;
  buildingName: string;
  buildingDescription: string;
  buildingFieldName: string;
  buildingFieldNameETA: string;
  buildingRequirement: string;
  buildingETA: number;
  buildingConstruct?: JSX.Element;
  buildingCost: string;
  buildingCostCrystal: number;
  buildingCostTitanium: number;
}
````

## File: game/src/components/features/Production/index.ts
````typescript
export { default } from "./Production";
````

## File: game/src/components/features/Production/Production.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import { useRef } from "react";
import { Button, ToastComponent } from "@/components/ui";
import type { FC } from "react";
import type { IProduction } from "./types/types";
import type { PaPlayer } from "../Military/Military";
import { PRODUCTION } from "./constants/PRODUCTION";
import { api } from "@/utils/api";
import { canAffordToTrain, maximumToTrain } from "@/utils/functions";
interface BuildingRowProps {
  paPlayer: PaPlayer;
  production: IProduction;
}
export interface ConstructProps {
  paPlayer: PaPlayer;
}
const ProductionRow: FC<BuildingRowProps> = ({ paPlayer, production }) => {
  const ctx = api.useContext();
  const { isLoaded } = useUser();
  const unitAmountRef = useRef<HTMLInputElement>(null);
  const { mutate, isLoading } = api.paUsers.produceUnit.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Training started", type: "success" });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Database error", type: "error" });
    },
  });
  if (!isLoaded) {
    return <div>Loading user data...</div>;
  }
  if (paPlayer[production.buildingRequirement] === 0) {
    return null;
  }
  return (
    <tr
      key={production.buildingName}
      className="block border-b bg-white last:border-b-0 sm:table-row sm:border-none"
    >
      <td
        data-th="Name"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {production.buildingName}
      </td>
      <td
        data-th="Info"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        <span className="w-[12.5rem]">{production.buildingDescription}</span>
      </td>
      <td
        data-th="ETA"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {Number(paPlayer[production.buildingFieldName]) >= 1
          ? paPlayer[production.buildingFieldNameETA]
          : production.buildingETA}
      </td>
      <td
        data-th="Production"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {Number(paPlayer[production.buildingFieldName]) > 0 &&
          paPlayer[production.buildingFieldName]}
        {isLoading && "Starting ..."}
        {paPlayer[production.buildingFieldName] === 0 && !isLoading && (
          <input
            type="number"
            aria-label="Amount"
            className="border-1 peer relative block min-h-[auto] w-32 rounded bg-slate-200 px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
            id="exampleFormControlInput1"
            placeholder="Amount"
            ref={unitAmountRef}
            defaultValue={maximumToTrain(paPlayer, production)}
            min="0"
          />
        )}
      </td>
      <td
        data-th="Cost"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {production.buildingCost}
      </td>
      <td
        data-th="Build"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell sm:border-l sm:border-t  sm:before:content-none md:h-12 md:w-[8rem] md:px-4"
      >
        {isLoading && <div className="mb-1">Starting ...</div>}
        {paPlayer[production.buildingFieldName] === 0 && !isLoading && (
          <Button
            onClick={() => {
              if (!paPlayer || !paPlayer.id) {
                return;
              }
              if (Number(unitAmountRef?.current?.value) === 0) {
                ToastComponent({
                  message: "Needs to be more than 0",
                  type: "error",
                });
                return;
              }
              if (
                !canAffordToTrain(
                  [paPlayer],
                  production.buildingCostCrystal,
                  production.buildingCostTitanium,
                  Number(unitAmountRef?.current?.value),
                )
              ) {
                ToastComponent({
                  message: "You can not afford this",
                  type: "error",
                });
                return;
              }
              mutate({
                Userid: Number(paPlayer.id),
                buildingFieldName: production.buildingFieldName,
                buildingFieldNameETA: production.buildingFieldNameETA,
                buildingCostCrystal: production.buildingCostCrystal,
                buildingCostTitanium: production.buildingCostTitanium,
                unitAmount: Number(unitAmountRef?.current?.value),
                buildingETA: production.buildingETA,
              });
            }}
          >
            Train
          </Button>
        )}
        {Number(paPlayer[production.buildingFieldName]) >= 1 &&
          `ETA ${Number(paPlayer[production.buildingFieldNameETA])} ticks`}
      </td>
    </tr>
  );
};
const ProductionTable: FC<ConstructProps> = ({ paPlayer }) => {
  return (
    <table className="mt-2 w-full text-left ring-1 ring-slate-400/10">
      <tbody>
        <tr>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Name
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Description
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90  px-6 text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            ETA
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Amount
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Cost
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Train
          </th>
        </tr>
        {PRODUCTION.map((production) => (
          <ProductionRow
            key={production.buildingId}
            paPlayer={paPlayer}
            production={production}
          />
        ))}
      </tbody>
    </table>
  );
};
const Production: FC<ConstructProps> = ({ paPlayer }) => (
  <ProductionTable paPlayer={paPlayer} />
);
export default Production;
````

## File: game/src/components/features/Research/constants/RESEARCH.tsx
````typescript
export const BUILDINGS = [
  {
    buildingId: 1,
    buildingName: "Improved tax revenue",
    buildingDescription: "Increase tax revenue by 10%",
    buildingFieldName: "r_imcrystal",
    buildingETA: 25,
    buildingCost: "1000c",
    buildingCostCrystal: 1000,
    buildingCostTitanium: 0,
  },
  {
    buildingId: 2,
    buildingName: "Advanced titanium extractor",
    buildingDescription:
      "Enhances existing titanium extractors and increases output by 10%",
    buildingFieldName: "r_immetal",
    buildingETA: 25,
    buildingCost: "1000t",
    buildingCostCrystal: 0,
    buildingCostTitanium: 1000,
  },
  {
    buildingId: 3,
    buildingName: "Fusion power plant",
    buildingDescription:
      "Fusion power plants generate energy to be used mainly for military purposes",
    buildingFieldName: "r_energy",
    buildingETA: 50,
    buildingCost: "5000t",
    buildingCostCrystal: 0,
    buildingCostTitanium: 5000,
  },
  {
    buildingId: 4,
    buildingName: "Advanced tank building",
    buildingDescription: "Enable production of goliaths and grabbers",
    buildingFieldName: "r_aaircraft",
    buildingETA: 60,
    buildingCost: "5000t 5000c",
    buildingCostCrystal: 5000,
    buildingCostTitanium: 5000,
  },
  {
    buildingId: 5,
    buildingName: "EMP beam studies",
    buildingDescription: "Enable production of the medusa",
    buildingFieldName: "r_tbeam",
    buildingETA: 40,
    buildingCost: "5000c 3000t",
    buildingCostCrystal: 5000,
    buildingCostTitanium: 3000,
  },
  /*
  {
    buildingId: 6,
    buildingName: "Unit infiltration",
    buildingDescription: "Enable unit infiltration",
    buildingFieldName: "r_uscan",
    buildingETA: 60,
    buildingCost: "10000c 10000t",
    buildingCostCrystal: 10000,
    buildingCostTitanium: 10000,
  },*/
  {
    buildingId: 7,
    buildingName: "BDU studies",
    buildingDescription: "Enable Base Defence Units",
    buildingFieldName: "r_odg",
    buildingETA: 60,
    buildingCost: "10000t 10000c",
    buildingCostCrystal: 10000,
    buildingCostTitanium: 10000,
  } /*
  {
    buildingId: 8,
    buildingName: "BDU infiltration",
    buildingDescription: "Enable BDU infiltration",
    buildingFieldName: "r_oscan",
    buildingETA: 120,
    buildingCost: "20000c 20000t",
    buildingCostCrystal: 20000,
    buildingCostTitanium: 20000,
  },*/,
];
````

## File: game/src/components/features/Resources/constants/RESOURCE.tsx
````typescript
export const RESOURCE = [
  {
    buildingId: 1,
    buildingName: "Houses",
    buildingDescription:
      "Develop your base by building more houses. Each house can hold 10 people.",
    buildingFieldName: "asteroid_crystal",
    buildingETA: 10,
    buildingCost: "500c",
    buildingCostCrystal: 500,
    buildingCostTitanium: 0,
    /* Extra rendering checks */
    needsFieldName: 0,
    hasInputField: 1,
  },
  {
    buildingId: 2,
    buildingName: "Titanium Mines",
    buildingDescription:
      "Titanium mines are used to mine titanium. Titanium is used to build advanced units and structures.",
    buildingFieldName: "asteroid_metal",
    buildingETA: 10,
    buildingCost: "300c",
    buildingCostCrystal: 300,
    buildingCostTitanium: 0,
    /* Extra rendering checks */
    needsFieldName: 0,
    hasInputField: 1,
  },
];
````

## File: game/src/components/features/Resources/BarGraph.tsx
````typescript
import React from "react";
import { Bar } from "react-chartjs-2";
import { Chart, registerables } from "chart.js";
export interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor: string[];
    borderColor: string[];
    borderWidth: number;
  }[];
}
interface Props {
  chartData: ChartData;
}
Chart.register(...registerables);
const BarChart: React.FC<Props> = ({ chartData }) => {
  const { labels, datasets } = chartData;
  const data = {
    labels,
    datasets,
  };
  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Income",
      },
    },
  };
  return (
    <div className="flex items-center justify-center px-4 py-4 md:h-[16rem]">
      <Bar data={data} options={options} />
    </div>
  );
};
export default BarChart;
````

## File: game/src/components/features/Resources/index.ts
````typescript
export { default as BarGraph } from "./BarGraph";
````

## File: game/src/components/features/Spying/constants/SPYING.tsx
````typescript
export const SPYING = [
  {
    /* Building data */
    buildingId: 1,
    buildingName: "Scout",
    buildingDescription:
      "Scout for undeveloped land. Land is required to build houses and titanium mines to increase your income.",
    buildingFieldName: "ui_roids",
    buildingETA: 0,
    buildingCost: "500c",
    buildingCostCrystal: 500,
    buildingCostTitanium: 0,
    /* Extra rendering checks */
    needsFieldName: 0,
    hasInputField: 1,
  },
];
````

## File: game/src/components/features/Spying/index.ts
````typescript
export { default } from "./SpyingTable";
````

## File: game/src/components/features/Spying/SpyingTable.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import { useRef } from "react";
import { Button, ToastComponent } from "@/components/ui";
import type { FC } from "react";
import type { Building } from "../Construct/types/types";
import type { PaPlayer } from "@/components/features/Military/Military";
import { SPYING } from "./constants/SPYING";
import { api } from "@/utils/api";
import { canAffordToTrain } from "@/utils/functions";
interface BuildingRowProps {
  paPlayer: PaPlayer;
  resource: Building;
}
interface SpyingProps {
  paPlayer: PaPlayer;
}
const SpyingRow: FC<BuildingRowProps> = ({ paPlayer, resource }) => {
  const ctx = api.useContext();
  const { isLoaded } = useUser();
  const spyingAmountRef = useRef<HTMLInputElement>(null);
  const { mutate, isLoading } = api.paSpying.spyingInitiate.useMutation({
    onSuccess: async () => {
      ToastComponent({
        message: "Spying complete",
        type: "success",
      });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({
        message: "Database error",
        type: "error",
      });
    },
  });
  if (!isLoaded) {
    return <div>Loading user data...</div>;
  }
  const numberCrystal = Number(paPlayer.crystal);
  const maximumToSearch = Math.floor(numberCrystal / 500);
  return (
    <tr
      key={resource.buildingName}
      className="block border-b bg-white last:border-b-0 sm:table-row sm:border-none"
    >
      <td
        data-th="Name"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {resource.buildingName}
      </td>
      <td
        data-th="Info"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        <span className="w-[12.5rem]">{resource.buildingDescription}</span>
      </td>
      <td
        data-th="Production"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {isLoading && "Starting ..."}
        {!isLoading && (
          <>
            <input
              type="number"
              aria-label="Amount"
              className="border-1 peer relative block min-h-[auto] w-32 rounded bg-slate-200 px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
              id="exampleFormControlInput1"
              placeholder="Amount"
              ref={spyingAmountRef}
              defaultValue={maximumToSearch}
              min="0"
            />
          </>
        )}
      </td>
      <td
        data-th="Build"
        className="flex items-center px-6 py-2 text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell  sm:border-l sm:border-t sm:before:content-none md:h-12"
      >
        {isLoading && "Starting ..."}
        {!isLoading && (
          <Button
            onClick={() => {
              if (!paPlayer || !paPlayer.id) return;
              if (Number(spyingAmountRef?.current?.value) === 0) {
                ToastComponent({
                  message: "You need to enter a quantity more than 0",
                  type: "error",
                });
                return;
              }
              if (
                !canAffordToTrain(
                  [paPlayer],
                  resource.buildingCostCrystal,
                  resource.buildingCostTitanium,
                  Number(spyingAmountRef?.current?.value),
                )
              ) {
                ToastComponent({
                  message: "You can not afford this",
                  type: "error",
                });
                return;
              }
              mutate({
                Userid: Number(paPlayer.id),
                buildingFieldName: resource.buildingFieldName,
                buildingCostCrystal: resource.buildingCostCrystal,
                buildingCostTitanium: resource.buildingCostTitanium,
                unitAmount: Number(spyingAmountRef?.current?.value),
                buildingETA: 0,
              });
            }}
          >
            Spy
          </Button>
        )}
      </td>
    </tr>
  );
};
const SpyingTable: FC<SpyingProps> = ({ paPlayer }) => {
  return (
    <table className="mt-2 w-full text-left ring-1 ring-slate-400/10">
      <tbody>
        <tr>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Name
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Description
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Amount
          </th>
          <th
            scope="col"
            className="hidden h-12  bg-slate-200/90 px-6  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
          >
            Spy
          </th>
        </tr>
        {SPYING.map((resource) => (
          <SpyingRow
            key={resource.buildingId}
            paPlayer={paPlayer}
            resource={resource}
          />
        ))}
      </tbody>
    </table>
  );
};
const Production: FC<SpyingProps> = ({ paPlayer }) => (
  <SpyingTable paPlayer={paPlayer} />
);
export default Production;
````

## File: game/src/components/ui/notifications/RenderIncoming.tsx
````typescript
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
interface INewsProps {
  isLoading: boolean;
  hostiles?: string;
  friendlies?: string;
}
const HostileNews = ({ content }: { content: string }) => {
  return (
    <h2 className="px-6 py-4 text-center text-xl font-bold text-red-500">
      {content}
    </h2>
  );
};
const FriendlyNews = ({ content }: { content: string }) => {
  return (
    <h2 className="px-6 py-4 text-center text-xl font-bold text-green-500">
      {content}
    </h2>
  );
};
export const RenderIncoming = ({
  isLoading,
  hostiles,
  friendlies,
}: INewsProps) => {
  const hasNews = hostiles || friendlies;
  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-4">
        <LoadingSpinner />
      </div>
    );
  }
  if (hasNews) {
    return (
      <div className="mt-8 flex min-w-[32.5rem] flex-col bg-white text-black">
        <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
          <div className="inline-block min-w-full py-2 sm:px-6 lg:px-8">
            <div className="overflow-hidden">
              {hostiles && <HostileNews content={hostiles} />}
              {friendlies && <FriendlyNews content={friendlies} />}
            </div>
          </div>
        </div>
      </div>
    );
  }
  return (
    <div className="mt-4 flex min-w-[32.5rem] flex-col bg-white text-black">
      <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
        <div className="inline-block min-w-full py-2 sm:px-6 lg:px-8">
          <div className="flex items-center justify-center overflow-hidden">
            <h1 className="text-bold p-4 text-center text-2xl text-black">
              No data
            </h1>
          </div>
        </div>
      </div>
    </div>
  );
};
````

## File: game/src/components/ui/notifications/ToastComponent.tsx
````typescript
import { toast } from "react-hot-toast";
import type { ToasterProps, DefaultToastOptions } from "react-hot-toast";
interface ToastComponentProps extends ToasterProps {
  type: "success" | "error";
  message: string;
}
export const ToastComponent = ({
  message,
  type,
  ...rest
}: ToastComponentProps) => {
  const toastType = type === "error" ? "error" : "success";
  return toast[toastType](message, rest as DefaultToastOptions);
};
export default ToastComponent;
````

## File: game/src/components/ui/tables/AdvancedDataTable/ActionButton.tsx
````typescript
import type { RefObject } from "react";
import type { FC } from "react";
import type { Building } from "@/components/features/Construct/types/types";
import type { PaPlayer } from "@/components/features/Military/Military";
import type { TMutateType } from "./AdvancedDataTable";
import Button from "../../../common/Button";
import ToastComponent from "../../notifications/ToastComponent";
import { canAffordToTrain } from "@/utils/functions";
interface IActionButtonProps {
  isLoading: boolean;
  paPlayer: PaPlayer[];
  building?: Building;
  mutate: TMutateType;
  actionText?: string;
  actionInProgress?: string;
  inputAmountRef?: RefObject<HTMLInputElement>;
  disabled?: boolean;
  considerLand?: boolean;
}
const ActionButton: FC<IActionButtonProps> = ({
  isLoading,
  paPlayer,
  building,
  mutate,
  actionText,
  inputAmountRef,
  disabled,
  considerLand,
}) => {
  if (!paPlayer[0] || !building) {
    return null;
  }
  const shouldNotCheckFieldName =
    building.needsFieldName === 0 || building.needsFieldName === "undefined";
  return (
    <>
      <td className="flex items-center px-8 text-base text-black transition duration-300 before:text-black first:border-l-0 sm:table-cell sm:before:content-none md:h-12 md:px-0">
        {(shouldNotCheckFieldName ||
          paPlayer[0][building.buildingFieldName] === 0) && (
          <Button
            disabled={isLoading || disabled}
            onClick={() => {
              if (!paPlayer[0] || !paPlayer[0].id) return;
              // Using a single condition to check for multiple values
              const hasInputField =
                Number(building.hasInputField) === 1 ||
                building.hasInputField !== "undefined";
              if (
                hasInputField &&
                Number(inputAmountRef?.current?.value) === 0
              ) {
                ToastComponent({
                  message: "Quantity needs to be more than 0",
                  type: "error",
                });
                return;
              }
              // Using early returns to avoid nested if statements
              if (
                !canAffordToTrain(
                  paPlayer,
                  building.buildingCostCrystal,
                  building.buildingCostTitanium,
                  Number(inputAmountRef?.current?.value),
                  considerLand,
                )
              ) {
                ToastComponent({
                  message: "You can not afford this",
                  type: "error",
                });
                return;
              }
              mutate({
                Userid: Number(paPlayer[0].id),
                buildingFieldName: building.buildingFieldName,
                buildingETA: building.buildingETA,
                buildingCostCrystal: building.buildingCostCrystal,
                buildingCostTitanium: building.buildingCostTitanium,
                unitAmount: Number(inputAmountRef?.current?.value),
              });
            }}
          >
            {actionText}
          </Button>
        )}
        {paPlayer[0] &&
          building &&
          !shouldNotCheckFieldName &&
          Number(paPlayer[0][building?.buildingFieldName]) >= 2 &&
          `${Number(paPlayer[0][building?.buildingFieldName])} ticks left`}
        {paPlayer[0] &&
          building &&
          !shouldNotCheckFieldName &&
          paPlayer[0][building.buildingFieldName] === 1 &&
          "Done"}
      </td>
    </>
  );
};
export default ActionButton;
````

## File: game/src/components/ui/tables/AdvancedDataTable/AdvancedDataTable.tsx
````typescript
import { Stringifier, canAffordToTrain } from "@/utils/functions";
import type { FC } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import type { Building } from "@/components/features/Construct/types/types";
import type { UseMutateFunction } from "@tanstack/react-query";
import ActionButton from "./ActionButton";
import InputNumber from "./InputNumber";
import { useMultipleRefs } from "@/utils/hooks";
type MutationData = unknown;
export type TMutateType = UseMutateFunction<
  MutationData,
  unknown,
  {
    Userid: number;
    buildingFieldName: string;
    buildingNeedsFieldName?: number;
    buildingETA: number;
    buildingFieldNameETA?: number | string;
    buildingCostCrystal: number;
    buildingCostTitanium: number;
    unitAmount?: number;
  },
  unknown
>;
export interface AdvancedTableColumn {
  label: string;
  accessor: string | JSX.Element | ((row: PaPlayer | Building) => JSX.Element);
  type?: string;
}
export interface AdvancedDataTableProps {
  isLoading?: boolean;
  columns: AdvancedTableColumn[];
  data: PaPlayer[];
  caption: string;
  renderData?: Building[];
  action?: TMutateType;
  actionText?: string;
  actionInProgress?: string;
  considerLand?: boolean;
}
/**
 * Renders an advanced data table component.
 *
 * @param {AdvancedDataTableProps} props - The component props.
 * @param {boolean} props.isLoading - Indicates if the data is currently loading.
 * @param {Array<AdvancedTableColumn>} props.columns - The columns to be displayed in the table.
 * @param {Array<PaPlayer>} props.data - The data to be rendered in the table.
 * @param {string} props.caption - The caption of the table.
 * @param {Array<Building>} props.renderData - The data to be rendered in the table, optionally overridden by the renderData prop.
 * @param {TMutateType} props.action - The action to be performed on the data.
 * @param {string} props.actionText - The text for the action button.
 * @param {string} props.actionInProgress - The text to be displayed while the action is in progress.
 * @param {boolean} props.considerLand - Indicates if land should be considered.
 * @return {JSX.Element} The rendered advanced data table.
 */
const AdvancedDataTable: FC<AdvancedDataTableProps> = ({
  isLoading = false,
  columns,
  data,
  caption,
  renderData,
  action,
  actionText,
  actionInProgress,
  considerLand = false,
}: AdvancedDataTableProps): JSX.Element => {
  const dataToMap = renderData || data;
  const inputAmountRefs = useMultipleRefs(columns.length);
  return (
    <table className="mb-8 mt-4 block pl-2 text-left md:pl-0">
      <caption className="py-6 text-center text-2xl font-bold text-white">
        {caption}
      </caption>
      <thead>
        <tr>
          {columns.map((col, index) => (
            <th
              key={index}
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              {col.label}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {dataToMap &&
          dataToMap.map((row, rowIndex) => (
            <tr
              key={rowIndex}
              className="block border-b bg-white p-4 last:border-b-0 sm:table-row sm:border-none md:p-0"
            >
              {columns.map((col, colIndex) => (
                <td
                  key={colIndex}
                  data-th={col.label}
                  className="flex h-[7rem] items-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0 sm:table-cell sm:border-l sm:border-t sm:before:content-none md:h-12 md:px-6 md:text-left"
                >
                  {typeof col.accessor === "function" ? (
                    col.accessor(row)
                  ) : typeof col.accessor === "string" && col.accessor !== "" ? (
                    <Stringifier value={row[col.accessor]} />
                  ) : col.type !== "button" ? (
                    col.accessor
                  ) : null}
                  {col.type === "inputNumber" && canAffordToTrain ? (
                    <InputNumber
                      canAffordToTrain={canAffordToTrain}
                      ref={inputAmountRefs[rowIndex]}
                    />
                  ) : null}
                  {/* Only render action buttons when we have all required props */}
                  {col.type === "button" && action && actionText && data ? (
                    row.buildingId ? (
                      <ActionButton
                        isLoading={isLoading}
                        paPlayer={data as PaPlayer[]}
                        building={row as Building}
                        mutate={action}
                        actionText={actionText}
                        actionInProgress={actionInProgress}
                        inputAmountRef={inputAmountRefs[rowIndex]}
                        considerLand={considerLand}
                      />
                    ) : (
                      <ActionButton
                        isLoading={isLoading}
                        paPlayer={data as PaPlayer[]}
                        mutate={action}
                        actionText={actionText}
                        actionInProgress={actionInProgress}
                        inputAmountRef={inputAmountRefs[rowIndex]}
                        considerLand={considerLand}
                      />
                    )
                  ) : null}
                </td>
              ))}
            </tr>
          ))}
      </tbody>
    </table>
  );
};
export default AdvancedDataTable;
````

## File: game/src/components/ui/tables/AdvancedDataTable/index.ts
````typescript
export { default as AdvancedDataTable } from "./AdvancedDataTable";
export { default as ActionButton } from "./ActionButton";
export { default as InputNumber } from "./InputNumber";
````

## File: game/src/components/ui/tables/AdvancedDataTable/InputNumber.tsx
````typescript
import { forwardRef } from "react";
import type { canAffordToTrain } from "@/utils/functions";
interface IInputNumberProps {
  canAffordToTrain: typeof canAffordToTrain;
}
const InputNumber = forwardRef<HTMLInputElement, IInputNumberProps>(
  (props, ref) => {
    return (
      <td className="flex items-center py-2 pr-6 text-base text-black transition duration-300 before:text-black first:border-l-0 sm:table-cell sm:before:content-none md:h-12">
        <input
          type="number"
          aria-label="Amount"
          className="peer relative block min-h-[auto] w-32 rounded bg-slate-200 px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
          id="exampleFormControlInput1"
          placeholder="Amount"
          ref={ref}
          defaultValue={0}
          min="0"
        />
      </td>
    );
  },
);
InputNumber.displayName = "InputNumber";
export default InputNumber;
````

## File: game/src/components/ui/tables/BDUTable.tsx
````typescript
import type { PaPlayer } from "@/components/features/Military/Military";
import type { FC } from "react";
import { DataTable } from "@/components/ui";
interface BDUTableProps {
  paPlayer: PaPlayer;
}
const BDUTable: FC<BDUTableProps> = ({ paPlayer }) => {
  const bduCount = paPlayer.rcannons + paPlayer.avengers + paPlayer.lstalkers;
  const columns = [
    { label: "Reaper cannons", accessor: "rcannons" },
    { label: "Avengers", accessor: "avengers" },
    { label: "Lucius stalkers", accessor: "lstalkers" },
  ];
  const caption = `BDU (${bduCount} total)`;
  return <DataTable columns={columns} data={[paPlayer]} caption={caption} />;
};
export default BDUTable;
````

## File: game/src/components/ui/tables/DataTable.tsx
````typescript
import type { PaPlayer } from "@/components/features/Military/Military";
import { Stringifier } from "@/utils/functions";
export interface TableColumn {
  label: string;
  accessor: string;
}
export interface DataTableProps {
  columns: TableColumn[];
  data: PaPlayer[];
  caption: string;
}
/**
 * DataTable component for displaying data in a table
 * @param {DataTableProps} props - The props for the DataTable component
 * @returns {JSX.Element} - The DataTable component
 */
export const DataTable: React.FC<DataTableProps> = ({
  columns,
  data,
  caption,
}) => {
  return (
    <table className="mt-4 w-[20.625rem] text-left ring-1 ring-slate-400/10 md:w-[47.125rem]">
      <caption className="py-6 text-center text-2xl font-bold text-white">
        {caption}
      </caption>
      <thead>
        <tr>
          {columns.map((column, index) => (
            <th
              key={index}
              scope="col"
              className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold text-black first:border-l-0 sm:table-cell"
            >
              {column.label}
            </th>
          ))}
        </tr>
      </thead>
      <tbody>
        {data.map((row, rowIndex) => (
          <tr
            key={rowIndex}
            className="block rounded bg-white p-4 shadow last:border-b-0 sm:table-row sm:border-none md:p-0"
          >
            {columns.map((column, colIndex) => (
              <td
                key={colIndex}
                data-th={column.label}
                className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
              >
                <Stringifier value={row[column.accessor]} />
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
};
````

## File: game/src/components/ui/tables/FleetTable.tsx
````typescript
import { api } from "@/utils/api";
import type { PaUsers } from "@prisma/client";
import type { FC } from "react";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
interface FleetStatusProps {
  paPlayer: PaUsers;
}
const FleetTable: FC<FleetStatusProps> = ({ paPlayer }) => {
  const { data: paAttackedName, isLoading: isLoadingAttacked } =
    api.paUsers.getAttackedPlayer.useQuery({
      Warid: paPlayer?.war,
    });
  const { data: paDefendedName, isLoading: isLoadingDefended } =
    api.paUsers.getDefendedPlayer.useQuery({
      Defid: paPlayer?.def,
    });
  const allFleetsAtHome =
    paPlayer &&
    paPlayer.war === 0 &&
    paPlayer.def === 0 &&
    "All fleets at home";
  const returning =
    paPlayer && (paPlayer.war < 0 || paPlayer.def < 0)
      ? `Returning ... ETA ${paPlayer.wareta}`
      : false;
  const attacking =
    paPlayer &&
    paAttackedName &&
    paPlayer.wareta >= 5 &&
    `Attacking ${paAttackedName.nick} #${paAttackedName.id}   (ETA: ${
      paPlayer.wareta - 5
    } ticks)`;
  const attackingWithZeroEta =
    paPlayer &&
    paAttackedName &&
    paPlayer.wareta < 5 &&
    `Attacking ${paAttackedName.nick} #${paAttackedName.id}   (ETA: 0 ticks)`;
  const defending =
    paPlayer &&
    paDefendedName &&
    paPlayer.wareta >= 5 &&
    `Defending ${paDefendedName.nick} #${paDefendedName.id}   (ETA: ${
      paPlayer.wareta - 5
    } ticks)`;
  const defendingWithZeroEta =
    paPlayer &&
    paDefendedName &&
    paPlayer.wareta < 5 &&
    `Defending ${paDefendedName.nick} #${paDefendedName.id}   (ETA: 0 ticks)`;
  if (!paPlayer) return <LoadingSpinner />;
  return (
    <>
      <div className="mt-6 flex h-full w-full flex-col items-center justify-center">
        <h2 className="py-4 text-center text-2xl font-bold text-white">
          Fleet status
        </h2>
        <span className="text-md mx-auto mb-10 flex min-h-[6.25rem] w-full flex-col items-center justify-center rounded bg-white px-6 py-2 text-center shadow md:px-0 md:text-lg">
          {isLoadingAttacked || (isLoadingDefended && <LoadingSpinner />)}
          {allFleetsAtHome}
          {returning}
          {attacking}
          {attackingWithZeroEta}
          {defending}
          {defendingWithZeroEta}
        </span>
      </div>
    </>
  );
};
export default FleetTable;
````

## File: game/src/components/ui/tables/LandTable.tsx
````typescript
import type { FC } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import { DataTable } from "@/components/ui";
interface LandTableProps {
  paPlayer: PaPlayer;
}
const LandTable: FC<LandTableProps> = ({ paPlayer }) => {
  let roidCount = 0;
  roidCount =
    paPlayer.asteroid_metal + paPlayer.asteroid_crystal + paPlayer.ui_roids;
  const columns = [
    { label: "Mines", accessor: "asteroid_metal" },
    { label: "Houses", accessor: "asteroid_crystal" },
    { label: "Undeveloped", accessor: "ui_roids" },
  ];
  const caption = `Land (${roidCount} total)`;
  return <DataTable columns={columns} data={[paPlayer]} caption={caption} />;
};
export default LandTable;
````

## File: game/src/components/ui/tables/RankingActions.tsx
````typescript
import type { FC } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import { useRouter } from "next/router";
import { useUser } from "@clerk/nextjs";
interface RankingActionsProps {
  playerNick: string;
  newbie: number;
  currentPlayer: PaPlayer;
}
// TODO: Set this to true for production
const ENABLE_NEWBIE_PROTECTION = false;
const RankingActions: FC<RankingActionsProps> = ({
  playerNick,
  newbie = 0,
  currentPlayer,
}) => {
  const router = useRouter();
  const { user } = useUser();
  // Don't show actions for the current user
  if (user?.username === playerNick) {
    return null;
  }
  const shipCount =
    currentPlayer.astropods +
    currentPlayer.infinitys +
    currentPlayer.wraiths +
    currentPlayer.warfrigs +
    currentPlayer.destroyers +
    currentPlayer.scorpions;
  const hasTroops = shipCount > 0;
  const isProtected = ENABLE_NEWBIE_PROTECTION && newbie > 0;
  // Only show mail button if no troops available
  if (!hasTroops) {
    return (
      <div className="flex items-center justify-center">
        <button
          onClick={() => router.push(`/mail?nick=${playerNick}`)}
          className="group relative rounded-md bg-blue-500 px-3 py-1.5 text-sm font-semibold text-white hover:bg-blue-600"
          title="Send Mail"
        >
          <span className="absolute -top-8 left-1/2 z-50 hidden -translate-x-1/2 transform whitespace-nowrap rounded bg-gray-800 px-2 py-1 text-xs text-white group-hover:block">
            Send a mail
          </span>
          📧
        </button>
      </div>
    );
  }
  return (
    <div className="flex items-center justify-center gap-2">
      <button
        onClick={() => router.push(`/mail?nick=${playerNick}`)}
        className="group relative rounded-md bg-blue-500 px-3 py-1.5 text-sm font-semibold text-white hover:bg-blue-600"
        title="Send Mail"
      >
        <span className="absolute -top-8 left-1/2 z-50 hidden -translate-x-1/2 transform whitespace-nowrap rounded bg-gray-800 px-2 py-1 text-xs text-white group-hover:block">
          Send a mail
        </span>
        📧
      </button>
      <button
        onClick={() =>
          router.push(`/military?target=${playerNick}&action=attack`)
        }
        className="group relative rounded-md bg-red-500 px-3 py-1.5 text-sm font-semibold text-white hover:bg-red-600 disabled:opacity-50"
        title="Attack"
        disabled={isProtected}
      >
        <span className="absolute -top-8 left-1/2 z-50 hidden -translate-x-1/2 transform whitespace-nowrap rounded bg-gray-800 px-2 py-1 text-xs text-white group-hover:block">
          {isProtected
            ? `Player is protected for ${newbie} more ticks`
            : "Send your troops to attack this player"}
        </span>
        ⚔️
      </button>
      <button
        onClick={() =>
          router.push(`/military?target=${playerNick}&action=defend`)
        }
        className="group relative rounded-md bg-green-500 px-3 py-1.5 text-sm font-semibold text-white hover:bg-green-600"
        title="Defend"
      >
        <span className="absolute -top-8 left-1/2 z-50 hidden -translate-x-1/2 transform whitespace-nowrap rounded bg-gray-800 px-2 py-1 text-xs text-white group-hover:block">
          Send your troops to defend this player
        </span>
        🛡️
      </button>
    </div>
  );
};
export default RankingActions;
````

## File: game/src/components/ui/tables/UnitsTable.tsx
````typescript
import type { FC } from "react";
import type { PaPlayer } from "@/components/features/Military/Military";
import { DataTable } from "@/components/ui";
import { getShipCount } from "@/utils/functions";
interface LandTableProps {
  paPlayer: PaPlayer;
}
const UnitsTable: FC<LandTableProps> = ({ paPlayer }) => {
  const columns = [
    { label: "Astropods", accessor: "astropods" },
    { label: "Infinitys", accessor: "infinitys" },
    { label: "Wraiths", accessor: "wraiths" },
    { label: "Warfrigs", accessor: "warfrigs" },
    { label: "Destroyers", accessor: "destroyers" },
    { label: "Scorpions", accessor: "scorpions" },
  ];
  const caption = `Units (${getShipCount(paPlayer)} total)`;
  return <DataTable columns={columns} data={[paPlayer]} caption={caption} />;
};
export default UnitsTable;
````

## File: game/src/components/ui/index.ts
````typescript
export * from "../common/Button";
export * from "./notifications/RenderIncoming";
export * from "./notifications/ToastComponent";
export * from "./tables/DataTable";
export * from "./tables/AdvancedDataTable";
````

## File: game/src/pages/addUser/[[...index]].tsx
````typescript
import { useEffect, useCallback } from "react";
import { useRouter } from "next/router";
import { useUser } from "@clerk/nextjs";
import { Layout } from "@/components/common/Layout";
import { ToastComponent } from "@/components/ui";
import { api } from "@/utils/api";
import type { NextPage } from "next";
/**
 * Renders a page for creating a player and creates a new player for the logged in user.
 *
 * @return {JSX.Element} The page component for creating a player.
 */
const AddUser: NextPage = () => {
  const { user } = useUser();
  const router = useRouter();
  const { mutate } = api.paUsers.createPlayer.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Player created", type: "success" });
      await new Promise<void>((resolve) => {
        setTimeout(() => {
          resolve();
        }, 2000);
      });
      await router.push("/");
    },
    onError: (error) => {
      console.error("Error creating player:", error);
      ToastComponent({ message: "Error creating player", type: "error" });
    },
  });
  const { data: existingPlayer, isLoading } =
    api.paUsers.getPlayerByNick.useQuery(
      { nick: user?.username || "" },
      { enabled: !!user?.username },
    );
  const createPlayer = useCallback(async () => {
    if (user && user.id && user.username) {
      if (!existingPlayer && !isLoading) {
        mutate({ nick: user.username });
      } else if (existingPlayer) {
        await router.push("/");
      }
    }
  }, [user, existingPlayer, isLoading, mutate, router]);
  useEffect(() => {
    createPlayer().catch((error) => {
      console.error("Error in createPlayer:", error);
      ToastComponent({ message: "Error creating player", type: "error" });
    });
  }, [createPlayer]);
  return (
    <Layout>
      <div className="container mb-6 flex flex-col items-center justify-center text-white">
        <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 p-6">
          <h1 className="text-center text-2xl">Create player</h1>
          <div className="relative py-4 sm:mx-auto">
            {isLoading ? "Checking existing player..." : "Creating player..."}
          </div>
        </div>
      </div>
    </Layout>
  );
};
export default AddUser;
````

## File: game/src/pages/api/trpc/[trpc].ts
````typescript
import { createNextApiHandler } from "@trpc/server/adapters/next";
import { env } from "@/env.mjs";
import { createTRPCContext } from "@/server/api/trpc";
import { appRouter } from "@/server/api/root";
// export API handler
export default createNextApiHandler({
  router: appRouter,
  createContext: createTRPCContext,
  onError:
    env.NODE_ENV === "development"
      ? ({ path, error }) => {
          console.error(
            `❌ tRPC failed on ${path ?? "<no-path>"}: ${error.message}`,
          );
        }
      : undefined,
});
````

## File: game/src/pages/login/[[...index]].tsx
````typescript
import { useCallback, useEffect } from "react";
import { useRouter } from "next/router";
import { useUser } from "@clerk/nextjs";
import { Layout } from "@/components/common/Layout";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import { api } from "@/utils/api";
import type { NextPage } from "next";
/**
 * Renders the Login page.
 *
 * @return {JSX.Element} The Login page component.
 */
const Login: NextPage = () => {
  const router = useRouter();
  const { user, isLoaded: isUserLoaded } = useUser();
  const { data: paPlayer, isLoading: isPlayerLoading } =
    api.paUsers.getPlayerByNick.useQuery(
      { nick: user?.username || "" },
      { enabled: !!user?.username },
    );
  const addPlayer = useCallback(() => {
    return router.push("/addUser");
  }, [router]);
  const redirect = useCallback(() => {
    return router.push("/");
  }, [router]);
  // 
  // TODO: Cleanup this code
  // 
  useEffect(() => {
    if (isUserLoaded && !isPlayerLoading) {
      if (user) {
        if (paPlayer && paPlayer.id) {
          void redirect();
        } else {
          void addPlayer();
        }
      }
    }
  }, [user, isUserLoaded, paPlayer, isPlayerLoading, redirect, addPlayer]);
  if (!isUserLoaded || isPlayerLoading) {
    return (
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="mt-12">
            <LoadingSpinner />
          </div>
        </div>
      </Layout>
    );
  }
  return (
    <Layout>
      <div className="container mb-6 flex flex-col items-center justify-center">
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </div>
    </Layout>
  );
};
export default Login;
````

## File: game/src/pages/register/[[...index]].tsx
````typescript
import type { NextPage } from "next";
import { UserButton, SignUp, SignedIn, SignedOut } from "@clerk/nextjs";
import { Layout } from "@/components/common/Layout";
/**
 * Renders the Register component that displays a form for users to sign up.
 *
 * @return {JSX.Element} The JSX element representing the Register component.
 */
const Register: NextPage = () => {
  return (
    <>
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            <SignedOut>
              <div className="mt-6 flex h-[55vh] items-center justify-center">
                <SignUp
                  path="/register"
                  routing="path"
                  afterSignUpUrl="/addUser"
                />
              </div>
            </SignedOut>
            <SignedIn>
              <UserButton />
            </SignedIn>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Register;
````

## File: game/src/pages/_app.tsx
````typescript
import {
  ClerkProvider,
  SignedIn,
  SignedOut,
  RedirectToSignIn,
} from "@clerk/nextjs";
import { Toaster } from "react-hot-toast";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { useRouter } from "next/router";
import type { AppProps } from "next/app";
import { api } from "@/utils/api";
import "@/styles/globals.css";
//  List pages you want to be publicly accessible, or leave empty if
//  every page requires authentication. Use this naming strategy:
//   "/"              for pages/index.js
//   "/foo"           for pages/foo/index.js
//   "/foo/bar"       for pages/foo/bar.js
//   "/foo/[...bar]"  for pages/foo/[...bar].js
const publicPages = ["/login/[[...index]]", "/register/[[...index]]"];
/**
 * Renders the app, either directly or using Clerk for authentication, based on the current route.
 *
 * @param {AppProps} props - the props object containing the Component and pageProps objects
 * @return {JSX.Element} the rendered app
 */
function MyApp({ Component, pageProps }: AppProps) {
  // Get the pathname
  const { pathname } = useRouter();
  // Check if the current route matches a public page
  const isPublicPage = publicPages.includes(pathname);
  // If the current route is listed as public, render it directly
  // Otherwise, use Clerk to require authentication
  return (
    <ClerkProvider {...pageProps}>
      {isPublicPage ? (
        <Component {...pageProps} />
      ) : (
        <>
          <SignedIn>
            <Toaster position="bottom-center" />
            <Component {...pageProps} />
          </SignedIn>
          <SignedOut>
            <RedirectToSignIn />
          </SignedOut>
        </>
      )}
      {process.env.NODE_ENV !== "production" && (
        <ReactQueryDevtools initialIsOpen={false} />
      )}
    </ClerkProvider>
  );
}
export default api.withTRPC(MyApp);
````

## File: game/src/pages/_document.tsx
````typescript
import Document, { Html, Head, Main, NextScript } from "next/document";
import type { DocumentContext } from "next/document";
/**
 * This is a React class that extends the Document class and sets some initial props for server-side rendering.
 * It also sets some meta tags for SEO and renders the Main component along with the NextScript component.
 */
class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const initialProps = await Document.getInitialProps(ctx);
    return { ...initialProps };
  }
  render = () => {
    return (
      <Html lang="nb">
        <Head>
          <link rel="icon" href="/favicon.ico" />
          <link rel="apple-touch-icon" href="/logo.png" />
          <meta property="og:title" content="Earth Doom - www.earthdoom.com" />
          <meta name="author" content="Daniel" />
          <meta property="og:locale" content="nb_NO" />
          <meta name="description" content="Earth Doom - www.earthdoom.com" />
          <meta
            property="og:description"
            content="Earth Doom - www.earthdoom.com"
          />
          <meta property="og:url" content="https://www.earthdoom.com" />
          <meta property="og:site_name" content="earthdoom.com" />
        </Head>
        <body className="bg-neutral-900 font-body md:mb-[5rem]">
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  };
}
export default MyDocument;
````

## File: game/src/pages/alliance.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import Alliance from "@/components/features/Alliance";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
/**
 * Renders the Alliance page if the user is signed in and has a username.
 *
 * @return {JSX.Element} The rendered Alliance page.
 */
const AlliancePage: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { data: paTag, isLoading } = api.paTag.getAll.useQuery();
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center text-white">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            <div className="relative sm:mx-auto">
              {isLoading && <LoadingSpinner />}
              {paPlayer && paTag && (
                <Alliance paPlayer={paPlayer} paTag={paTag} />
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default AlliancePage;
````

## File: game/src/pages/construct.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import type { AdvancedTableColumn } from "@/components/ui/tables/AdvancedDataTable/AdvancedDataTable";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import { Button, AdvancedDataTable, ToastComponent } from "@/components/ui";
import { BUILDINGS } from "@/components/features/Construct/constants/BUILDINGS";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
/**
 * A page component that displays a table of buildings a user can construct.
 *
 * @return {JSX.Element} The constructed page component.
 */
const Construction: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate, isLoading } = api.paConstruct.constructBuilding.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Building started", type: "success" });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Database error", type: "error" });
    },
  });
  const columns: AdvancedTableColumn[] = [
    { label: "Name", accessor: "buildingName" },
    { label: "Description", accessor: "buildingDescription" },
    { label: "ETA", accessor: "buildingETA" },
    { label: "Cost", accessor: "buildingCost" },
    { label: "Action", accessor: <Button />, type: "button" },
  ];
  const caption = "Construction";
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            <div className="relative sm:mx-auto">
              {paPlayer && (
                <AdvancedDataTable
                  isLoading={isLoading}
                  columns={columns}
                  data={[paPlayer]}
                  caption={caption}
                  renderData={BUILDINGS}
                  action={mutate}
                  actionText="Construct"
                  actionInProgress="Constructing ..."
                />
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Construction;
````

## File: game/src/pages/contnews.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import { RenderIncoming } from "@/components/ui";
/**
 * Returns a Next.js page component that displays incoming continent news for a signed-in user.
 *
 * @return {JSX.Element} A React component that renders incoming continent news.
 */
const ContNews: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { data: paNews, isLoading } = api.paUsers.getContinentIncoming.useQuery(
    {
      nick: user.username,
    },
  );
  if (!paPlayer) {
    return null;
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 ">
            <RenderIncoming
              isLoading={isLoading}
              hostiles={paNews?.hostiles}
              friendlies={paNews?.friendly}
            />
          </div>
        </div>
      </Layout>
    </>
  );
};
export default ContNews;
````

## File: game/src/pages/country.tsx
````typescript
import { useState } from "react";
import { BsArrowLeft, BsArrowRight } from "react-icons/bs";
import Link from "next/link";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import { Button } from "@/components/ui";
const Country: NextPage = () => {
  // https://tailwind-elements.com/docs/standard/data/tables/
  const { data: paPlayers } = api.paUsers.getAll.useQuery();
  const [myx, setMyx] = useState<number>(1);
  const handleChange = (event: { target: { value: string | number } }) => {
    const { value } = event.target;
    if (Number.isInteger(Number(value))) {
      setMyx(Number(value));
    }
  };
  const handlePrev = () => {
    setMyx(myx - 1);
  };
  const handleNext = () => {
    setMyx(myx + 1);
  };
  return (
    <>
      <Layout>
        <main className="bg-neutral-900">
          <div className="flex justify-center">
            <div className="my-6 mt-16">
              <Button onClick={() => handlePrev}>
                <BsArrowLeft className="mr-2 inline-block" />
                Previous
              </Button>
              <input
                className="mr-2 rounded-lg border px-4 py-2"
                type="text"
                name="myx"
                size={5}
                maxLength={3}
                value={myx}
                onChange={() => handleChange}
              />
              <Button onClick={() => handleNext}>
                Next
                <BsArrowRight className="ml-2 inline-block" />
              </Button>
            </div>
          </div>
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 p-6">
            <div className="relative sm:mx-auto">
              <div className="relative mb-6 w-full break-words p-6 shadow-lg">
                <img
                  src="https://via.placeholder.com/250"
                  alt=""
                  className="mx-auto max-w-[15.625rem] text-center"
                />
              </div>
              <table className="mt-2 w-full text-left ring-1 ring-slate-400/10">
                <caption className="mb-10 text-xl font-medium text-white ">
                  Continent name here <br />
                  Score: 1000000
                </caption>
                <tbody>
                  <tr>
                    <th
                      scope="col"
                      className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold  text-black  first:border-l-0 sm:table-cell"
                    >
                      Location
                    </th>
                    <th
                      scope="col"
                      className="hidden h-12 bg-slate-200/90 px-6 text-center text-base font-bold  text-black  first:border-l-0 sm:table-cell"
                    >
                      Tag
                    </th>
                    <th
                      scope="col"
                      className="hidden h-12 bg-slate-200/90 px-6  text-center text-base font-bold  text-black  first:border-l-0 sm:table-cell"
                    >
                      Nick
                    </th>
                    <th
                      scope="col"
                      className="hidden h-12 bg-slate-200/90 px-6 text-center  text-base font-bold  text-black  first:border-l-0 sm:table-cell"
                    >
                      Score
                    </th>
                    <th
                      scope="col"
                      className="hidden h-12  bg-slate-200/90 px-6 text-center text-base font-bold  text-black  first:border-l-0 sm:table-cell"
                    >
                      Spying
                    </th>
                    <th
                      scope="col"
                      className="hidden h-12 bg-slate-200/90  px-6 text-center text-base font-bold  text-black backdrop-blur-sm first:border-l-0 sm:table-cell"
                    >
                      Mail
                    </th>
                  </tr>
                  {paPlayers?.map((player) => (
                    <tr
                      key={player.id}
                      className="block border-b bg-white text-center last:border-b-0 sm:table-row sm:border-none"
                    >
                      <td
                        data-th="Name"
                        className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        {player.y}
                      </td>
                      <td
                        data-th="Tag"
                        className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        {player.tag}
                      </td>
                      <td
                        data-th="Name"
                        className="flex h-12 items-center px-6 text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        <span
                          className={`text-${
                            player.commander === 1 ? "red" : "blue"
                          }`}
                        >
                          {player.nick}
                        </span>
                        {Date.now() - player.timer < 600000 && (
                          <span className="text-green-500"> (ONLINE)</span>
                        )}
                      </td>
                      <td
                        data-th="Score"
                        className="flex h-12 items-center px-6 text-center  text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        {player.score.toString()}
                      </td>
                      <td
                        data-th="Spying"
                        className="flex h-12 items-center px-6  text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        <Link href={`/spy?id=${player.id}`}>
                          <Button
                            onClick={() => {
                              alert(player.id);
                            }}
                          >
                            Spying
                          </Button>
                        </Link>
                      </td>
                      <td
                        data-th="Mail"
                        className="flex h-12 items-center px-6  text-center text-base text-black transition duration-300 before:inline-block before:w-24 before:font-medium before:text-black before:content-[attr(data-th)':'] first:border-l-0  sm:table-cell sm:border-l sm:border-t sm:before:content-none"
                      >
                        <Link href={`/mail?id=${player.id}`}>
                          <Button
                            type="button"
                            className="inline-block rounded bg-primary px-6 pb-2 pt-2.5 text-sm font-medium uppercase leading-normal text-white  transition duration-150 ease-in-out hover:bg-primary-600  focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(220,76,100,0.3),0_4px_18px_0_rgba(220,76,100,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(220,76,100,0.3),0_4px_18px_0_rgba(220,76,100,0.2)]"
                            onClick={() => {
                              alert(player.id);
                            }}
                          >
                            Mail
                          </Button>
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </main>
      </Layout>
    </>
  );
};
export default Country;
````

## File: game/src/pages/energy.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import type { PaPlayer } from "@/components/features/Military/Military";
import { api } from "@/utils/api";
import { renderMessage } from "@/utils/functions";
import { Layout } from "@/components/common/Layout";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import { ENERGY } from "@/components/features/Energy/constants/ENERGY";
import { Button, AdvancedDataTable, ToastComponent } from "@/components/ui";
/**
 * A page component that renders the Energy page.
 *
 * @return {JSX.Element} The Energy page.
 */
const Energy: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate, isLoading } = api.paSpying.spyingInitiate.useMutation({
    onSuccess: async () => {
      ToastComponent({ message: "Construction started", type: "success" });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({ message: "Database error", type: "error" });
    },
  });
  const columns = [
    { label: "Name", accessor: "buildingName" },
    { label: "Description", accessor: "buildingDescription" },
    { label: "ETA", accessor: "buildingETA" },
    { label: "Amount", accessor: "ui_roids", type: "inputNumber" },
    { label: "Cost", accessor: "buildingCost" },
    { label: "Action", accessor: <Button />, type: "button" },
  ];
  const caption = "Energy";
  if (!paPlayer || !isSignedIn || !user.username) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  const renderEnergyMessage = (paPlayer: PaPlayer) => {
    if (paPlayer && (paPlayer.r_energy === 0 || paPlayer.r_energy > 1)) {
      return renderMessage({
        title: "Energy",
        message: "You need to research power plants before you can build them",
      });
    }
    return null;
  };
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div
            className={`relative flex flex-col justify-center overflow-hidden bg-neutral-900 ${
              paPlayer.r_energy === 1 ? "md:w-[63rem]" : ""
            }`}
          >
            {renderEnergyMessage(paPlayer)}
            {paPlayer && paPlayer.r_energy === 1 && (
              <AdvancedDataTable
                isLoading={isLoading}
                columns={columns}
                data={[paPlayer]}
                caption={caption}
                renderData={ENERGY}
                action={mutate}
                actionText="Construct"
                actionInProgress="Constructing ..."
              />
            )}
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Energy;
````

## File: game/src/pages/error.tsx
````typescript
import type { NextPage } from "next";
import { Layout } from "@/components/common/Layout";
/**
 * Renders the error page with a heading.
 *
 * @return {NextPage} The Next.js page component.
 */
const Error: NextPage = () => {
  return (
    <>
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">Error page</p>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Error;
````

## File: game/src/pages/index.tsx
````typescript
import { Layout } from "@/components/common/Layout";
import LandTable from "@/components/ui/tables/LandTable";
import BDUTable from "@/components/ui/tables/BDUTable";
import UnitsTable from "@/components/ui/tables/UnitsTable";
import FleetStatus from "@/components/ui/tables/FleetTable";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import { api } from "@/utils/api";
import { useUser } from "@clerk/nextjs";
/**
 * Renders the Home page with player data if signed in, otherwise displays a loading spinner.
 *
 * @returns {JSX.Element} The Home page with player data or a loading spinner.
 */
const Home = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <Layout paPlayer={paPlayer}>
      <div className="container mb-6 flex flex-col items-center justify-center">
        <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
          <div className="relative sm:mx-auto">
            {paPlayer ? (
              <>
                <UnitsTable paPlayer={paPlayer} />
                <BDUTable paPlayer={paPlayer} />
                <LandTable paPlayer={paPlayer} />
                <FleetStatus paPlayer={paPlayer} />
              </>
            ) : (
              <div className="py-6">
                <LoadingSpinner />
              </div>
            )}
          </div>
        </div>
      </div>
    </Layout>
  );
};
export default Home;
````

## File: game/src/pages/logout.tsx
````typescript
import { SignInButton, SignedIn, SignedOut } from "@clerk/nextjs";
import { useClerk } from "@clerk/nextjs";
import type { NextPage } from "next";
import { Layout } from "@/components/common/Layout";
import { Button } from "@/components/ui";
/**
 * Renders a logout button that either signs out the user or redirects them to the sign in page depending on their authentication status.
 *
 * @return {JSX.Element} The JSX element containing the logout button
 */
const Logout: NextPage = () => {
  const { signOut } = useClerk();
  return (
    <>
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            <p className="mt-12 text-2xl text-white">
              <SignedIn>
                <Button onClick={() => signOut()}>Sign out</Button>
              </SignedIn>
              <SignedOut>
                <SignInButton>
                  <Button
                    type="button"
                    className="inline-block rounded bg-primary p-8 pb-2 pt-2.5 text-xl font-medium leading-normal text-white transition duration-150 ease-in-out hover:bg-primary-600 focus:bg-primary-600"
                  >
                    Sign in
                  </Button>
                </SignInButton>
              </SignedOut>
            </p>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Logout;
````

## File: game/src/pages/mail.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import { useRouter } from "next/router";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import MailTable from "@/components/features/Mail/MailTable";
import { Button, ToastComponent } from "@/components/ui";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import NewMail from "@/components/features/Mail/NewMail";
/**
 * Renders the Mail component and fetches the user's mail data from the server.
 * If the user is not signed in or does not have a username, displays a loading spinner.
 * If there is a database error while marking a mail as seen, displays an error toast.
 *
 * @return {JSX.Element} The JSX element for the Mail component.
 */
const Mail: NextPage = () => {
  const ctx = api.useContext();
  const router = useRouter();
  let hasUnseenEmail = false;
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paMail } = api.paMail.getAllMailByNick.useQuery({
    nick: user.username,
  });
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate: markAsSeen } = api.paMail.markAsSeen.useMutation({
    onSuccess: async () => {
      await ctx.paMail.getAllMailByNick.invalidate();
      await ctx.paMail.getAllMailByNick.refetch();
      ToastComponent({ message: "Mail marked as seen", type: "success" });
    },
    onError: () => {
      ToastComponent({ message: "Database error", type: "error" });
    },
  });
  if (!paMail || !paPlayer)
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  hasUnseenEmail = paMail.mail.find((mail) => mail.seen === 0) !== undefined;
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            <h2 className="mt-4 py-4 text-center text-2xl font-bold text-white">
              Received Mail
            </h2>
            {paPlayer && hasUnseenEmail && (
              <div className="mt-6 flex justify-end py-4">
                <Button
                  extraClasses="w-64"
                  onClick={() => markAsSeen({ sentTo: paPlayer.id })}
                >
                  Mark all as seen
                </Button>
              </div>
            )}
            <div className="mt-2 flex flex-col bg-white text-black">
              <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="inline-block min-w-full sm:px-6 lg:px-8">
                  <div className="overflow-hidden">
                    {paMail && <MailTable mail={paMail.mail} />}
                  </div>
                </div>
              </div>
            </div>
            <div>
              <h2 className="mt-6 py-4 text-center text-2xl font-bold text-white">
                Send New Mail
              </h2>
              {paPlayer && <NewMail paPlayer={paPlayer} recipient={router.query.nick as string} />}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Mail;
````

## File: game/src/pages/military.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import Military from "@/components/features/Military/Military";
import UnitsTable from "@/components/ui/tables/UnitsTable";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import FleetTable from "@/components/ui/tables/FleetTable";
/**
 * Renders the Military page component which displays the military information of a user's PA account.
 * Also allows the player to send troops to attack or defend
 *
 * @return {JSX.Element} The MilitaryPage component.
 */
const MilitaryPage: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            {paPlayer ? (
              <UnitsTable paPlayer={paPlayer} />
            ) : (
              <div className="mt-12">
                <LoadingSpinner />
              </div>
            )}
            {paPlayer && (
              <>
                <FleetTable paPlayer={paPlayer} />
                <Military paPlayer={paPlayer} />
              </>
            )}
          </div>
        </div>
      </Layout>
    </>
  );
};
export default MilitaryPage;
````

## File: game/src/pages/news.tsx
````typescript
import { format } from "date-fns";
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import type { PaNews } from "@prisma/client";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import NewsTable from "@/components/features/News/NewsTable";
import { Button, ToastComponent } from "@/components/ui";
import { CombatReport } from "@/components/features/News";
import { isJSON } from "@/utils/functions";
interface IRenderContentProps {
  news?: PaNews[];
}
interface Combatants {
  [key: string]: {
    total: number;
    lost: string;
  };
}
interface Yours {
  [key: string]: string | number;
}
interface Land {
  [key: string]: string | number;
}
interface CombatReport {
  title: string;
  defenders: Combatants;
  attackers: Combatants;
  yours: Yours;
  land: Land;
  time: string;
}
/**
 * Renders news based on isLoading, paNews, and isDeletingAll.
 *
 * @param {boolean} isLoading - a flag to indicate whether the news is currently being loaded or not
 * @param {IRenderContentProps} paNews - the news to be rendered
 * @param {boolean} isDeletingAll - a flag to indicate whether all news is currently being deleted or not
 * @return {JSX.Element} the rendered news based on the provided flags and news data
 */
const renderNews = (
  isLoading: boolean,
  paNews: IRenderContentProps,
  isDeletingAll: boolean,
) => {
  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-4">
        <LoadingSpinner />
      </div>
    );
  }
  const hasNews = (paNews?.news?.length || 0) > 0;
  if (hasNews) {
    return (
      <NewsTable isDeletingAll={isDeletingAll} news={paNews?.news ?? []} />
    );
  }
  return (
    <h1 className="text-bold p-4 text-center text-2xl text-black">
      No news to report
    </h1>
  );
};
/**
 * Renders the News component that displays news and combat reports.
 *
 * @return {JSX.Element} The News component.
 */
const News: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paNews, isLoading } = api.paNews.getAllNewsByUserId.useQuery({
    nick: user.username,
  });
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate: deleteAllNews, isLoading: isDeletingAll } =
    api.paNews.deleteAllNews.useMutation({
      onSuccess: async () => {
        ToastComponent({ message: "News deleted", type: "success" });
        await ctx.paNews.getAllNewsByUserId.invalidate();
        await ctx.paNews.getAllNewsByUserId.refetch();
      },
      onError: () => {
        ToastComponent({ message: "Database error", type: "error" });
      },
    });
  if (!paNews || !paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  const combatReports = paNews.news.map((report) => {
    const date = new Date(report.time * 1000);
    const formattedDate = format(date, "dd/MM-yyyy HH:mm:ss");
    const isJsonString = isJSON(report.news);
    if (isJsonString) {
      const news: CombatReport = JSON.parse(report.news) as CombatReport;
      if (news.title !== "Combat report") {
        return;
      }
      return {
        title: news.title,
        defenders: news.defenders,
        attackers: news.attackers,
        yours: news.yours,
        land: news.land,
        time: formattedDate,
      };
    }
  });
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden md:w-[47.125rem]">
            <div className="container mt-6 flex justify-end">
              {paNews && paNews.news.length > 0 && (
                <Button
                  disabled={isDeletingAll}
                  variant="danger"
                  onClick={() => {
                    if (!user || !user.username) return;
                    deleteAllNews({ nick: user.username });
                  }}
                >
                  Delete All
                </Button>
              )}
            </div>
            <div className="mt-4 flex min-w-[20.5rem] flex-col bg-white text-black">
              <div className="overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div className="inline-block min-w-full sm:px-6 lg:px-8">
                  <div className="flex items-center justify-center overflow-hidden">
                    {paNews && renderNews(isLoading, paNews, isDeletingAll)}
                  </div>
                </div>
              </div>
            </div>
            <div className="mt-4 flex min-w-[20.5rem] flex-col bg-white text-black">
              {combatReports &&
                combatReports.map((report) =>
                  report?.title ? (
                    <CombatReport key={report.title} {...report} />
                  ) : null,
                )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default News;
````

## File: game/src/pages/politics.tsx
````typescript
import type { NextPage } from "next";
import { Layout } from "@/components/common/Layout";
const Politics: NextPage = () => {
  // TODO - Implement this functionality
  return (
    <>
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            <p className="text-2xl text-white"></p>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Politics;
````

## File: game/src/pages/production.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import type { PaPlayer } from "@/components/features/Military/Military";
import { Layout } from "@/components/common/Layout";
import Production from "@/components/features/Production/Production";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import { api } from "@/utils/api";
import { renderMessage } from "@/utils/functions";
/**
 * Renders the production page if the user is signed in and has a username.
 * If the user does not have a username, it returns null.
 * If the user's query for their player data has not returned, it also returns null.
 * If the user has not constructed barracks, a message is displayed indicating that
 * they need to construct barracks before they can produce units.
 *
 * @param {PaPlayer} paPlayer - The player data for the user
 * @return {JSX.Element} - The production page JSX if the user has constructed an airport
 * and is signed in with a username, otherwise null
 */
const ProductionPage: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const renderBarracksMessage = (paPlayer: PaPlayer) => {
    if (
      paPlayer &&
      (Number(paPlayer.c_airport) === 0 || Number(paPlayer.c_airport) > 1)
    ) {
      return renderMessage({
        title: "Production",
        message: "You need to construct barracks before you can produce units",
      });
    }
    return null;
  };
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            <div className="relative sm:mx-auto">
              {renderBarracksMessage(paPlayer)}
              {paPlayer && paPlayer.c_airport === 1 && (
                <>
                  <h1 className="py-6 text-center text-2xl font-bold text-white">
                    Production
                  </h1>
                  <Production paPlayer={paPlayer} />
                </>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default ProductionPage;
````

## File: game/src/pages/ranking.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import type { PaPlayer } from "@/components/features/Military/Military";
import type { AdvancedTableColumn } from "@/components/ui/tables/AdvancedDataTable/AdvancedDataTable";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import { AdvancedDataTable } from "@/components/ui";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import RankingActions from "@/components/ui/tables/RankingActions";
import { Building } from "@/components/features/Construct/types/types";
/**
 * Renders the Ranking page component, which displays the player ranking table.
 *
 * @return {JSX.Element} The RankingPage component to be rendered.
 */
const RankingPage: NextPage = () => {
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paRanking } = api.paUsers.getAll.useQuery();
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const columns: AdvancedTableColumn[] = [
    { label: "Nick", accessor: "nick" },
    { label: "Score", accessor: "score" },
    { label: "Size", accessor: "size" },
    { label: "Rank", accessor: "rank" },
    { 
      label: "Actions", 
      accessor: (row: PaPlayer | Building) => {
        if (!paPlayer) return <></>;
        // Type guard to ensure we have a PaPlayer with required properties
        if ('nick' in row && typeof row.nick === 'string') {
          const playerRow = row as PaPlayer;
          return (
            <RankingActions 
              playerNick={playerRow.nick}
              newbie={typeof playerRow.newbie === 'number' ? playerRow.newbie : 0}
              currentPlayer={paPlayer}
            />
          );
        }
        return <></>;
      }
    },
  ];
  const caption = `Player ranking`;
  if (!paPlayer || !paRanking) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            {paPlayer && (
              <AdvancedDataTable
                columns={columns}
                data={paRanking}
                caption={caption}
              />
            )}
          </div>
        </div>
      </Layout>
    </>
  );
};
export default RankingPage;
````

## File: game/src/pages/research.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import { BUILDINGS } from "@/components/features/Research/constants/RESEARCH";
import { Button, AdvancedDataTable, ToastComponent } from "@/components/ui";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
/**
 * Renders the research page if the user is signed in and has a username. The page
 * displays a table of buildings with their descriptions, ETAs, and costs, and allows
 * the user to research a building by clicking a button.
 * When the button is clicked, a mutation is made to the database to start the research and a success message is
 * displayed. If there is an error, an error message is displayed.
 *
 * @return {JSX.Element} The research page component
 */
const ResearchPage: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn } = useUser();
  if (!isSignedIn || !user.username) {
    return null;
  }
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate, isLoading } = api.paUsers.researchBuilding.useMutation({
    onSuccess: async () => {
      ToastComponent({
        message: "Research started",
        type: "success",
      });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({
        message: "Database error",
        type: "error",
      });
    },
  });
  const columns = [
    { label: "Name", accessor: "buildingName" },
    { label: "Description", accessor: "buildingDescription" },
    { label: "ETA", accessor: "buildingETA" },
    { label: "Cost", accessor: "buildingCost" },
    { label: "Action", accessor: <Button />, type: "button" },
  ];
  const caption = "Research";
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            <div className="relative sm:mx-auto">
              {paPlayer && (
                <AdvancedDataTable
                  isLoading={isLoading}
                  columns={columns}
                  data={[paPlayer]}
                  caption={caption}
                  renderData={BUILDINGS}
                  action={mutate}
                  actionText="Research"
                  actionInProgress="Researching ..."
                />
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default ResearchPage;
````

## File: game/src/pages/resources.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { Layout } from "@/components/common/Layout";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import BarGraph from "@/components/features/Resources/BarGraph";
import { api } from "@/utils/api";
import { renderIncomeData } from "@/utils/functions";
import { Button, AdvancedDataTable, ToastComponent } from "@/components/ui";
import { RESOURCE } from "@/components/features/Resources/constants/RESOURCE";
/**
 * Renders a resource management page for a user, displaying their current income and available resources.
 *
 * @return {JSX.Element} A React component representing the resources page
 */
const Resources: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn, isLoaded } = useUser();
  if (!isSignedIn || !user.username) return <LoadingSpinner />;
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  const { mutate, isLoading } = api.paConstruct.developLand.useMutation({
    onSuccess: async () => {
      ToastComponent({
        message: "Resource initiated",
        type: "success",
      });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({
        message: "Database error",
        type: "error",
      });
    },
  });
  const columns = [
    { label: "Name", accessor: "buildingName" },
    { label: "Description", accessor: "buildingDescription" },
    { label: "Cost", accessor: "buildingCost" },
    { label: "Amount", accessor: "amount", type: "inputNumber" },
    { label: "Action", accessor: <Button />, type: "button" },
  ];
  const caption = "Resources";
  const hasNoLand =
    paPlayer?.ui_roids === 0 &&
    paPlayer?.asteroid_crystal === 0 &&
    paPlayer?.asteroid_metal === 0;
  const hasNoUndevelopedLand = paPlayer?.ui_roids === 0;
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            {!isLoaded && <LoadingSpinner />}
            <div className="mx-auto mb-4 mt-6 rounded bg-white py-4 shadow md:w-[47.125rem]">
              {hasNoLand ? (
                <h2 className="p-4 text-center text-2xl font-bold">
                  No land, no income.
                </h2>
              ) : (
                <BarGraph chartData={renderIncomeData(paPlayer)} />
              )}
            </div>
            {hasNoUndevelopedLand && (
              <div className="mx-auto mb-4 mt-6 rounded bg-white py-4 shadow md:w-[47.125rem]">
                <h2 className="p-4 text-center text-2xl font-bold">
                  You have no land to develop
                </h2>
              </div>
            )}
            {paPlayer && paPlayer?.ui_roids > 0 && (
              <div className="mx-auto mt-4 w-[20.625rem] rounded bg-white py-4 shadow md:w-[47.125rem]">
                <h1 className="py-4 text-center text-2xl">
                  Undeveloped land: {paPlayer?.ui_roids}
                </h1>
              </div>
            )}
            {paPlayer && paPlayer?.ui_roids > 0 && (
              <AdvancedDataTable
                isLoading={isLoading}
                columns={columns}
                data={[paPlayer]}
                caption={caption}
                renderData={RESOURCE}
                action={mutate}
                actionText="Construct"
                actionInProgress="Constructing ..."
                considerLand={true}
              />
            )}
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Resources;
````

## File: game/src/pages/senate.tsx
````typescript
import type { NextPage } from "next";
import { Layout } from "@/components/common/Layout";
const Senate: NextPage = () => {
  // TODO Implement this feature
  return (
    <>
      <Layout>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900">
            <p className="text-2xl text-white"></p>
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Senate;
````

## File: game/src/pages/spying.tsx
````typescript
import { useUser } from "@clerk/nextjs";
import type { NextPage } from "next";
import { api } from "@/utils/api";
import { Layout } from "@/components/common/Layout";
import LoadingSpinner from "@/components/common/Loader/LoadingSpinner";
import { ToastComponent, Button, AdvancedDataTable } from "@/components/ui";
import { SPYING } from "@/components/features/Spying/constants/SPYING";
/**
 * Renders the spying page
 * Required for getting more land early in the game
 *
 * @returns {JSX.Element} The spying page component.
 */
const Spying: NextPage = () => {
  const ctx = api.useContext();
  const { user, isSignedIn, isLoaded } = useUser();
  let uiRoids = 0;
  if (!isSignedIn || !user.username) return <LoadingSpinner />;
  const { data: paPlayer } = api.paUsers.getPlayerByNick.useQuery({
    nick: user.username,
  });
  uiRoids = paPlayer?.ui_roids || 0;
  const { mutate, isLoading } = api.paSpying.spyingInitiate.useMutation({
    onSuccess: async (data) => {
      const newAmountOfRoids = data.ui_roids - uiRoids;
      ToastComponent({
        message: `Spying complete - found ${newAmountOfRoids} land`,
        type: "success",
      });
      await ctx.paUsers.getPlayerByNick.invalidate();
      await ctx.paUsers.getPlayerByNick.refetch();
    },
    onError: () => {
      ToastComponent({
        message: "Database error",
        type: "error",
      });
    },
  });
  const columns = [
    { label: "Name", accessor: "buildingName" },
    { label: "Description", accessor: "buildingDescription" },
    { label: "Cost", accessor: "buildingCost" },
    { label: "Amount", accessor: "amount", type: "inputNumber" },
    { label: "Action", accessor: <Button />, type: "button" },
  ];
  const caption = "Spying";
  if (!paPlayer) {
    return (
      <Layout>
        <div className="mt-12">
          <LoadingSpinner />
        </div>
      </Layout>
    );
  }
  return (
    <>
      <Layout paPlayer={paPlayer}>
        <div className="container mb-6 flex flex-col items-center justify-center">
          <div className="relative flex flex-col justify-center overflow-hidden bg-neutral-900 md:w-[63rem]">
            {!isLoaded && <LoadingSpinner />}
            {paPlayer && (
              <AdvancedDataTable
                isLoading={isLoading}
                columns={columns}
                data={[paPlayer]}
                caption={caption}
                renderData={SPYING}
                action={mutate}
                actionText="Spy"
              />
            )}
          </div>
        </div>
      </Layout>
    </>
  );
};
export default Spying;
````

## File: game/src/server/api/routers/paConstruct.ts
````typescript
import { z } from "zod";
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
export const paConstructRouter = createTRPCRouter({
  constructBuilding: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingETA: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const {
        buildingFieldName,
        buildingCostCrystal,
        buildingCostTitanium,
        buildingETA,
      } = input;
      // Fetch the associated PaConstruct for the user
      const paConstruct = await ctx.prisma.paUsers
        .findUnique({ where: { id: input.Userid } })
        .construction();
      if (!paConstruct) {
        throw new Error(
          `No PaConstruct found for user with ID: ${input.Userid}`,
        );
      }
      // Update the PaConstruct
      await ctx.prisma.paConstruct.update({
        where: {
          id: paConstruct.id,
        },
        data: {
          [buildingFieldName]: { set: buildingETA },
        },
      });
      // Update the PaUsers
      return await ctx.prisma.paUsers.update({
        where: {
          id: input.Userid,
        },
        data: {
          crystal: { decrement: buildingCostCrystal },
          metal: { decrement: buildingCostTitanium },
        },
      });
    }),
  /*
  developLand: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ buildingETA: z.number() }))
    .input(z.object({ unitAmount: z.number().optional() }))
    .mutation(async ({ ctx, input }) => {
      const { Userid, buildingFieldName, buildingCostCrystal, unitAmount } =
        input;
      const unitAmountDefault = unitAmount || 0;
      return await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          [buildingFieldName]: {
            increment: unitAmount,
          },
          crystal: { decrement: buildingCostCrystal * unitAmountDefault },
          ui_roids: { decrement: unitAmount },
        },
      });
    }),*/
  developLand: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ buildingETA: z.number() }))
    .input(z.object({ unitAmount: z.number().optional() }))
    .mutation(async ({ ctx, input }) => {
      const { Userid, buildingFieldName, buildingCostCrystal, unitAmount } =
        input;
      const unitAmountDefault = unitAmount || 0;
      // Fetch the current user data
      const currentUser = await ctx.prisma.paUsers.findUnique({
        where: { id: Userid },
      });
      // Check if user exists
      if (!currentUser) {
        throw new Error("User does not exist");
      }
      // Check if user has enough ui_roids
      if (currentUser.ui_roids < unitAmountDefault) {
        throw new Error("Not enough land");
      }
      return await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          [buildingFieldName]: {
            increment: unitAmount,
          },
          crystal: { decrement: buildingCostCrystal * unitAmountDefault },
          ui_roids: { decrement: unitAmount },
        },
      });
    }),
});
````

## File: game/src/server/api/routers/paMail.ts
````typescript
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
import { z } from "zod";
export const paMailRouter = createTRPCRouter({
  getAll: privateProcedure.query(async ({ ctx }) => {
    const mails = await ctx.prisma.paMail.findMany();
    return { email: mails };
  }),
  getUnseenMailByUserId: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      const mails = await ctx.prisma.paMail.findMany({
        where: {
          sentTo: user?.id,
          seen: 0,
        },
        orderBy: { time: "desc" },
        take: 10,
      });
      return { email: mails };
    }),
  getAllMailByNick: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      if (!user) {
        return;
      }
      const mail = await ctx.prisma.paMail.findMany({
        where: {
          sentTo: user.id,
        },
        orderBy: { time: "desc" },
      });
      return { mail };
    }),
  sendMail: privateProcedure
    .input(z.object({ nick: z.string() }))
    .input(z.object({ news: z.string() }))
    .input(z.object({ header: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      if (!user) {
        return;
      }
      const mail = await ctx.prisma.paMail.create({
        data: {
          time: Math.floor(Date.now() / 1000), // get current time as a Unix timestamp
          sentTo: user.id,
          news: input.news,
          header: input.header,
        },
      });
      return { mail };
    }),
  deleteEmail: privateProcedure
    .input(z.object({ id: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const { id } = input;
      return await ctx.prisma.paMail.delete({
        where: {
          id,
        },
      });
    }),
  markAsSeen: privateProcedure
    .input(z.object({ sentTo: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const { sentTo } = input;
      return await ctx.prisma.paMail.updateMany({
        where: {
          sentTo,
          seen: 0,
        },
        data: { seen: 1 },
      });
    }),
});
````

## File: game/src/server/api/routers/paMilitary.ts
````typescript
import { z } from "zod";
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
export const paMilitaryRouter = createTRPCRouter({
  militaryAction: privateProcedure
    .input(
      z.object({
        Userid: z.number(),
        target: z.string(),
        energyCost: z.number().optional(),
        mode: z.enum(["attack", "defend"]),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const { Userid, target, mode, energyCost } = input;
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: target },
        select: { id: true },
      });
      // TODO Show an error if user is not found
      if (!user) {
        return;
      }
      const data = await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          [mode === "attack" ? "war" : "def"]: user.id,
          wareta: 30,
          ...(energyCost !== undefined && energyCost > 0
            ? { energy: { decrement: energyCost } }
            : {}),
        },
      });
      return data;
    }),
  retreatTroops: privateProcedure
    .input(
      z.object({
        Userid: z.number(),
      }),
    )
    .mutation(async ({ ctx, input }) => {
      const { Userid } = input;
      const data = await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          war: -1,
        },
      });
      return data;
    }),
});
````

## File: game/src/server/api/routers/paNews.ts
````typescript
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
import { z } from "zod";
export const paNewsRouter = createTRPCRouter({
  getAll: privateProcedure.query(async ({ ctx }) => {
    const news = await ctx.prisma.paNews.findMany();
    return { news };
  }),
  addNews: privateProcedure
    .input(z.object({ sentTo: z.number() }))
    .input(z.object({ news: z.string() }))
    .input(z.object({ header: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const news = await ctx.prisma.paNews.create({
        data: {
          time: Math.floor(Date.now() / 1000), // get current time as a Unix timestamp
          sentTo: input.sentTo,
          news: input.news,
          header: input.header,
        },
      });
      return { news };
    }),
  getAllNewsByUserId: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      const news = await ctx.prisma.paNews.findMany({
        where: {
          sentTo: user?.id,
        },
        orderBy: { time: "desc" },
      });
      return { news };
    }),
  deleteSingleNews: privateProcedure
    .input(z.object({ id: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const deleteNews = await ctx.prisma.paNews.delete({
        where: {
          id: input.id,
        },
      });
      return { deleteNews };
    }),
  deleteAllNews: privateProcedure
    .input(z.object({ nick: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      const deleteNews = await ctx.prisma.paNews.deleteMany({
        where: {
          sentTo: user?.id,
        },
      });
      return { deleteNews };
    }),
});
````

## File: game/src/server/api/routers/paSpying.ts
````typescript
import { z } from "zod";
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
import { calculateLand } from "@/utils/functions";
export const paSpyingRouter = createTRPCRouter({
  // TODO Add support for more spying options
  spyingInitiate: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ buildingETA: z.number() }))
    .input(z.object({ unitAmount: z.number().optional() }))
    .input(z.object({ spyingType: z.enum(["land"]).optional() })) // TODO Add more types and make it required
    .mutation(async ({ ctx, input }) => {
      const { Userid, buildingFieldName, buildingCostCrystal, unitAmount } =
        input;
      const unitAmountDefault = unitAmount || 0;
      const landFound = calculateLand(unitAmountDefault);
      return await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          [buildingFieldName]: {
            increment: unitAmount,
          },
          crystal: { decrement: buildingCostCrystal * unitAmountDefault },
          ui_roids: { increment: landFound },
        },
      });
    }),
});
````

## File: game/src/server/api/routers/paTag.ts
````typescript
import { z } from "zod";
import { createTRPCRouter, privateProcedure } from "@/server/api/trpc";
export const paTagRouter = createTRPCRouter({
  getAll: privateProcedure.query(({ ctx }) => {
    return ctx.prisma.paTag.findMany();
  }),
  createAlliance: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ tagName: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { Userid, tagName } = input;
      const player = await ctx.prisma.paUsers.findUnique({
        where: {
          id: Userid,
        },
      });
      if (!player) return;
      const tagExists = await ctx.prisma.paTag.findFirst({
        where: {
          tag: tagName,
        },
        select: { id: true, tag: true, leader: true, password: true },
      });
      if (!tagExists) {
        const garbage = "tag" + Math.random().toString(36).substring(7);
        const tagCreated = await ctx.prisma.paTag.create({
          data: {
            tag: tagName,
            password: garbage,
            leader: player.nick,
          },
        });
        await ctx.prisma.paUsers.update({
          where: {
            id: Userid,
          },
          data: {
            tag: tagName,
          },
        });
        return tagCreated;
      }
    }),
  joinAlliance: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ tagPassword: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { tagPassword } = input;
      const tagExists = await ctx.prisma.paTag.findFirst({
        where: {
          password: tagPassword,
        },
        select: {
          tag: true,
        },
      });
      if (tagExists) {
        await ctx.prisma.paUsers.update({
          where: {
            id: input.Userid,
          },
          data: {
            tag: tagExists.tag,
          },
        });
        return "Joined alliance";
      } else {
        return "Wrong password";
      }
    }),
  leaveAlliance: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const { Userid } = input;
      await ctx.prisma.paUsers.update({
        where: {
          id: Userid,
        },
        data: {
          tag: "",
        },
      });
    }),
});
````

## File: game/src/server/api/routers/paUsers.ts
````typescript
import { z } from "zod";
import {
  createTRPCRouter,
  privateProcedure,
  publicProcedure,
} from "@/server/api/trpc";
export const paUsersRouter = createTRPCRouter({
  createPlayer: publicProcedure
    .input(z.object({ nick: z.string() }))
    .mutation(async ({ ctx, input }) => {
    return await ctx.prisma.paUsers.create({
      data: {
        nick: input.nick,
        construction: { create: {} }, // create the construction field
      },
      include: { construction: true }, // include the construction field in the response
    });
    }),
  getAll: privateProcedure.query(async ({ ctx }) => {
    // Get all users ordered by score descending
    const users = await ctx.prisma.paUsers.findMany({
      orderBy: {
        score: "desc",
      },
    });
    // Update ranks based on score order
    const updatedUsers = await Promise.all(
      users.map(async (user, index) => {
        const updatedUser = await ctx.prisma.paUsers.update({
          where: { id: user.id },
          data: { rank: index + 1 }, // rank starts at 1
        });
        return updatedUser;
      })
    );
    return updatedUsers;
  }),
  getResourceOverview: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      return await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: {
          id: true,
          metal: true,
          crystal: true,
          energy: true,
          civilians: true,
          asteroid_crystal: true,
          asteroid_metal: true,
          score: true,
          rank: true,
          nick: true,
          newbie: true,
        },
      });
    }),
  getAttackedPlayer: privateProcedure
    .input(z.object({ Warid: z.number() }))
    .query(async ({ ctx, input }) => {
      return await ctx.prisma.paUsers.findUnique({
        where: { id: input.Warid },
        select: { id: true, nick: true },
      });
    }),
  getDefendedPlayer: privateProcedure
    .input(z.object({ Defid: z.number() }))
    .query(async ({ ctx, input }) => {
      return await ctx.prisma.paUsers.findUnique({
        where: { id: input.Defid },
        select: { id: true, nick: true },
      });
    }),
  getPlayerByNick: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true, tag: true, construction: true },
      });
      const player = await ctx.prisma.paUsers.findUnique({
        where: {
          id: user?.id,
        },
      });
      if (!player) {
        return null;
      }
      // If player has no paConstructId, create a new PaConstruct
      if (!player.paConstructId) {
        const newConstruct = await ctx.prisma.paConstruct.create({
          data: {}
        });
        // Link the new construct to the player
        await ctx.prisma.paUsers.update({
          where: { id: player.id },
          data: { paConstructId: newConstruct.id }
        });
        return { ...newConstruct, ...player, id: player.id };
      }
      const paConstruct = await ctx.prisma.paConstruct.findUnique({
        where: { id: player.paConstructId },
      });
      if (!paConstruct) {
        throw new Error(`No PaConstruct found for user with ID: ${player.id}`);
      }
      return { ...paConstruct, ...player, id: player.id };
    }),
  getFriendlies: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      const users = await ctx.prisma.paUsers.findMany({
        where: {
          def: user?.id,
        },
      });
      const forsvar = users
        .map((defender) => {
          const ships =
            defender.astropods +
            defender.infinitys +
            defender.wraiths +
            defender.warfrigs +
            defender.destroyers +
            defender.scorpions;
          const eta = defender.defeta >= 5 ? defender.defeta - 5 : 0;
          return `Friendly incoming fleet of ${ships} units: ${defender.nick} #${defender.id} (ETA: ${eta} ticks)`;
        })
        .join("\n \n");
      if (users.length === 0) {
        return { defenders: "" };
      }
      return {
        defenders: forsvar,
      };
    }),
  getHostiles: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true },
      });
      const users = await ctx.prisma.paUsers.findMany({
        where: {
          war: user?.id,
        },
      });
      const krig = users
        .map((defender) => {
          const ships =
            defender.astropods +
            defender.infinitys +
            defender.wraiths +
            defender.warfrigs +
            defender.destroyers +
            defender.scorpions;
          const eta = defender.wareta >= 5 ? defender.wareta - 5 : 0;
          return `Hostile incoming fleet of ${ships} units: ${defender.nick} #${defender.id} (ETA: ${eta} ticks)`;
        })
        .join("\n \n");
      if (users.length === 0) {
        return { hostiles: "" };
      }
      return {
        hostiles: krig,
      };
    }),
  getContinentIncoming: privateProcedure
    .input(z.object({ nick: z.string() }))
    .query(async ({ ctx, input }) => {
      const user = await ctx.prisma.paUsers.findUnique({
        where: { nick: input.nick },
        select: { id: true, x: true },
      });
      const hostiles = await ctx.prisma.paUsers.findMany({
        where: {
          motd: user?.x,
          war: { gt: 0 },
        },
        select: { war: true, wareta: true, nick: true, id: true },
      });
      const friendly = await ctx.prisma.paUsers.findMany({
        where: {
          motd: user?.x,
          def: { gt: 0 },
        },
        select: { def: true, defeta: true, nick: true, id: true },
      });
      const hostileFleets = hostiles.map((hostile) => {
        const eta = hostile.wareta >= 5 ? hostile.wareta - 5 : 0;
        return `Continent incoming fleet: ${hostile.nick} is attacking #${hostile.war} (ETA: ${eta})`;
      });
      const friendlyFleets = friendly.map((friendly) => {
        const eta = friendly.defeta >= 10 ? friendly.defeta - 10 : 0;
        return `Continent incoming fleet: ${friendly.nick} is defending #${friendly.def} (ETA: ${eta})`;
      });
      return {
        hostiles: hostileFleets.join("\n"),
        friendly: friendlyFleets.join("\n"),
      };
    }),
  researchBuilding: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingETA: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const {
        buildingFieldName,
        buildingCostCrystal,
        buildingCostTitanium,
        buildingETA,
      } = input;
      return await ctx.prisma.paUsers.update({
        where: {
          id: input.Userid,
        },
        data: {
          [buildingFieldName]: buildingETA,
          crystal: { decrement: buildingCostCrystal },
          metal: { decrement: buildingCostTitanium },
        },
      });
    }),
  // TODO Combine constructBuilding, produceUnit and researchBuilding into one?
  produceUnit: privateProcedure
    .input(z.object({ Userid: z.number() }))
    .input(z.object({ buildingFieldName: z.string() }))
    .input(z.object({ buildingFieldNameETA: z.string() }))
    .input(z.object({ buildingCostCrystal: z.number() }))
    .input(z.object({ buildingCostTitanium: z.number() }))
    .input(z.object({ unitAmount: z.number() }))
    .input(z.object({ buildingETA: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const {
        buildingFieldName,
        buildingFieldNameETA,
        buildingCostCrystal,
        buildingCostTitanium,
        unitAmount,
        buildingETA,
      } = input;
      const data = await ctx.prisma.paUsers.update({
        where: {
          id: input.Userid,
        },
        data: {
          [buildingFieldName]: {
            increment: unitAmount,
          },
          [buildingFieldNameETA]: buildingETA,
          crystal: { decrement: buildingCostCrystal * unitAmount },
          metal: { decrement: buildingCostTitanium * unitAmount },
        },
      });
      return data;
    }),
});
````

## File: game/src/server/api/root.ts
````typescript
import { createTRPCRouter } from "@/server/api/trpc";
// Import all routers
import { paUsersRouter } from "@/server/api/routers/paUsers";
import { paConstructRouter } from "@/server/api/routers/paConstruct";
import { paMailRouter } from "@/server/api/routers/paMail";
import { paNewsRouter } from "@/server/api/routers/paNews";
import { paTagRouter } from "@/server/api/routers/paTag";
import { paMilitaryRouter } from "@/server/api/routers/paMilitary";
import { paSpyingRouter } from "@/server/api/routers/paSpying";
/**
 * This is the primary router for your server.
 *
 * All routers added in /api/routers should be manually added here.
 */
export const appRouter = createTRPCRouter({
  paUsers: paUsersRouter,
  paConstruct: paConstructRouter,
  paMail: paMailRouter,
  paNews: paNewsRouter,
  paTag: paTagRouter,
  paMilitary: paMilitaryRouter,
  paSpying: paSpyingRouter,
});
// export type definition of API
export type AppRouter = typeof appRouter;
````

## File: game/src/server/api/trpc.ts
````typescript
/**
 * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:
 * 1. You want to modify request context (see Part 1).
 * 2. You want to create a new middleware or type of procedure (see Part 3).
 *
 * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will
 * need to use are documented accordingly near the end.
 */
/**
 * 1. CONTEXT
 *
 * This section defines the "contexts" that are available in the backend API.
 *
 * These allow you to access things when processing a request, like the database, the session, etc.
 */
import { type CreateNextContextOptions } from "@trpc/server/adapters/next";
import { getAuth } from "@clerk/nextjs/server";
import { prisma } from "@/server/db";
import { env } from "@/env.mjs";
/**
 * This helper generates the "internals" for a tRPC context. If you need to use it, you can export
 * it from here.
 *
 * Examples of things you may need it for:
 * - testing, so we don't have to mock Next.js' req/res
 * - tRPC's `createSSGHelpers`, where we don't have req/res
 *
 * @see https://create.t3.gg/en/usage/trpc#-servertrpccontextts
 */
/**
 * This is the actual context you will use in your router. It will be used to process every request
 * that goes through your tRPC endpoint.
 *
 * @see https://trpc.io/docs/context
 */
export const createTRPCContext = (opts: CreateNextContextOptions) => {
  const { req } = opts;
  const session = getAuth(req);
  const { userId } = session;
  const username = session.user?.username;
  return {
    prisma,
    userId,
    username,
  };
};
/**
 * 2. INITIALIZATION
 *
 * This is where the tRPC API is initialized, connecting the context and transformer. We also parse
 * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation
 * errors on the backend.
 */
import { initTRPC, TRPCError } from "@trpc/server";
import superjson from "superjson";
import { ZodError } from "zod";
const t = initTRPC.context<typeof createTRPCContext>().create({
  transformer: superjson,
  errorFormatter({ shape, error }) {
    return {
      ...shape,
      data: {
        ...shape.data,
        zodError:
          error.cause instanceof ZodError ? error.cause.flatten() : null,
      },
    };
  },
});
/**
 * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)
 *
 * These are the pieces you use to build your tRPC API. You should import these a lot in the
 * "/src/server/api/routers" directory.
 */
/**
 * This is how you create new routers and sub-routers in your tRPC API.
 *
 * @see https://trpc.io/docs/router
 */
export const createTRPCRouter = t.router;
/**
 * Public (unauthenticated) procedure
 *
 * This is the base piece you use to build new queries and mutations on your tRPC API. It does not
 * guarantee that a user querying is authorized, but you can still access user session data if they
 * are logged in.
 */
export const publicProcedure = t.procedure;
/** Reusable middleware that enforces users are logged in before running the procedure. */
const enforceUserIsAuthed = t.middleware(async ({ ctx, next }) => {
  const isDev = env.NODE_ENV === "development";
  if (!ctx.userId && !isDev) {
    throw new TRPCError({
      code: "UNAUTHORIZED",
    });
  }
  return next({
    ctx: {
      userId: isDev ? "admin" : ctx.userId,
    },
  });
});
export const privateProcedure = t.procedure.use(enforceUserIsAuthed);
````

## File: game/src/server/helpers/ssgHelper.ts
````typescript
import { createServerSideHelpers } from "@trpc/react-query/server";
import { appRouter } from "@/server/api/root";
import { prisma } from "@/server/db";
import superjson from "superjson";
export const generateSSGHelper = () =>
  createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null, username: null },
    transformer: superjson, // optional - adds superjson serialization
  });
````

## File: game/src/server/db.ts
````typescript
import { PrismaClient } from "@prisma/client";
import { env } from "@/env.mjs";
const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    //TODO Re-enable debug
    /* log:
      env.NODE_ENV === "development" ? ["query", "error", "warn"] : ["error"],
      */
  });
if (env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
````

## File: game/src/styles/globals.css
````css
@tailwind base;
@tailwind components;
@tailwind utilities;
/* Hide Clerk badge */
.cl-internal-b3fm6y {
  display: none;
}
````

## File: game/src/utils/__mocks__/api.ts
````typescript
export const api = {
  config() {
    return {};
  },
  ssr: true,
};
````

## File: game/src/utils/api.ts
````typescript
/**
 * This is the client-side entrypoint for your tRPC API. It is used to create the `api` object which
 * contains the Next.js App-wrapper, as well as your type-safe React Query hooks.
 *
 * We also create a few inference helpers for input and output types.
 */
import { httpBatchLink, loggerLink } from "@trpc/client";
import { createTRPCNext } from "@trpc/next";
import { type inferRouterInputs, type inferRouterOutputs } from "@trpc/server";
import superjson from "superjson";
import { type AppRouter } from "@/server/api/root";
const getBaseUrl = () => {
  if (typeof window !== "undefined") {
    return "";
  } // browser should use relative url
  if (process.env.VERCEL_URL) {
    return `https://${process.env.VERCEL_URL}`;
  } // SSR should use vercel url
  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost
};
/** A set of type-safe react-query hooks for your tRPC API. */
export const api = createTRPCNext<AppRouter>({
  config() {
    return {
      /**
       * Transformer used for data de-serialization from the server.
       *
       * @see https://trpc.io/docs/data-transformers
       */
      transformer: superjson,
      /**
       * Links used to determine request flow from client to server.
       *
       * @see https://trpc.io/docs/links
       */
      links: [
        loggerLink({
          enabled: (opts) =>
            process.env.NODE_ENV === "development" ||
            (opts.direction === "down" && opts.result instanceof Error),
        }),
        httpBatchLink({
          url: `${getBaseUrl()}/api/trpc`,
        }),
      ],
      // Change options globally
      queryClientConfig: {
        defaultOptions: {
          queries: {
            refetchOnMount: false, // Don't refetch on mount to avoid loading spinners
            refetchOnWindowFocus: false,
            refetchInterval: 1000 * 60, // Refetch every 60 seconds
            refetchIntervalInBackground: true, // Keep fetching even when tab is in background
            staleTime: 1000 * 30, // Consider data fresh for 30 seconds
            cacheTime: 1000 * 60 * 2, // Keep cached data for 2 minutes
          },
        },
      },
    };
  },
  /**
   * Whether tRPC should await queries when server rendering pages.
   *
   * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false
   */
  //ssr: false, //<--- this is the default
  ssr: true,
});
/**
 * Inference helper for inputs.
 *
 * @example type HelloInput = RouterInputs['example']['hello']
 */
export type RouterInputs = inferRouterInputs<AppRouter>;
/**
 * Inference helper for outputs.
 *
 * @example type HelloOutput = RouterOutputs['example']['hello']
 */
export type RouterOutputs = inferRouterOutputs<AppRouter>;
````

## File: game/src/utils/functions.tsx
````typescript
import type { PaPlayer } from "@/components/features/Military/Military";
import type { IProduction } from "@/components/features/Production/types/types";
import type { PaUsers } from "@prisma/client";
// Extended type that includes construction fields directly
type PaUserWithConstruct = PaUsers & {
  c_crystal: number;
  c_metal: number;
  c_airport: number;
  c_abase: number;
  c_wstation: number;
  c_amp1: number;
  c_amp2: number;
  c_warfactory: number;
  c_destfact: number;
  c_scorpfact: number;
  c_energy: number;
  c_odg: number;
};
interface IStringifierProps {
  value?: unknown;
}
interface IRenderMessageProps {
  title: string;
  message: string;
}
/**
 * Calculates the amount of land discovered based on the number of search attempts.
 *
 * @param {number} searchAttempts - The number of search attempts made.
 * @return {number} The total amount of land discovered.
 */
export const calculateLand = (searchAttempts: number): number => {
  let totalLand = 0;
  for (
    let currentAttempt = 0;
    currentAttempt < searchAttempts;
    currentAttempt++
  ) {
    const randomFactor = Math.floor(Math.random() * (2 + totalLand));
    if (randomFactor < 20) {
      totalLand++;
    }
  }
  return totalLand;
};
/**
 * Renders a message component with a title and a message.
 *
 * @param {IRenderMessageProps} props - The properties of the message component.
 * @param {string} props.title - The title of the message.
 * @param {string} props.message - The content of the message.
 * @return {JSX.Element} The rendered message component.
 */
export const renderMessage = ({ title, message }: IRenderMessageProps) => {
  return (
    <>
      <h1 className="mt-6 text-center text-2xl font-bold text-white">
        {title}
      </h1>
      <div className="mb-4 mt-6 w-[20.625rem] rounded bg-white px-8 py-5 shadow-md md:w-[47.125rem]">
        <h2 className="text-md p-2 text-center text-black md:text-lg">
          {message}
        </h2>
      </div>
    </>
  );
};
/**
 * Determines if a string is valid JSON or not.
 * @param {string} str - The string to be validated.
 * @returns {boolean} - Returns true if the string is valid JSON, false otherwise.
 */
export const isJSON = (str: string): boolean => {
  let value: unknown = str;
  try {
    value = JSON.parse(str);
  } catch (err) {
    return false;
  }
  return typeof value === "object" && value !== null;
};
/**
 * Converts a value to a string and renders it as a React element.
 * @param {IStringifierProps} props - The props for the component
 * @returns {JSX.Element} The stringified value as a React element
 */
export const Stringifier = ({ value }: IStringifierProps) => {
  let stringifiedValue: string;
  // We check if the value is a string, number or bigint. If it is, we convert it to a string. Otherwise, we set it to an empty string.
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "bigint"
  ) {
    stringifiedValue = String(value);
  } else {
    stringifiedValue = "";
  }
  return <span className="max-w-[12rem] pl-8 md:pl-0">{stringifiedValue}</span>;
};
/**
 * Calculates the maximum number of units that can be trained based on the player's resources and the production cost of the unit.
 * @param {PaUsers} paPlayer - The player.
 * @param {IProduction} production - The production cost of the unit.
 * @returns {number} - The maximum number of units that can be trained.
 */
export const maximumToTrain = (paPlayer: PaPlayer, production: IProduction) => {
  const maxValues = [];
  maxValues.push(Math.floor(paPlayer.crystal / production.buildingCostCrystal));
  if (production.buildingCostTitanium !== 0) {
    maxValues.push(
      Math.floor(paPlayer.metal / production.buildingCostTitanium),
    );
  }
  // We filter out NaN values because if the player has no resources, the division will result in NaN.
  const filteredMaxValues = maxValues.filter((value) => !isNaN(value));
  // We use Math.min to determine the maximum number of units that can be trained.
  return Math.min(...filteredMaxValues);
};
/**
 * Checks if a player can afford to train a unit.
 *
 * @param {PaPlayer[]} paPlayer - The array of players.
 * @param {number} costCrystal - The cost of crystal.
 * @param {number} costTitanium - The cost of titanium.
 * @param {number} [unitAmount=1] - The amount of units to train.
 * @param {boolean} [considerLand=false] - Whether to consider land availability.
 * @returns {boolean} Returns true if the player can afford to train the unit, otherwise false.
 */
export const canAffordToTrain = (
  paPlayer: PaPlayer[],
  costCrystal: number,
  costTitanium: number,
  unitAmount: number,
  considerLand: boolean = false,
): boolean => {
  unitAmount = unitAmount || 1;
  const crystalCost = unitAmount * costCrystal;
  const titaniumCost = unitAmount * costTitanium;
  if (!paPlayer[0]) return false;
  if (
    (costCrystal === 0 || crystalCost <= paPlayer[0].crystal) &&
    (costTitanium === 0 || titaniumCost <= paPlayer[0].metal)
  ) {
    if (considerLand && unitAmount > paPlayer[0].ui_roids) {
      return false;
    }
    return (
      paPlayer[0].crystal - crystalCost >= 0 &&
      paPlayer[0].metal - titaniumCost >= 0
    );
  }
  return false;
};
/**
 * Renders income data based on the given player object
 * @param {PaUsers} paPlayer - The player object containing asteroid_metal and civilians properties
 * @returns {Object} - The income data object containing labels, datasets and their respective data
 */
export const renderIncomeData = (paPlayer: PaUserWithConstruct) => {
  const { sats } = paPlayer;
  const tax = 20;
  const extraTitanium = paPlayer.r_immetal ? 1 : 0;
  const extraCrystal = paPlayer.r_imcrystal ? 1 : 0;
  console.log("Extra crystal:", extraCrystal)
  const civilians = paPlayer.civilians || 1000;
  const metalroid = paPlayer.asteroid_metal;
  const incomeCredits = Math.floor((civilians * tax) / 100);
  const incomeCreditsWithTest =
  extraCrystal === 1
    ? incomeCredits + Math.floor(incomeCredits * 0.1)
    : incomeCredits;
    console.log("Extra crystal bonus:", incomeCreditsWithTest)
  /*
  const incomeCreditsWithBonus =
    extraCrystal === 1
      ? incomeCredits + Math.floor(incomeCredits * 0.1)
      : incomeCredits;
      */
  const incomeCreditsWithBonus = incomeCredits;
  const incomeTitanium =
    metalroid * 60 + (extraTitanium === 1 ? Math.floor(metalroid * 0.1) : 0);
  const incomeEnergy = sats * 45;
  return {
    labels: ["Titanium", "Credits", "Energy"],
    datasets: [
      {
        label: "Income",
        data: [incomeTitanium, incomeCreditsWithBonus, incomeEnergy],
        backgroundColor: ["rgba(59, 113, 202, 1)"],
        borderColor: ["rgba(255,255,255,1)"],
        borderWidth: 2,
      },
    ],
  };
};
/**
 * Calculates the total count of ships for a given PaUsers object.
 * @param {PaUsers} paPlayer - The PaUsers object to calculate the ship count for.
 * @returns {number} The total count of ships for the given PaUsers object.
 */
export const getShipCount = (paPlayer: PaPlayer) => {
  const shipProperties = [
    "astropods",
    "infinitys",
    "wraiths",
    "warfrigs",
    "destroyers",
    "scorpions",
  ];
  return shipProperties.reduce(
    (count, property) => count + Number(paPlayer[property]),
    0,
  );
};
````

## File: game/src/utils/hooks.ts
````typescript
import { createRef } from "react";
import type { RefObject } from "react";
/**
 * Creates an array of RefObjects for the specified length.
 *
 * @template T - The type of HTMLInputElement the RefObject will reference.
 * @param {number} length - The number of RefObjects to create.
 * @returns {RefObject<T>[]} - An array of RefObjects of the specified length.
 */
export const useMultipleRefs = <T extends HTMLInputElement>(
  length: number,
): RefObject<T>[] => {
  const refs = Array(length)
    .fill(null)
    .map(() => createRef<T>());
  return refs;
};
````

## File: game/src/env.mjs
````
import { z } from "zod";

/**
 * Specify your server-side environment variables schema here. This way you can ensure the app isn't
 * built with invalid env vars.
 */
const server = z.object({
  DATABASE_URL: z.string().url(),
  NODE_ENV: z.enum(["development", "test", "production"]),
});

/**
 * Specify your client-side environment variables schema here. This way you can ensure the app isn't
 * built with invalid env vars. To expose them to the client, prefix them with `NEXT_PUBLIC_`.
 */
const client = z.object({
  // NEXT_PUBLIC_CLIENTVAR: z.string().min(1),
});

/**
 * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.
 * middlewares) or client-side so we need to destruct manually.
 *
 * @type {Record<keyof z.infer<typeof server> | keyof z.infer<typeof client>, string | undefined>}
 */
const processEnv = {
  DATABASE_URL: process.env.DATABASE_URL,
  NODE_ENV: process.env.NODE_ENV,
  // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,
};

// Don't touch the part below
// --------------------------

const merged = server.merge(client);

/** @typedef {z.input<typeof merged>} MergedInput */
/** @typedef {z.infer<typeof merged>} MergedOutput */
/** @typedef {z.SafeParseReturnType<MergedInput, MergedOutput>} MergedSafeParseReturn */

let env = /** @type {MergedOutput} */ (process.env);

if (!!process.env.SKIP_ENV_VALIDATION == false) {
  const isServer = typeof window === "undefined";

  const parsed = /** @type {MergedSafeParseReturn} */ (
    isServer
      ? merged.safeParse(processEnv) // on server we can validate all env vars
      : client.safeParse(processEnv) // on client we can only validate the ones that are exposed
  );

  if (parsed.success === false) {
    console.error(
      "❌ Invalid environment variables:",
      parsed.error.flatten().fieldErrors
    );
    throw new Error("Invalid environment variables");
  }

  env = new Proxy(parsed.data, {
    get(target, prop) {
      if (typeof prop !== "string") return undefined;
      // Throw a descriptive error if a server-side env var is accessed on the client
      // Otherwise it would just be returning `undefined` and be annoying to debug
      if (!isServer && !prop.startsWith("NEXT_PUBLIC_"))
        throw new Error(
          process.env.NODE_ENV === "production"
            ? "❌ Attempted to access a server-side environment variable on the client"
            : `❌ Attempted to access server-side environment variable '${prop}' on the client`
        );
      return target[/** @type {keyof typeof target} */ (prop)];
    },
  });
}

export { env };
````

## File: game/src/middleware.ts
````typescript
//import { withClerkMiddleware } from "@clerk/nextjs/server";
import { authMiddleware } from "@clerk/nextjs";
//import { NextResponse } from "next/server";
/*
export default withClerkMiddleware(() => {
  return NextResponse.next();
});
*/
export default authMiddleware({
  // Routes that can be accessed while signed out
  publicRoutes: ["/anyone-can-visit-this-route"],
  // Routes that can always be accessed, and have
  // no authentication information
  ignoredRoutes: ["/no-auth-in-this-route"],
});
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next
     * - static (static files)
     * - favicon.ico (favicon file)
     */
    "/(.*?trpc.*?|(?!static|.*\\..*|_next|favicon.ico).*)",
    "/",
  ],
};
````

## File: game/src/next-env.d.ts
````typescript
/// <reference types="next" />
/// <reference types="next/image-types/global" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.
declare module "tw-elements/dist/plugin";
declare module "tw-elements";
````

## File: game/.eslintrc.cjs
````
/** @type {import("eslint").Linter.Config} */
module.exports = {
  extends: [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    project: true,
    tsconfigRootDir: __dirname,
  },
  rules: {
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/consistent-type-imports": [
      "warn",
      {
        prefer: "type-imports",
        fixStyle: "inline-type-imports",
      },
    ],
    "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }],
    "@typescript-eslint/no-misused-promises": [
      2,
      {
        checksVoidReturn: {
          attributes: false,
        },
      },
    ],
  },
};
````

## File: game/.gitignore
````
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# database
/prisma/db.sqlite
/prisma/db.sqlite-journal

# next.js
/.next/
/out/
# next-env.d.ts

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
# do not commit any .env files to git, except for the .env.example file. https://create.t3.gg/en/usage/env-variables#using-environment-variables
.env
.env*.local
.env*
.env.*

# vercel
.vercel

# typescript
*.tsbuildinfo
````

## File: game/global.d.ts
````typescript
declare module "tw-elements/plugin.cjs";
````

## File: game/index.d.ts
````typescript
declare module "flowbite/plugin";
````

## File: game/jest.config.js
````javascript
const nextJest = require('next/jest');
const createJestConfig = nextJest({
  dir: './',
});
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '^server/(.*)$': '<rootDir>/src/server/$1',
    '^@prisma/client$': '<rootDir>/node_modules/@prisma/client',
  },
  moduleDirectories: ['node_modules', '<rootDir>/'],
  testPathIgnorePatterns: ['<rootDir>/.next/', '<rootDir>/node_modules/'],
  transform: {
    '^.+\\.(ts|tsx|js|jsx)$': ['ts-jest', {
      tsconfig: 'tsconfig.json',
      useESM: true,
    }]
  },
  transformIgnorePatterns: [
    '/node_modules/(?!(@prisma|@clerk|superjson|@trpc)/)',
  ],
  extensionsToTreatAsEsm: ['.ts', '.tsx'],
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node', 'mjs'],
};
module.exports = createJestConfig(customJestConfig);
````

## File: game/jest.setup.ts
````typescript
import '@testing-library/jest-dom';
````

## File: game/next-env.d.ts
````typescript
/// <reference types="next" />
/// <reference types="next/image-types/global" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/building-your-application/configuring/typescript for more information.
````

## File: game/next.config.mjs
````
/**
 * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation.
 * This is especially useful for Docker builds.
 */
!process.env.SKIP_ENV_VALIDATION && (await import("./src/env.mjs"));

/** @type {import("next").NextConfig} */
const config = {
  reactStrictMode: true,

  /**
   * If you have the "experimental: { appDir: true }" setting enabled, then you
   * must comment the below `i18n` config out.
   *
   * @see https://github.com/vercel/next.js/issues/41980
   */
  i18n: {
    locales: ["en"],
    defaultLocale: "en",
  },
};
export default config;
````

## File: game/package.json
````json
{
  "name": "earthdoom-game",
  "version": "0.4.7",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "postinstall": "prisma generate",
    "lint": "next lint",
    "start": "next start",
    "prisma:generate": "prisma generate",
    "format": "prettier --write \"**/*.{ts,tsx,json}\"",
    "refresh": "rm -rf node_modules && rm package-lock.json && npm i && npm run format",
    "test": "jest"
  },
  "dependencies": {
    "@clerk/nextjs": "^4.31.6",
    "@prisma/client": "^6.0.0",
    "@tanstack/react-query": "4.36.1",
    "@tanstack/react-query-devtools": "4.36.1",
    "@trpc/client": "^10.45.2",
    "@trpc/next": "^10.45.2",
    "@trpc/react-query": "^10.45.2",
    "@trpc/server": "^10.45.2",
    "chart.js": "^4.4.7",
    "date-fns": "^4.1.0",
    "next": "^15.0.0",
    "react": "18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "18.3.1",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.4.0",
    "react-use": "^17.6.0",
    "superjson": "2.2.2",
    "tw-elements": "^2.0.0",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.26.0",
    "@babel/preset-react": "^7.26.3",
    "@babel/preset-typescript": "^7.26.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.1.0",
    "@types/eslint": "^9.6.1",
    "@types/jest": "^29.5.14",
    "@types/node": "^22.10.1",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@typescript-eslint/eslint-plugin": "^8.0.0",
    "@typescript-eslint/parser": "^8.0.0",
    "autoprefixer": "^10.4.20",
    "babel-jest": "^29.7.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "^15.0.3",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-mock-extended": "^4.0.0-beta1",
    "postcss": "^8.4.49",
    "prettier": "3.4.2",
    "prettier-plugin-tailwindcss": "^0.6.9",
    "prisma": "^6.0.0",
    "prisma-docs-generator": "^0.8.0",
    "tailwindcss": "^3.4.15",
    "ts-jest": "^29.2.5",
    "typescript": "^5.7.2"
  },
  "ct3aMetadata": {
    "initVersion": "7.15.0"
  }
}
````

## File: game/postcss.config.cjs
````
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

module.exports = config;
````

## File: game/prettier.config.cjs
````
/** @type {import("prettier").Config} */
const config = {
  plugins: [require.resolve("prettier-plugin-tailwindcss")],
};

module.exports = config;
````

## File: game/renovate.json
````json
{
  "extends": ["config:base"],
  "ignorePresets": [":prHourlyLimit2", ":prConcurrentLimit20"],
  "packageRules": [
    {
      "rangeStrategy": "bump",
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    },
    {
      "matchUpdateTypes": ["minor", "pin", "digest"],
      "automerge": true,
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    },
    {
      "matchUpdateTypes": ["patch", "lockFileMaintenance"],
      "automerge": true,
      "automergeType": "branch",
      "matchDepTypes": [
        "dependencies",
        "devDependencies",
        "optionalDependencies",
        "peerDependencies"
      ]
    }
  ]
}
````

## File: game/tailwind.config.cjs
````
/** @type {import('tailwindcss').Config} */
const config = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx}",
    "./node_modules/tw-elements/js/**/*.js"
  ],
  theme: {
    extend: {},
  },
  plugins: [require("tw-elements/plugin.cjs")],
};

module.exports = config;
````

## File: game/tsconfig.json
````json
{
  "compilerOptions": {
    "target": "es2019",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "checkJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "noUncheckedIndexedAccess": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    ".eslintrc.cjs",
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    "**/*.cjs",
    "**/*.mjs"
  ],
  "exclude": ["node_modules"]
}
````

## File: tools/Battle calculator/battle_calc.py
````python
from rich.console import Console
from rich.table import Table
from rich.prompt import IntPrompt
console = Console()
# Units in attack order (weakest to strongest)
UNIT_ORDER = [
    'Infantry',    # 250
    'Reaper',      # 800
    'Shadows',     # 1000
    'Avenger',     # 1400
    'Grabber',    # 1600
    'Cobra',       # 3000
    'Goliaths',    # 5000
    'Hellspawn',   # 5000
    'LuciusStalker', # 6000
    'Ares',        # 7000
]
UNIT_SCORES = {
    'Infantry': 250,
    'Reaper': 800,
    'Shadows': 1000,
    'Avenger': 1400,
    'Grabber': 1600,
    'Cobra': 3000,
    'Goliaths': 5000,
    'Hellspawn': 5000,
    'LuciusStalker': 6000,
    'Ares': 7000,
}
COMBAT_STATS = {
    'Infantry': {
        'Infantry': 0.025,
        'Shadows': 0.02,
        'Goliaths': 1.6,
        'Hellspawn': 0.8,
        'Ares': 3.00,
        'Cobra': 0.02,
        'Grabber': 0.015,
        'Reaper': 0.005,
    },
    'Shadows': {
        'Infantry': 0.02,
        'Shadows': 0.105,
        'Goliaths': 1.2,
        'Hellspawn': 0.31,
        'Ares': 2.35,
        'Cobra': 0.005,
        'Grabber': 0.015,
        'Reaper': 0.04,
    },
    'Goliaths': {
        'Infantry': 0.015,
        'Shadows': 0.025,
        'Goliaths': 0.05,
        'Hellspawn': 0.3,
        'Ares': 0.125,
        'Cobra': 0.015,
        'Grabber': 0.055,
        'Reaper': 0.1,
    },
    'Grabber': {
        'Infantry': 0.015,
        'Shadows': 0.015,
        'Goliaths': 0.055,
        'Hellspawn': 0.11,
        'Ares': 0.135,
        'Cobra': 0.0,
        'Grabber': 0.0,
        'Reaper': 0.1,
    },
    'Cobra': {
        'Infantry': 0.02,
        'Shadows': 0.005,
        'Goliaths': 0.015,
        'Hellspawn': 0.25,
        'Ares': 1.00,
        'Cobra': 0.0,
        'Grabber': 0.0,
        'Reaper': 0.09,
    },
    'Hellspawn': {
        'Infantry': 0.0025,
        'Shadows': 0.027,
        'Goliaths': 0.025,
        'Hellspawn': 0.05,
        'Ares': 0.18,
        'Cobra': 0.25,
        'Grabber': 0.11,
        'Reaper': 0.15,
    },
    'Ares': {
        'Infantry': 0.0035,
        'Shadows': 0.025,
        'Goliaths': 0.025,
        'Hellspawn': 0.04,
        'Ares': 0.05,
        'Cobra': 1.00,
        'Grabber': 0.135,
        'Reaper': 0.25,
    },
    'Reaper': {
        'Infantry': 0.005,
        'Shadows': 0.04,
        'Goliaths': 0.1,
        'Hellspawn': 0.15,
        'Ares': 0.25,
        'Cobra': 0.0,
        'Grabber': 0.0,
        'Reaper': 0.0,
    },
    'Avenger': {
        'Infantry': 0.0,
        'Shadows': 0.1,
        'Goliaths': 0.07,
        'Hellspawn': 0.0,
        'Ares': 0.0,
        'Cobra': 0.0,
        'Grabber': 0.0,
        'Reaper': 0.2,
    },
    'LuciusStalker': {
        'Infantry': 0.0,
        'Shadows': 0.07,
        'Goliaths': 0.0,
        'Hellspawn': 0.08,
        'Ares': 0.1,
        'Cobra': 0.0,
        'Grabber': 0.0,
        'Reaper': 0.0,
    }
}
LAND_CAPTURE_RATE = 0.1  # 10% capture rate per Grabber
def get_unit_counts(side):
    units = {}
    console.print(f"\n[bold cyan]Enter {side} unit counts:[/bold cyan]")
    for unit_type in UNIT_ORDER:  # Use ordered list for input
        count = IntPrompt.ask(f"Number of {unit_type}", default=0)
        units[unit_type] = count
    return units
def calculate_damage_step(attacker_type, attacker_count, defender_type, defender_count):
    if attacker_count > 0 and defender_count > 0:
        effectiveness = COMBAT_STATS[attacker_type].get(defender_type, 0)
        if effectiveness > 0:
            damage = attacker_count * effectiveness
            killed = min(defender_count, int(damage))
            return {
                'attacker': attacker_type,
                'attacker_count': attacker_count,
                'defender': defender_type,
                'defender_count': defender_count,
                'effectiveness': effectiveness,
                'damage': damage,
                'killed': killed
            }
    return None
def simulate_battle(attacker_units, defender_units):
    battle_log = []
    current_units = {
        'attackers': attacker_units.copy(),
        'defenders': defender_units.copy()
    }
    total_results = {
        'attackers': {'units_killed': {}, 'survivors': {}, 'score_lost': 0},
        'defenders': {'units_killed': {}, 'survivors': {}, 'score_lost': 0}
    }
    # Display attack order
    battle_log.append("[bold cyan]Unit Attack Order (weakest to strongest):[/bold cyan]")
    for i, unit in enumerate(UNIT_ORDER, 1):
        battle_log.append(f"{i}. {unit} (Score: {UNIT_SCORES[unit]:,})")
    battle_log.append("")
    # Process each attacking unit's actions in order
    battle_log.append("[bold cyan]Attacker Phase:[/bold cyan]")
    for att_type in UNIT_ORDER:  # Use ordered list for attacks
        if att_type in attacker_units and attacker_units[att_type] > 0:
            battle_log.append(f"\n[yellow]{att_type} actions (Score: {UNIT_SCORES[att_type]:,}):[/yellow]")
            for def_type in UNIT_ORDER:  # Use ordered list for targets
                if def_type in defender_units and defender_units[def_type] > 0:
                    step = calculate_damage_step(
                        att_type, 
                        current_units['attackers'][att_type],
                        def_type,
                        current_units['defenders'][def_type]
                    )
                    if step:
                        battle_log.append(
                            f"{step['attacker_count']} {step['attacker']} "
                            f"attack {step['defender_count']} {step['defender']} "
                            f"(effectiveness: {step['effectiveness']:.3f}) "
                            f"dealing {step['damage']:.1f} damage, "
                            f"killing {step['killed']} units"
                        )
                        current_units['defenders'][def_type] -= step['killed']
                        total_results['defenders']['units_killed'][def_type] = \
                            total_results['defenders']['units_killed'].get(def_type, 0) + step['killed']
    # Process each defending unit's actions in order
    battle_log.append("\n[bold cyan]Defender Phase:[/bold cyan]")
    for def_type in UNIT_ORDER:  # Use ordered list for attacks
        if def_type in defender_units and defender_units[def_type] > 0:
            battle_log.append(f"\n[yellow]{def_type} actions (Score: {UNIT_SCORES[def_type]:,}):[/yellow]")
            for att_type in UNIT_ORDER:  # Use ordered list for targets
                if att_type in attacker_units and attacker_units[att_type] > 0:
                    step = calculate_damage_step(
                        def_type,
                        current_units['defenders'][def_type],
                        att_type,
                        current_units['attackers'][att_type]
                    )
                    if step:
                        battle_log.append(
                            f"{step['attacker_count']} {step['attacker']} "
                            f"attack {step['defender_count']} {step['defender']} "
                            f"(effectiveness: {step['effectiveness']:.3f}) "
                            f"dealing {step['damage']:.1f} damage, "
                            f"killing {step['killed']} units"
                        )
                        current_units['attackers'][att_type] -= step['killed']
                        total_results['attackers']['units_killed'][att_type] = \
                            total_results['attackers']['units_killed'].get(att_type, 0) + step['killed']
    # Calculate survivors and score losses
    for side in ['attackers', 'defenders']:
        units = attacker_units if side == 'attackers' else defender_units
        for unit_type in UNIT_ORDER:  # Use ordered list for consistent order
            if unit_type in units:
                killed = total_results[side]['units_killed'].get(unit_type, 0)
                total_results[side]['survivors'][unit_type] = units[unit_type] - killed
                total_results[side]['score_lost'] += killed * UNIT_SCORES.get(unit_type, 0)
    return battle_log, total_results
def calculate_land_capture(attacker_units, defender_land):
    Grabbers = attacker_units.get('Grabber', 0)
    if Grabbers > 0:
        max_capture = min(Grabbers * LAND_CAPTURE_RATE, defender_land)
        return {
            'metal': round(max_capture * 0.4),
            'crystal': round(max_capture * 0.4),
            'undeveloped': round(max_capture * 0.2)
        }
    return {'metal': 0, 'crystal': 0, 'undeveloped': 0}
def display_results(attacker_units, defender_units, battle_log, combat_results, land_capture, defender_land):
    # Display battle log
    console.print("\n[bold cyan]Battle Log:[/bold cyan]")
    for line in battle_log:
        console.print(line)
    # Display force summaries
    for side, units in [("Attacker", attacker_units), ("Defender", defender_units)]:
        console.print(f"\n[bold cyan]{side} Force Summary:[/bold cyan]")
        table = Table()
        table.add_column("Unit Type", style="cyan")
        table.add_column("Initial", justify="right")
        table.add_column("Lost", justify="right", style="red")
        table.add_column("Survivors", justify="right", style="green")
        table.add_column("Unit Score", justify="right", style="yellow")
        table.add_column("Score Lost", justify="right", style="red")
        side_key = 'attackers' if side == "Attacker" else 'defenders'
        total_initial_score = 0
        total_lost_score = 0
        for unit_type in UNIT_ORDER:  # Use ordered list for consistent display
            if units.get(unit_type, 0) > 0:
                initial = units[unit_type]
                lost = combat_results[side_key]['units_killed'].get(unit_type, 0)
                survivors = combat_results[side_key]['survivors'].get(unit_type, 0)
                unit_score = UNIT_SCORES[unit_type]
                score_lost = lost * unit_score
                total_initial_score += initial * unit_score
                total_lost_score += score_lost
                table.add_row(
                    unit_type,
                    str(initial),
                    str(lost),
                    str(survivors),
                    f"{unit_score:,}",
                    f"{score_lost:,}"
                )
        table.add_row(
            "[bold]TOTALS",
            "",
            "",
            "",
            f"[bold yellow]{total_initial_score:,}",
            f"[bold red]{total_lost_score:,}"
        )
        console.print(table)
    # Display land capture results
    land_table = Table(title="Land Capture Results")
    land_table.add_column("Category", style="cyan")
    land_table.add_column("Amount", justify="right")
    land_table.add_row("Defender's Total Land", str(defender_land))
    land_table.add_row("Metal Land Captured", f"[green]{land_capture['metal']}[/green]")
    land_table.add_row("Crystal Land Captured", f"[blue]{land_capture['crystal']}[/blue]")
    land_table.add_row("Undeveloped Land Captured", f"[yellow]{land_capture['undeveloped']}[/yellow]")
    land_table.add_row("Total Land Captured", f"[bold green]{sum(land_capture.values())}[/bold green]")
    console.print("\n")
    console.print(land_table)
def main():
    console.print("[bold green]EarthDoom Battle Calculator[/bold green]")
    # Get unit counts
    attacker_units = get_unit_counts("attacker")
    defender_units = get_unit_counts("defender")
    # Get defender's land
    defender_land = IntPrompt.ask("\nDefender's total land", default=0)
    # Simulate battle
    battle_log, combat_results = simulate_battle(attacker_units, defender_units)
    # Calculate land capture
    land_capture = calculate_land_capture(attacker_units, defender_land)
    # Display results
    display_results(attacker_units, defender_units, battle_log, combat_results, land_capture, defender_land)
if __name__ == "__main__":
    main()
````

## File: tools/Battle calculator/README.md
````markdown
# Battle Calculator

A command-line tool for simulating battle outcomes in EarthDoom.

## Features
- Calculates damage between different unit types:
  - Infantry
  - Shadows
  - Goliaths
  - Hellspawn
  - Ares
- Provides detailed battle summaries
- Interactive unit count input
- Rich console output with formatted tables

## Requirements
- Python 3.x
- rich library

## Usage
```bash
python battle_calc.py
```

Follow the prompts to input attacker and defender unit counts. The tool will calculate and display:
- Individual unit damage calculations
- Total damage summaries
- Formatted battle results
````

## File: tools/Database tools/delete.py
````python
import os
import psycopg2
import dotenv
from psycopg2 import sql
dotenv.load_dotenv()
# Render PostgreSQL database connection details
DATABASE_URL = os.environ.get("DATABASE_URL")
def connect_to_db():
    """Establish a connection to the database."""
    try:
        conn = psycopg2.connect(DATABASE_URL)
        return conn
    except psycopg2.Error as e:
        print(f"Unable to connect to the database: {e}")
        return None
def get_all_tables(cursor):
    """Retrieve all table names in the database."""
    cursor.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public'
    """)
    return [table[0] for table in cursor.fetchall()]
def delete_all_data(conn):
    """Delete all data from all tables in the database."""
    try:
        with conn.cursor() as cursor:
            tables = get_all_tables(cursor)
            for table in tables:
                print(f"Deleting data from table: {table}")
                cursor.execute(
                    sql.SQL("TRUNCATE TABLE {} CASCADE").format(sql.Identifier(table))
                )
            conn.commit()
            print("All data has been deleted successfully.")
    except psycopg2.Error as e:
        conn.rollback()
        print(f"An error occurred while deleting data: {e}")
def main():
    conn = connect_to_db()
    if conn:
        delete_all_data(conn)
        conn.close()
if __name__ == "__main__":
    main()
````

## File: tools/Database tools/README.md
````markdown
# Database Tools

Utilities for managing the EarthDoom PostgreSQL database.

## Tools

### delete.py
A utility for safely clearing all tables in the database.

#### Features
- Safe database connection handling
- Cascading deletion support
- Error handling and rollback
- Environment variable configuration

#### Requirements
- Python 3.x
- psycopg2
- python-dotenv

#### Usage
1. Set up your database URL in a `.env` file:
```
DATABASE_URL=postgresql://username:password@host:port/dbname
```

2. Run the utility:
```bash
python delete.py
```

#### How it works
- Connects to the database using environment variables
- Retrieves all table names from the public schema
- Performs cascading truncate on all tables
- Handles errors with automatic rollback
````

## File: tools/Docs/prisma_commands.md
````markdown
# Prisma CLI Cheatsheet

## Database Management

### Initialize Prisma in your project

```
npx prisma init
```

### Generate Prisma Client

```
npx prisma generate
```

### Push schema changes to the database

```
npx prisma db push
```

### Pull the database schema

```
npx prisma db pull
```

### Create and apply migrations

```
npx prisma migrate dev --name migration_name
```

### Apply migrations in production

```
npx prisma migrate deploy
```

## Data Management

### Open Prisma Studio (GUI to view and edit data)

```
npx prisma studio
```

### Seed the database

```
npx prisma db seed
```

## Database Dumps

### Dump the database (MySQL)

```
npx prisma db execute --file ./dump.sql --schema ./schema.prisma
```

### Dump the database (PostgreSQL)

```
pg_dump -O -x -h localhost -U username database_name > dump.sql
```

## Introspection and Visualization

### Introspect the database and update the schema

```
npx prisma db pull
```

### Generate an ERD (Entity Relationship Diagram)

```
npx prisma generate --schema=./prisma/schema.prisma
```

## Troubleshooting

### Reset the database (caution: deletes all data)

```
npx prisma migrate reset
```

### Format the Prisma schema

```
npx prisma format
```

### Validate the Prisma schema

```
npx prisma validate
````

## File: tools/.gitignore
````
.env*
.env
````

## File: tools/README.md
````markdown
# Earth Doom Tools

Collection of utilities and tools for the Earth Doom project, organized by functionality.

## Directory Structure

### [Battle calculator/](Battle%20calculator/)
Battle simulation and damage calculation tools
- Interactive battle outcome calculator
- Simulates combat between different unit types
- Provides detailed damage statistics

### [Database tools/](Database%20tools/)
Database management utilities
- Safe database cleanup utility
- Handles PostgreSQL operations with error protection
- Environment-based configuration

### [Docs/](Docs/)
Documentation and reference materials
- Prisma CLI command reference
- Database administration guides

## Quick Start

Each tool directory contains its own README with specific usage instructions and requirements.
````

## File: .gitignore
````
game/prisma/docs/index.html
game/prisma/docs/styles/main.css
````

## File: LICENSE
````
MIT License

Copyright (c) 2024 Daniel Fjeldstad

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
````

## File: README.md
````markdown
![Version](https://img.shields.io/badge/version-0.4.8-blue)
![React](https://img.shields.io/badge/React-18.3.1-success)
![Next.js](https://img.shields.io/badge/Next.js-14.2.4-success)
![TypeScript](https://img.shields.io/badge/TypeScript-5.1.6-success) 

## This game is under active development and may have bugs

## Earthdoom

![image](https://github.com/user-attachments/assets/268ea184-adef-4e12-9207-856e7bb119a5)

Earthdoom is a full-stack web-based strategy game built using Typescript, Next.js, React, tRPC, Tailwind, Prisma and more.

The database is handled through PostgreSQL.

Authentication is handled through Clerk.

Front page is developed with Astro.

The application is designed with a modern, responsive and intuitive user interface.

## Technologies used

- [Next.js](https://nextjs.org)
- [Prisma](https://prisma.io)
- [Tailwind CSS](https://tailwindcss.com)
- [tRPC](https://trpc.io)
- [React Hot Toast](https://react-hot-toast.com)
- [React Chart.js](https://react-chartjs-2.js.org)
- [Clerk](https://clerk.com)
- [Tailwind Elements](https://tailwind-elements.com)
- [Zod](https://github.com/colinhacks/zod)

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Scripts](#scripts)
- [Dependencies](#dependencies)
- [Contributing](#contributing)
- [License](#license)

## Installation

To install the required dependencies, simply run the following command in the project's root directory (/game):

```bash
npm install
```
You now need to retrieve the API keys for Clerk and Supabase and enter them into .env (you need to rename .env.example to .env)

## Usage

To start the development server, run the following command:

```bash
npm run dev
```

The application will be available at `http://localhost:3000`

## Scripts

This project includes the following npm scripts for development and building:

- `build`: Builds the application for production.
- `dev`: Starts the development server.
- `postinstall`: Generates Prisma client after installing dependencies.
- `lint`: Lints the codebase using ESLint.
- `start`: Starts the production server.
- `prisma:generate`: Generates the Prisma client.
- `format`: Formats the codebase using Prettier.
- `refresh`: Removes node_modules, package-lock.json, installs dependencies, and formats the codebase.

## Contributing

If you'd like to contribute to the development of Earthdoom Game, please follow these steps:

1. Fork the repository.
2. Create a new branch with a descriptive name.
3. Make your changes and commit them with clear and concise commit messages.
4. Push your changes to your forked repository.
5. Open a pull request with a description of the changes you've made.

## License

This project is licensed under the [MIT License](LICENSE).
````

## File: renovate.json
````json
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}
````
